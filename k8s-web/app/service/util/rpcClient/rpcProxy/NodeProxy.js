// **********************************************************************
// Parsed By TarsParser(2.4.2), Generated By tools(20180620)
// TarsParser Maintained By <TARS> and tools Maintained By <superzheng>
// Generated from "Node.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var tars = tars || {};
module.exports.tars = tars;

tars.NodeProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

tars.NodeProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

tars.NodeProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

tars.NodeProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

tars.NodeProxy.prototype.getVersion = function () {
    return this._worker.version;
};

var __tars_Node$addFile$IF = {
    "name" : "addFile",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "file",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Node$addFile$IE = function (application, serverName, file) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, file);
    return os.getBinBuffer();
};

var __tars_Node$addFile$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$addFile$PE = function (application, serverName, file, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("file", file);
    return tup;
};

var __tars_Node$addFile$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$addFile$ER = function (data) {
    throw _makeError(data, "Call Node::addFile failed");
};

tars.NodeProxy.prototype.addFile = function (application, serverName, file) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("addFile", __tars_Node$addFile$PE(application, serverName, file, version), arguments[arguments.length - 1], __tars_Node$addFile$IF).then(__tars_Node$addFile$PD, __tars_Node$addFile$ER);
    } else {
        return this._worker.tars_invoke("addFile", __tars_Node$addFile$IE(application, serverName, file), arguments[arguments.length - 1], __tars_Node$addFile$IF).then(__tars_Node$addFile$ID, __tars_Node$addFile$ER);
    }
};
tars.NodeProxy.addFile = __tars_Node$addFile$IF;

var __tars_Node$notifyServer$IF = {
    "name" : "notifyServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "command",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Node$notifyServer$IE = function (application, serverName, command) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    os.writeString(3, command);
    return os.getBinBuffer();
};

var __tars_Node$notifyServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$notifyServer$PE = function (application, serverName, command, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    tup.writeString("command", command);
    return tup;
};

var __tars_Node$notifyServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$notifyServer$ER = function (data) {
    throw _makeError(data, "Call Node::notifyServer failed");
};

tars.NodeProxy.prototype.notifyServer = function (application, serverName, command) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("notifyServer", __tars_Node$notifyServer$PE(application, serverName, command, version), arguments[arguments.length - 1], __tars_Node$notifyServer$IF).then(__tars_Node$notifyServer$PD, __tars_Node$notifyServer$ER);
    } else {
        return this._worker.tars_invoke("notifyServer", __tars_Node$notifyServer$IE(application, serverName, command), arguments[arguments.length - 1], __tars_Node$notifyServer$IF).then(__tars_Node$notifyServer$ID, __tars_Node$notifyServer$ER);
    }
};
tars.NodeProxy.notifyServer = __tars_Node$notifyServer$IF;

var __tars_Node$restartServer$IF = {
    "name" : "restartServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Node$restartServer$IE = function (application, serverName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    return os.getBinBuffer();
};

var __tars_Node$restartServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$restartServer$PE = function (application, serverName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    return tup;
};

var __tars_Node$restartServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$restartServer$ER = function (data) {
    throw _makeError(data, "Call Node::restartServer failed");
};

tars.NodeProxy.prototype.restartServer = function (application, serverName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("restartServer", __tars_Node$restartServer$PE(application, serverName, version), arguments[arguments.length - 1], __tars_Node$restartServer$IF).then(__tars_Node$restartServer$PD, __tars_Node$restartServer$ER);
    } else {
        return this._worker.tars_invoke("restartServer", __tars_Node$restartServer$IE(application, serverName), arguments[arguments.length - 1], __tars_Node$restartServer$IF).then(__tars_Node$restartServer$ID, __tars_Node$restartServer$ER);
    }
};
tars.NodeProxy.restartServer = __tars_Node$restartServer$IF;

var __tars_Node$startServer$IF = {
    "name" : "startServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Node$startServer$IE = function (application, serverName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    return os.getBinBuffer();
};

var __tars_Node$startServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$startServer$PE = function (application, serverName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    return tup;
};

var __tars_Node$startServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$startServer$ER = function (data) {
    throw _makeError(data, "Call Node::startServer failed");
};

tars.NodeProxy.prototype.startServer = function (application, serverName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("startServer", __tars_Node$startServer$PE(application, serverName, version), arguments[arguments.length - 1], __tars_Node$startServer$IF).then(__tars_Node$startServer$PD, __tars_Node$startServer$ER);
    } else {
        return this._worker.tars_invoke("startServer", __tars_Node$startServer$IE(application, serverName), arguments[arguments.length - 1], __tars_Node$startServer$IF).then(__tars_Node$startServer$ID, __tars_Node$startServer$ER);
    }
};
tars.NodeProxy.startServer = __tars_Node$startServer$IF;

var __tars_Node$stopServer$IF = {
    "name" : "stopServer",
    "return" : "int32",
    "arguments" : [{
        "name" : "application",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "serverName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Node$stopServer$IE = function (application, serverName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, application);
    os.writeString(2, serverName);
    return os.getBinBuffer();
};

var __tars_Node$stopServer$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$stopServer$PE = function (application, serverName, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("application", application);
    tup.writeString("serverName", serverName);
    return tup;
};

var __tars_Node$stopServer$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Node$stopServer$ER = function (data) {
    throw _makeError(data, "Call Node::stopServer failed");
};

tars.NodeProxy.prototype.stopServer = function (application, serverName) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("stopServer", __tars_Node$stopServer$PE(application, serverName, version), arguments[arguments.length - 1], __tars_Node$stopServer$IF).then(__tars_Node$stopServer$PD, __tars_Node$stopServer$ER);
    } else {
        return this._worker.tars_invoke("stopServer", __tars_Node$stopServer$IE(application, serverName), arguments[arguments.length - 1], __tars_Node$stopServer$IF).then(__tars_Node$stopServer$ID, __tars_Node$stopServer$ER);
    }
};
tars.NodeProxy.stopServer = __tars_Node$stopServer$IF;



