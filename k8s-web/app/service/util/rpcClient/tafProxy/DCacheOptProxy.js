// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 5.3.1 by TARS Team.
// Generated from `./DCacheOpt.jce'
// **********************************************************************

var TarsStream = require('@tars/tars-stream');
var TarsError  = require('@tars/tars-rpc').error;

if(TarsStream.JceStruct == undefined){
TarsStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TarsStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TarsStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TarsStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TarsStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var DCache = DCache || {};
module.exports.DCache = DCache;

DCache.DCacheOptProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

DCache.DCacheOptProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

DCache.DCacheOptProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


DCache.eReStatus = {
    RELEASING : 0,
    REFINISH : 1,
    REERROR : 2
};

DCache.eReStatus.etos = function(enm) {
    switch(enm){
        case 0 : return 'RELEASING';
        case 1 : return 'REFINISH';
        case 2 : return 'REERROR';
    }
    return undefined;
};

DCache.eReStatus.stoe = function(enm) {
    switch(enm){
        case 'RELEASING' : return 0;
        case 'REFINISH' : return 1;
        case 'REERROR' : return 2;
    }
    return undefined;
};

DCache.eReStatus._write = function(os, tag, val) { return os.writeInt32(tag, val); }
DCache.eReStatus._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
DCache.CacheOp = {
    tEQ : 0,
    tNE : 1,
    tGT : 2,
    tLT : 3,
    tLE : 4,
    tGE : 5,
    tLIMIT : 6
};

DCache.CacheOp.etos = function(enm) {
    switch(enm){
        case 0 : return 'tEQ';
        case 1 : return 'tNE';
        case 2 : return 'tGT';
        case 3 : return 'tLT';
        case 4 : return 'tLE';
        case 5 : return 'tGE';
        case 6 : return 'tLIMIT';
    }
    return undefined;
};

DCache.CacheOp.stoe = function(enm) {
    switch(enm){
        case 'tEQ' : return 0;
        case 'tNE' : return 1;
        case 'tGT' : return 2;
        case 'tLT' : return 3;
        case 'tLE' : return 4;
        case 'tGE' : return 5;
        case 'tLIMIT' : return 6;
    }
    return undefined;
};

DCache.CacheOp._write = function(os, tag, val) { return os.writeInt32(tag, val); }
DCache.CacheOp._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

DCache.RouterParam = function() {
    this.bRouter = true;
    this.serverName = "";
    this.appName = "";
    this.vtServerHost = new TarsStream.List(TarsStream.String);
    this.templateFile = "";
    this.dbName = "";
    this.dbIp = "";
    this.dbPort = "";
    this.dbUser = "";
    this.dbPwd = "";
    this.remark = "";
    this._classname = "DCache.RouterParam";
};
DCache.RouterParam.prototype = new TarsStream.JceStruct();
DCache.RouterParam._classname = "DCache.RouterParam";

DCache.RouterParam._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.RouterParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.RouterParam._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.RouterParam();
    tmp.bRouter = is.readBoolean(0, true, true);
    tmp.serverName = is.readString(1, true, "");
    tmp.appName = is.readString(2, true, "");
    tmp.vtServerHost = is.readList(3, true, TarsStream.List(TarsStream.String));
    tmp.templateFile = is.readString(4, true, "");
    tmp.dbName = is.readString(5, true, "");
    tmp.dbIp = is.readString(6, true, "");
    tmp.dbPort = is.readString(7, true, "");
    tmp.dbUser = is.readString(8, true, "");
    tmp.dbPwd = is.readString(9, true, "");
    tmp.remark = is.readString(10, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.RouterParam.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeBoolean(0, this.bRouter);
    os.writeString(1, this.serverName);
    os.writeString(2, this.appName);
    os.writeList(3, this.vtServerHost);
    os.writeString(4, this.templateFile);
    os.writeString(5, this.dbName);
    os.writeString(6, this.dbIp);
    os.writeString(7, this.dbPort);
    os.writeString(8, this.dbUser);
    os.writeString(9, this.dbPwd);
    os.writeString(10, this.remark);
    os.resumePrecision && os.resumePrecision();
};
DCache.RouterParam.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.RouterParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.RouterParam.prototype.toObject = function() { 
    var tmp = {};

    tmp.bRouter = this.bRouter;
    tmp.serverName = this.serverName;
    tmp.appName = this.appName;
    tmp.vtServerHost = this.vtServerHost.toObject();
    tmp.templateFile = this.templateFile;
    tmp.dbName = this.dbName;
    tmp.dbIp = this.dbIp;
    tmp.dbPort = this.dbPort;
    tmp.dbUser = this.dbUser;
    tmp.dbPwd = this.dbPwd;
    tmp.remark = this.remark;
    
    return tmp;
}
DCache.RouterParam.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("bRouter") || (this.bRouter = json.bRouter);
    !json.hasOwnProperty("serverName") || (this.serverName = json.serverName);
    !json.hasOwnProperty("appName") || (this.appName = json.appName);
    !json.hasOwnProperty("vtServerHost") || (this.vtServerHost.readFromObject(json.vtServerHost));
    !json.hasOwnProperty("templateFile") || (this.templateFile = json.templateFile);
    !json.hasOwnProperty("dbName") || (this.dbName = json.dbName);
    !json.hasOwnProperty("dbIp") || (this.dbIp = json.dbIp);
    !json.hasOwnProperty("dbPort") || (this.dbPort = json.dbPort);
    !json.hasOwnProperty("dbUser") || (this.dbUser = json.dbUser);
    !json.hasOwnProperty("dbPwd") || (this.dbPwd = json.dbPwd);
    !json.hasOwnProperty("remark") || (this.remark = json.remark);
}
DCache.RouterParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.RouterParam.new = function () {
    return new DCache.RouterParam();
}
DCache.RouterParam.create = function (is) {
    return DCache.RouterParam._readFrom(is);
}
DCache.RouterConsistRes = function() {
    this.iFlag = 0;
    this.sInfo = "";
    this._classname = "DCache.RouterConsistRes";
};
DCache.RouterConsistRes.prototype = new TarsStream.JceStruct();
DCache.RouterConsistRes._classname = "DCache.RouterConsistRes";

DCache.RouterConsistRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.RouterConsistRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.RouterConsistRes._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.RouterConsistRes();
    tmp.iFlag = is.readInt32(0, true, 0);
    tmp.sInfo = is.readString(1, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.RouterConsistRes.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.iFlag);
    os.writeString(1, this.sInfo);
    os.resumePrecision && os.resumePrecision();
};
DCache.RouterConsistRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.RouterConsistRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.RouterConsistRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.iFlag = this.iFlag;
    tmp.sInfo = this.sInfo;
    
    return tmp;
}
DCache.RouterConsistRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iFlag") || (this.iFlag = json.iFlag);
    !json.hasOwnProperty("sInfo") || (this.sInfo = json.sInfo);
}
DCache.RouterConsistRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.RouterConsistRes.new = function () {
    return new DCache.RouterConsistRes();
}
DCache.RouterConsistRes.create = function (is) {
    return DCache.RouterConsistRes._readFrom(is);
}
DCache.ProxyAddr = function() {
    this.ip = "";
    this.idcArea = "";
    this._classname = "DCache.ProxyAddr";
};
DCache.ProxyAddr.prototype = new TarsStream.JceStruct();
DCache.ProxyAddr._classname = "DCache.ProxyAddr";

DCache.ProxyAddr._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.ProxyAddr._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.ProxyAddr._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.ProxyAddr();
    tmp.ip = is.readString(0, true, "");
    tmp.idcArea = is.readString(1, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.ProxyAddr.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.ip);
    os.writeString(1, this.idcArea);
    os.resumePrecision && os.resumePrecision();
};
DCache.ProxyAddr.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.ProxyAddr.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.ProxyAddr.prototype.toObject = function() { 
    var tmp = {};

    tmp.ip = this.ip;
    tmp.idcArea = this.idcArea;
    
    return tmp;
}
DCache.ProxyAddr.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ip") || (this.ip = json.ip);
    !json.hasOwnProperty("idcArea") || (this.idcArea = json.idcArea);
}
DCache.ProxyAddr.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.ProxyAddr.new = function () {
    return new DCache.ProxyAddr();
}
DCache.ProxyAddr.create = function (is) {
    return DCache.ProxyAddr._readFrom(is);
}
DCache.ProxyParam = function() {
    this.bProxy = true;
    this.serverName = "";
    this.vtServerAddr = new TarsStream.List(DCache.ProxyAddr);
    this.templateFile = "";
    this._classname = "DCache.ProxyParam";
};
DCache.ProxyParam.prototype = new TarsStream.JceStruct();
DCache.ProxyParam._classname = "DCache.ProxyParam";

DCache.ProxyParam._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.ProxyParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.ProxyParam._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.ProxyParam();
    tmp.bProxy = is.readBoolean(0, true, true);
    tmp.serverName = is.readString(1, true, "");
    tmp.vtServerAddr = is.readList(2, true, TarsStream.List(DCache.ProxyAddr));
    tmp.templateFile = is.readString(3, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.ProxyParam.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeBoolean(0, this.bProxy);
    os.writeString(1, this.serverName);
    os.writeList(2, this.vtServerAddr);
    os.writeString(3, this.templateFile);
    os.resumePrecision && os.resumePrecision();
};
DCache.ProxyParam.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.ProxyParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.ProxyParam.prototype.toObject = function() { 
    var tmp = {};

    tmp.bProxy = this.bProxy;
    tmp.serverName = this.serverName;
    tmp.vtServerAddr = this.vtServerAddr.toObject();
    tmp.templateFile = this.templateFile;
    
    return tmp;
}
DCache.ProxyParam.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("bProxy") || (this.bProxy = json.bProxy);
    !json.hasOwnProperty("serverName") || (this.serverName = json.serverName);
    !json.hasOwnProperty("vtServerAddr") || (this.vtServerAddr.readFromObject(json.vtServerAddr));
    !json.hasOwnProperty("templateFile") || (this.templateFile = json.templateFile);
}
DCache.ProxyParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.ProxyParam.new = function () {
    return new DCache.ProxyParam();
}
DCache.ProxyParam.create = function (is) {
    return DCache.ProxyParam._readFrom(is);
}
DCache.transferProgress = function() {
    this.startPageNo = 0;
    this.endPageNo = 0;
    this.succPageNo = 0;
    this._classname = "DCache.transferProgress";
};
DCache.transferProgress.prototype = new TarsStream.JceStruct();
DCache.transferProgress._classname = "DCache.transferProgress";

DCache.transferProgress._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.transferProgress._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.transferProgress._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.transferProgress();
    tmp.startPageNo = is.readInt32(0, true, 0);
    tmp.endPageNo = is.readInt32(1, true, 0);
    tmp.succPageNo = is.readInt32(2, true, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.transferProgress.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.startPageNo);
    os.writeInt32(1, this.endPageNo);
    os.writeInt32(2, this.succPageNo);
    os.resumePrecision && os.resumePrecision();
};
DCache.transferProgress.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.transferProgress.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.transferProgress.prototype.toObject = function() { 
    var tmp = {};

    tmp.startPageNo = this.startPageNo;
    tmp.endPageNo = this.endPageNo;
    tmp.succPageNo = this.succPageNo;
    
    return tmp;
}
DCache.transferProgress.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("startPageNo") || (this.startPageNo = json.startPageNo);
    !json.hasOwnProperty("endPageNo") || (this.endPageNo = json.endPageNo);
    !json.hasOwnProperty("succPageNo") || (this.succPageNo = json.succPageNo);
}
DCache.transferProgress.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.transferProgress.new = function () {
    return new DCache.transferProgress();
}
DCache.transferProgress.create = function (is) {
    return DCache.transferProgress._readFrom(is);
}
DCache.CacheHostParam = function() {
    this.serverName = "";
    this.serverIp = "";
    this.templateFile = "";
    this.type = "";
    this.bakSrcServerName = "";
    this.idc = "";
    this.prior = "";
    this.groupName = "";
    this.shmSize = "";
    this.shmKey = "";
    this._classname = "DCache.CacheHostParam";
};
DCache.CacheHostParam.prototype = new TarsStream.JceStruct();
DCache.CacheHostParam._classname = "DCache.CacheHostParam";

DCache.CacheHostParam._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.CacheHostParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.CacheHostParam._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.CacheHostParam();
    tmp.serverName = is.readString(0, true, "");
    tmp.serverIp = is.readString(1, true, "");
    tmp.templateFile = is.readString(2, true, "");
    tmp.type = is.readString(3, true, "");
    tmp.bakSrcServerName = is.readString(4, true, "");
    tmp.idc = is.readString(5, true, "");
    tmp.prior = is.readString(6, true, "");
    tmp.groupName = is.readString(7, true, "");
    tmp.shmSize = is.readString(8, true, "");
    tmp.shmKey = is.readString(9, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.CacheHostParam.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.serverName);
    os.writeString(1, this.serverIp);
    os.writeString(2, this.templateFile);
    os.writeString(3, this.type);
    os.writeString(4, this.bakSrcServerName);
    os.writeString(5, this.idc);
    os.writeString(6, this.prior);
    os.writeString(7, this.groupName);
    os.writeString(8, this.shmSize);
    os.writeString(9, this.shmKey);
    os.resumePrecision && os.resumePrecision();
};
DCache.CacheHostParam.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.CacheHostParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.CacheHostParam.prototype.toObject = function() { 
    var tmp = {};

    tmp.serverName = this.serverName;
    tmp.serverIp = this.serverIp;
    tmp.templateFile = this.templateFile;
    tmp.type = this.type;
    tmp.bakSrcServerName = this.bakSrcServerName;
    tmp.idc = this.idc;
    tmp.prior = this.prior;
    tmp.groupName = this.groupName;
    tmp.shmSize = this.shmSize;
    tmp.shmKey = this.shmKey;
    
    return tmp;
}
DCache.CacheHostParam.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("serverName") || (this.serverName = json.serverName);
    !json.hasOwnProperty("serverIp") || (this.serverIp = json.serverIp);
    !json.hasOwnProperty("templateFile") || (this.templateFile = json.templateFile);
    !json.hasOwnProperty("type") || (this.type = json.type);
    !json.hasOwnProperty("bakSrcServerName") || (this.bakSrcServerName = json.bakSrcServerName);
    !json.hasOwnProperty("idc") || (this.idc = json.idc);
    !json.hasOwnProperty("prior") || (this.prior = json.prior);
    !json.hasOwnProperty("groupName") || (this.groupName = json.groupName);
    !json.hasOwnProperty("shmSize") || (this.shmSize = json.shmSize);
    !json.hasOwnProperty("shmKey") || (this.shmKey = json.shmKey);
}
DCache.CacheHostParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.CacheHostParam.new = function () {
    return new DCache.CacheHostParam();
}
DCache.CacheHostParam.create = function (is) {
    return DCache.CacheHostParam._readFrom(is);
}
DCache.SingleKeyConfParam = function() {
    this.keyType = "";
    this.avgDataSize = "";
    this.readDbFlag = "";
    this.enableErase = "";
    this.eraseRadio = "";
    this.saveOnlyKey = "";
    this.dbFlag = "";
    this.dbAccessIntfaceType = "";
    this.dbAccessServant = "";
    this.startExpireThread = "";
    this.expireDb = "";
    this._classname = "DCache.SingleKeyConfParam";
};
DCache.SingleKeyConfParam.prototype = new TarsStream.JceStruct();
DCache.SingleKeyConfParam._classname = "DCache.SingleKeyConfParam";

DCache.SingleKeyConfParam._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.SingleKeyConfParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.SingleKeyConfParam._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.SingleKeyConfParam();
    tmp.keyType = is.readString(0, true, "");
    tmp.avgDataSize = is.readString(1, true, "");
    tmp.readDbFlag = is.readString(2, true, "");
    tmp.enableErase = is.readString(3, true, "");
    tmp.eraseRadio = is.readString(4, true, "");
    tmp.saveOnlyKey = is.readString(5, true, "");
    tmp.dbFlag = is.readString(6, true, "");
    tmp.dbAccessIntfaceType = is.readString(7, true, "");
    tmp.dbAccessServant = is.readString(8, true, "");
    tmp.startExpireThread = is.readString(9, true, "");
    tmp.expireDb = is.readString(10, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.SingleKeyConfParam.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.keyType);
    os.writeString(1, this.avgDataSize);
    os.writeString(2, this.readDbFlag);
    os.writeString(3, this.enableErase);
    os.writeString(4, this.eraseRadio);
    os.writeString(5, this.saveOnlyKey);
    os.writeString(6, this.dbFlag);
    os.writeString(7, this.dbAccessIntfaceType);
    os.writeString(8, this.dbAccessServant);
    os.writeString(9, this.startExpireThread);
    os.writeString(10, this.expireDb);
    os.resumePrecision && os.resumePrecision();
};
DCache.SingleKeyConfParam.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.SingleKeyConfParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.SingleKeyConfParam.prototype.toObject = function() { 
    var tmp = {};

    tmp.keyType = this.keyType;
    tmp.avgDataSize = this.avgDataSize;
    tmp.readDbFlag = this.readDbFlag;
    tmp.enableErase = this.enableErase;
    tmp.eraseRadio = this.eraseRadio;
    tmp.saveOnlyKey = this.saveOnlyKey;
    tmp.dbFlag = this.dbFlag;
    tmp.dbAccessIntfaceType = this.dbAccessIntfaceType;
    tmp.dbAccessServant = this.dbAccessServant;
    tmp.startExpireThread = this.startExpireThread;
    tmp.expireDb = this.expireDb;
    
    return tmp;
}
DCache.SingleKeyConfParam.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("keyType") || (this.keyType = json.keyType);
    !json.hasOwnProperty("avgDataSize") || (this.avgDataSize = json.avgDataSize);
    !json.hasOwnProperty("readDbFlag") || (this.readDbFlag = json.readDbFlag);
    !json.hasOwnProperty("enableErase") || (this.enableErase = json.enableErase);
    !json.hasOwnProperty("eraseRadio") || (this.eraseRadio = json.eraseRadio);
    !json.hasOwnProperty("saveOnlyKey") || (this.saveOnlyKey = json.saveOnlyKey);
    !json.hasOwnProperty("dbFlag") || (this.dbFlag = json.dbFlag);
    !json.hasOwnProperty("dbAccessIntfaceType") || (this.dbAccessIntfaceType = json.dbAccessIntfaceType);
    !json.hasOwnProperty("dbAccessServant") || (this.dbAccessServant = json.dbAccessServant);
    !json.hasOwnProperty("startExpireThread") || (this.startExpireThread = json.startExpireThread);
    !json.hasOwnProperty("expireDb") || (this.expireDb = json.expireDb);
}
DCache.SingleKeyConfParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.SingleKeyConfParam.new = function () {
    return new DCache.SingleKeyConfParam();
}
DCache.SingleKeyConfParam.create = function (is) {
    return DCache.SingleKeyConfParam._readFrom(is);
}
DCache.MultiKeyConfParam = function() {
    this.mkSize = "";
    this.avgDataSize = "";
    this.readDbFlag = "";
    this.enableErase = "";
    this.eraseRadio = "";
    this.saveOnlyKey = "";
    this.dbFlag = "";
    this.dbAccessIntfaceType = "";
    this.dbAccessServant = "";
    this.startExpireThread = "";
    this.expireDb = "";
    this._classname = "DCache.MultiKeyConfParam";
};
DCache.MultiKeyConfParam.prototype = new TarsStream.JceStruct();
DCache.MultiKeyConfParam._classname = "DCache.MultiKeyConfParam";

DCache.MultiKeyConfParam._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.MultiKeyConfParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.MultiKeyConfParam._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.MultiKeyConfParam();
    tmp.mkSize = is.readString(0, true, "");
    tmp.avgDataSize = is.readString(1, true, "");
    tmp.readDbFlag = is.readString(2, true, "");
    tmp.enableErase = is.readString(3, true, "");
    tmp.eraseRadio = is.readString(4, true, "");
    tmp.saveOnlyKey = is.readString(5, true, "");
    tmp.dbFlag = is.readString(6, true, "");
    tmp.dbAccessIntfaceType = is.readString(7, true, "");
    tmp.dbAccessServant = is.readString(8, true, "");
    tmp.startExpireThread = is.readString(9, true, "");
    tmp.expireDb = is.readString(10, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.MultiKeyConfParam.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.mkSize);
    os.writeString(1, this.avgDataSize);
    os.writeString(2, this.readDbFlag);
    os.writeString(3, this.enableErase);
    os.writeString(4, this.eraseRadio);
    os.writeString(5, this.saveOnlyKey);
    os.writeString(6, this.dbFlag);
    os.writeString(7, this.dbAccessIntfaceType);
    os.writeString(8, this.dbAccessServant);
    os.writeString(9, this.startExpireThread);
    os.writeString(10, this.expireDb);
    os.resumePrecision && os.resumePrecision();
};
DCache.MultiKeyConfParam.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.MultiKeyConfParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.MultiKeyConfParam.prototype.toObject = function() { 
    var tmp = {};

    tmp.mkSize = this.mkSize;
    tmp.avgDataSize = this.avgDataSize;
    tmp.readDbFlag = this.readDbFlag;
    tmp.enableErase = this.enableErase;
    tmp.eraseRadio = this.eraseRadio;
    tmp.saveOnlyKey = this.saveOnlyKey;
    tmp.dbFlag = this.dbFlag;
    tmp.dbAccessIntfaceType = this.dbAccessIntfaceType;
    tmp.dbAccessServant = this.dbAccessServant;
    tmp.startExpireThread = this.startExpireThread;
    tmp.expireDb = this.expireDb;
    
    return tmp;
}
DCache.MultiKeyConfParam.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("mkSize") || (this.mkSize = json.mkSize);
    !json.hasOwnProperty("avgDataSize") || (this.avgDataSize = json.avgDataSize);
    !json.hasOwnProperty("readDbFlag") || (this.readDbFlag = json.readDbFlag);
    !json.hasOwnProperty("enableErase") || (this.enableErase = json.enableErase);
    !json.hasOwnProperty("eraseRadio") || (this.eraseRadio = json.eraseRadio);
    !json.hasOwnProperty("saveOnlyKey") || (this.saveOnlyKey = json.saveOnlyKey);
    !json.hasOwnProperty("dbFlag") || (this.dbFlag = json.dbFlag);
    !json.hasOwnProperty("dbAccessIntfaceType") || (this.dbAccessIntfaceType = json.dbAccessIntfaceType);
    !json.hasOwnProperty("dbAccessServant") || (this.dbAccessServant = json.dbAccessServant);
    !json.hasOwnProperty("startExpireThread") || (this.startExpireThread = json.startExpireThread);
    !json.hasOwnProperty("expireDb") || (this.expireDb = json.expireDb);
}
DCache.MultiKeyConfParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.MultiKeyConfParam.new = function () {
    return new DCache.MultiKeyConfParam();
}
DCache.MultiKeyConfParam.create = function (is) {
    return DCache.MultiKeyConfParam._readFrom(is);
}
DCache.RecordParam = function() {
    this.fieldName = "";
    this.keyType = "";
    this.dataType = "";
    this.property = "";
    this.defaultValue = "";
    this.maxLen = 0;
    this._classname = "DCache.RecordParam";
};
DCache.RecordParam.prototype = new TarsStream.JceStruct();
DCache.RecordParam._classname = "DCache.RecordParam";

DCache.RecordParam._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.RecordParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.RecordParam._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.RecordParam();
    tmp.fieldName = is.readString(0, true, "");
    tmp.keyType = is.readString(1, true, "");
    tmp.dataType = is.readString(2, true, "");
    tmp.property = is.readString(3, true, "");
    tmp.defaultValue = is.readString(4, true, "");
    tmp.maxLen = is.readInt32(5, true, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.RecordParam.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.fieldName);
    os.writeString(1, this.keyType);
    os.writeString(2, this.dataType);
    os.writeString(3, this.property);
    os.writeString(4, this.defaultValue);
    os.writeInt32(5, this.maxLen);
    os.resumePrecision && os.resumePrecision();
};
DCache.RecordParam.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.RecordParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.RecordParam.prototype.toObject = function() { 
    var tmp = {};

    tmp.fieldName = this.fieldName;
    tmp.keyType = this.keyType;
    tmp.dataType = this.dataType;
    tmp.property = this.property;
    tmp.defaultValue = this.defaultValue;
    tmp.maxLen = this.maxLen;
    
    return tmp;
}
DCache.RecordParam.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("fieldName") || (this.fieldName = json.fieldName);
    !json.hasOwnProperty("keyType") || (this.keyType = json.keyType);
    !json.hasOwnProperty("dataType") || (this.dataType = json.dataType);
    !json.hasOwnProperty("property") || (this.property = json.property);
    !json.hasOwnProperty("defaultValue") || (this.defaultValue = json.defaultValue);
    !json.hasOwnProperty("maxLen") || (this.maxLen = json.maxLen);
}
DCache.RecordParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.RecordParam.new = function () {
    return new DCache.RecordParam();
}
DCache.RecordParam.create = function (is) {
    return DCache.RecordParam._readFrom(is);
}
DCache.DCacheUninstallInfo = function() {
    this.unType = 0;
    this.sModuleName = "";
    this.sCacheServerName = "";
    this.sCacheGroupName = "";
    this.sRouteDbName = "";
    this.sRouteDbIP = "";
    this.sRouterDbPort = "";
    this.sRouteDbUserName = "";
    this.sRouterDbPwd = "";
    this.sRouteDbCharset = "";
    this.sPercent = "";
    this._classname = "DCache.DCacheUninstallInfo";
};
DCache.DCacheUninstallInfo.prototype = new TarsStream.JceStruct();
DCache.DCacheUninstallInfo._classname = "DCache.DCacheUninstallInfo";

DCache.DCacheUninstallInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.DCacheUninstallInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.DCacheUninstallInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.DCacheUninstallInfo();
    tmp.unType = is.readInt32(0, true, 0);
    tmp.sModuleName = is.readString(1, true, "");
    tmp.sCacheServerName = is.readString(2, true, "");
    tmp.sCacheGroupName = is.readString(3, true, "");
    tmp.sRouteDbName = is.readString(4, true, "");
    tmp.sRouteDbIP = is.readString(5, true, "");
    tmp.sRouterDbPort = is.readString(6, true, "");
    tmp.sRouteDbUserName = is.readString(7, true, "");
    tmp.sRouterDbPwd = is.readString(8, true, "");
    tmp.sRouteDbCharset = is.readString(9, true, "");
    tmp.sPercent = is.readString(10, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.DCacheUninstallInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.unType);
    os.writeString(1, this.sModuleName);
    os.writeString(2, this.sCacheServerName);
    os.writeString(3, this.sCacheGroupName);
    os.writeString(4, this.sRouteDbName);
    os.writeString(5, this.sRouteDbIP);
    os.writeString(6, this.sRouterDbPort);
    os.writeString(7, this.sRouteDbUserName);
    os.writeString(8, this.sRouterDbPwd);
    os.writeString(9, this.sRouteDbCharset);
    os.writeString(10, this.sPercent);
    os.resumePrecision && os.resumePrecision();
};
DCache.DCacheUninstallInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.DCacheUninstallInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.DCacheUninstallInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.unType = this.unType;
    tmp.sModuleName = this.sModuleName;
    tmp.sCacheServerName = this.sCacheServerName;
    tmp.sCacheGroupName = this.sCacheGroupName;
    tmp.sRouteDbName = this.sRouteDbName;
    tmp.sRouteDbIP = this.sRouteDbIP;
    tmp.sRouterDbPort = this.sRouterDbPort;
    tmp.sRouteDbUserName = this.sRouteDbUserName;
    tmp.sRouterDbPwd = this.sRouterDbPwd;
    tmp.sRouteDbCharset = this.sRouteDbCharset;
    tmp.sPercent = this.sPercent;
    
    return tmp;
}
DCache.DCacheUninstallInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("unType") || (this.unType = json.unType);
    !json.hasOwnProperty("sModuleName") || (this.sModuleName = json.sModuleName);
    !json.hasOwnProperty("sCacheServerName") || (this.sCacheServerName = json.sCacheServerName);
    !json.hasOwnProperty("sCacheGroupName") || (this.sCacheGroupName = json.sCacheGroupName);
    !json.hasOwnProperty("sRouteDbName") || (this.sRouteDbName = json.sRouteDbName);
    !json.hasOwnProperty("sRouteDbIP") || (this.sRouteDbIP = json.sRouteDbIP);
    !json.hasOwnProperty("sRouterDbPort") || (this.sRouterDbPort = json.sRouterDbPort);
    !json.hasOwnProperty("sRouteDbUserName") || (this.sRouteDbUserName = json.sRouteDbUserName);
    !json.hasOwnProperty("sRouterDbPwd") || (this.sRouterDbPwd = json.sRouterDbPwd);
    !json.hasOwnProperty("sRouteDbCharset") || (this.sRouteDbCharset = json.sRouteDbCharset);
    !json.hasOwnProperty("sPercent") || (this.sPercent = json.sPercent);
}
DCache.DCacheUninstallInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.DCacheUninstallInfo.new = function () {
    return new DCache.DCacheUninstallInfo();
}
DCache.DCacheUninstallInfo.create = function (is) {
    return DCache.DCacheUninstallInfo._readFrom(is);
}
DCache.DCacheReleaseInfo = function() {
    this.appname = "";
    this.servername = "";
    this.nodename = "";
    this.groupname = "";
    this.version = "";
    this.user = "";
    this.md5 = "";
    this.status = 0;
    this.sError = "";
    this.ostype = "";
    this._classname = "DCache.DCacheReleaseInfo";
};
DCache.DCacheReleaseInfo.prototype = new TarsStream.JceStruct();
DCache.DCacheReleaseInfo._classname = "DCache.DCacheReleaseInfo";

DCache.DCacheReleaseInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.DCacheReleaseInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.DCacheReleaseInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.DCacheReleaseInfo();
    tmp.appname = is.readString(0, true, "");
    tmp.servername = is.readString(1, true, "");
    tmp.nodename = is.readString(2, true, "");
    tmp.groupname = is.readString(3, true, "");
    tmp.version = is.readString(4, true, "");
    tmp.user = is.readString(5, true, "");
    tmp.md5 = is.readString(6, true, "");
    tmp.status = is.readInt32(7, true, 0);
    tmp.sError = is.readString(8, false, "");
    tmp.ostype = is.readString(9, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.DCacheReleaseInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.appname);
    os.writeString(1, this.servername);
    os.writeString(2, this.nodename);
    os.writeString(3, this.groupname);
    os.writeString(4, this.version);
    os.writeString(5, this.user);
    os.writeString(6, this.md5);
    os.writeInt32(7, this.status);
    if (this.sError != undefined && this.sError != "") {
        os.writeString(8, this.sError);
    }
    if (this.ostype != undefined && this.ostype != "") {
        os.writeString(9, this.ostype);
    }
    os.resumePrecision && os.resumePrecision();
};
DCache.DCacheReleaseInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.DCacheReleaseInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.DCacheReleaseInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.appname = this.appname;
    tmp.servername = this.servername;
    tmp.nodename = this.nodename;
    tmp.groupname = this.groupname;
    tmp.version = this.version;
    tmp.user = this.user;
    tmp.md5 = this.md5;
    tmp.status = this.status;
    tmp.sError = this.sError;
    tmp.ostype = this.ostype;
    
    return tmp;
}
DCache.DCacheReleaseInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("appname") || (this.appname = json.appname);
    !json.hasOwnProperty("servername") || (this.servername = json.servername);
    !json.hasOwnProperty("nodename") || (this.nodename = json.nodename);
    !json.hasOwnProperty("groupname") || (this.groupname = json.groupname);
    !json.hasOwnProperty("version") || (this.version = json.version);
    !json.hasOwnProperty("user") || (this.user = json.user);
    !json.hasOwnProperty("md5") || (this.md5 = json.md5);
    !json.hasOwnProperty("status") || (this.status = json.status);
    !json.hasOwnProperty("sError") || (this.sError = json.sError);
    !json.hasOwnProperty("ostype") || (this.ostype = json.ostype);
}
DCache.DCacheReleaseInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.DCacheReleaseInfo.new = function () {
    return new DCache.DCacheReleaseInfo();
}
DCache.DCacheReleaseInfo.create = function (is) {
    return DCache.DCacheReleaseInfo._readFrom(is);
}
DCache.eReleaseStatus = function() {
    this.sPercent = "";
    this.status = DCache.eReStatus.RELEASING;
    this.sError = "";
    this._classname = "DCache.eReleaseStatus";
};
DCache.eReleaseStatus.prototype = new TarsStream.JceStruct();
DCache.eReleaseStatus._classname = "DCache.eReleaseStatus";

DCache.eReleaseStatus._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.eReleaseStatus._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.eReleaseStatus._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.eReleaseStatus();
    tmp.sPercent = is.readString(0, true, "");
    tmp.status = is.readInt32(1, true, DCache.eReStatus.RELEASING);
    tmp.sError = is.readString(2, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.eReleaseStatus.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.sPercent);
    os.writeInt32(1, this.status);
    os.writeString(2, this.sError);
    os.resumePrecision && os.resumePrecision();
};
DCache.eReleaseStatus.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.eReleaseStatus.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.eReleaseStatus.prototype.toObject = function() { 
    var tmp = {};

    tmp.sPercent = this.sPercent;
    tmp.status = this.status;
    tmp.sError = this.sError;
    
    return tmp;
}
DCache.eReleaseStatus.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("sPercent") || (this.sPercent = json.sPercent);
    !json.hasOwnProperty("status") || (this.status = json.status);
    !json.hasOwnProperty("sError") || (this.sError = json.sError);
}
DCache.eReleaseStatus.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.eReleaseStatus.new = function () {
    return new DCache.eReleaseStatus();
}
DCache.eReleaseStatus.create = function (is) {
    return DCache.eReleaseStatus._readFrom(is);
}
DCache.DBInfo = function() {
    this.ip = "";
    this.user = "";
    this.pwd = "";
    this.port = "";
    this.charset = "";
    this._classname = "DCache.DBInfo";
};
DCache.DBInfo.prototype = new TarsStream.JceStruct();
DCache.DBInfo._classname = "DCache.DBInfo";

DCache.DBInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.DBInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.DBInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.DBInfo();
    tmp.ip = is.readString(0, true, "");
    tmp.user = is.readString(1, true, "");
    tmp.pwd = is.readString(2, true, "");
    tmp.port = is.readString(3, true, "");
    tmp.charset = is.readString(4, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.DBInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.ip);
    os.writeString(1, this.user);
    os.writeString(2, this.pwd);
    os.writeString(3, this.port);
    os.writeString(4, this.charset);
    os.resumePrecision && os.resumePrecision();
};
DCache.DBInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.DBInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.DBInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.ip = this.ip;
    tmp.user = this.user;
    tmp.pwd = this.pwd;
    tmp.port = this.port;
    tmp.charset = this.charset;
    
    return tmp;
}
DCache.DBInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ip") || (this.ip = json.ip);
    !json.hasOwnProperty("user") || (this.user = json.user);
    !json.hasOwnProperty("pwd") || (this.pwd = json.pwd);
    !json.hasOwnProperty("port") || (this.port = json.port);
    !json.hasOwnProperty("charset") || (this.charset = json.charset);
}
DCache.DBInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.DBInfo.new = function () {
    return new DCache.DBInfo();
}
DCache.DBInfo.create = function (is) {
    return DCache.DBInfo._readFrom(is);
}
DCache.DBAccessConf = function() {
    this.isDigital = true;
    this.DBNum = 0;
    this.DBPrefix = "";
    this.tableNum = 0;
    this.tablePrefix = "";
    this.tableEngine = "";
    this.tableCharset = "";
    this.vDBInfo = new TarsStream.List(DCache.DBInfo);
    this._classname = "DCache.DBAccessConf";
};
DCache.DBAccessConf.prototype = new TarsStream.JceStruct();
DCache.DBAccessConf._classname = "DCache.DBAccessConf";

DCache.DBAccessConf._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.DBAccessConf._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.DBAccessConf._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.DBAccessConf();
    tmp.isDigital = is.readBoolean(0, true, true);
    tmp.DBNum = is.readInt32(1, true, 0);
    tmp.DBPrefix = is.readString(2, true, "");
    tmp.tableNum = is.readInt32(3, true, 0);
    tmp.tablePrefix = is.readString(4, true, "");
    tmp.tableEngine = is.readString(5, true, "");
    tmp.tableCharset = is.readString(6, true, "");
    tmp.vDBInfo = is.readList(7, true, TarsStream.List(DCache.DBInfo));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.DBAccessConf.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeBoolean(0, this.isDigital);
    os.writeInt32(1, this.DBNum);
    os.writeString(2, this.DBPrefix);
    os.writeInt32(3, this.tableNum);
    os.writeString(4, this.tablePrefix);
    os.writeString(5, this.tableEngine);
    os.writeString(6, this.tableCharset);
    os.writeList(7, this.vDBInfo);
    os.resumePrecision && os.resumePrecision();
};
DCache.DBAccessConf.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.DBAccessConf.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.DBAccessConf.prototype.toObject = function() { 
    var tmp = {};

    tmp.isDigital = this.isDigital;
    tmp.DBNum = this.DBNum;
    tmp.DBPrefix = this.DBPrefix;
    tmp.tableNum = this.tableNum;
    tmp.tablePrefix = this.tablePrefix;
    tmp.tableEngine = this.tableEngine;
    tmp.tableCharset = this.tableCharset;
    tmp.vDBInfo = this.vDBInfo.toObject();
    
    return tmp;
}
DCache.DBAccessConf.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("isDigital") || (this.isDigital = json.isDigital);
    !json.hasOwnProperty("DBNum") || (this.DBNum = json.DBNum);
    !json.hasOwnProperty("DBPrefix") || (this.DBPrefix = json.DBPrefix);
    !json.hasOwnProperty("tableNum") || (this.tableNum = json.tableNum);
    !json.hasOwnProperty("tablePrefix") || (this.tablePrefix = json.tablePrefix);
    !json.hasOwnProperty("tableEngine") || (this.tableEngine = json.tableEngine);
    !json.hasOwnProperty("tableCharset") || (this.tableCharset = json.tableCharset);
    !json.hasOwnProperty("vDBInfo") || (this.vDBInfo.readFromObject(json.vDBInfo));
}
DCache.DBAccessConf.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.DBAccessConf.new = function () {
    return new DCache.DBAccessConf();
}
DCache.DBAccessConf.create = function (is) {
    return DCache.DBAccessConf._readFrom(is);
}
DCache.moduleParam = function() {
    this.fieldName = "";
    this.keyType = "";
    this.dataType = "";
    this.property = "";
    this.defaultValue = "";
    this.maxLen = 0;
    this.DBType = "";
    this.remark = "";
    this.tag = 0;
    this.changeType = 0;
    this._classname = "DCache.moduleParam";
};
DCache.moduleParam.prototype = new TarsStream.JceStruct();
DCache.moduleParam._classname = "DCache.moduleParam";

DCache.moduleParam._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.moduleParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.moduleParam._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.moduleParam();
    tmp.fieldName = is.readString(0, true, "");
    tmp.keyType = is.readString(1, true, "");
    tmp.dataType = is.readString(2, true, "");
    tmp.property = is.readString(3, true, "");
    tmp.defaultValue = is.readString(4, true, "");
    tmp.maxLen = is.readInt32(5, true, 0);
    tmp.DBType = is.readString(6, true, "");
    tmp.remark = is.readString(7, true, "");
    tmp.tag = is.readInt32(8, false, 0);
    tmp.changeType = is.readInt32(9, false, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.moduleParam.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.fieldName);
    os.writeString(1, this.keyType);
    os.writeString(2, this.dataType);
    os.writeString(3, this.property);
    os.writeString(4, this.defaultValue);
    os.writeInt32(5, this.maxLen);
    os.writeString(6, this.DBType);
    os.writeString(7, this.remark);
    if (this.tag != undefined && this.tag != 0) {
        os.writeInt32(8, this.tag);
    }
    if (this.changeType != undefined && this.changeType != 0) {
        os.writeInt32(9, this.changeType);
    }
    os.resumePrecision && os.resumePrecision();
};
DCache.moduleParam.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.moduleParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.moduleParam.prototype.toObject = function() { 
    var tmp = {};

    tmp.fieldName = this.fieldName;
    tmp.keyType = this.keyType;
    tmp.dataType = this.dataType;
    tmp.property = this.property;
    tmp.defaultValue = this.defaultValue;
    tmp.maxLen = this.maxLen;
    tmp.DBType = this.DBType;
    tmp.remark = this.remark;
    tmp.tag = this.tag;
    tmp.changeType = this.changeType;
    
    return tmp;
}
DCache.moduleParam.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("fieldName") || (this.fieldName = json.fieldName);
    !json.hasOwnProperty("keyType") || (this.keyType = json.keyType);
    !json.hasOwnProperty("dataType") || (this.dataType = json.dataType);
    !json.hasOwnProperty("property") || (this.property = json.property);
    !json.hasOwnProperty("defaultValue") || (this.defaultValue = json.defaultValue);
    !json.hasOwnProperty("maxLen") || (this.maxLen = json.maxLen);
    !json.hasOwnProperty("DBType") || (this.DBType = json.DBType);
    !json.hasOwnProperty("remark") || (this.remark = json.remark);
    !json.hasOwnProperty("tag") || (this.tag = json.tag);
    !json.hasOwnProperty("changeType") || (this.changeType = json.changeType);
}
DCache.moduleParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.moduleParam.new = function () {
    return new DCache.moduleParam();
}
DCache.moduleParam.create = function (is) {
    return DCache.moduleParam._readFrom(is);
}
DCache.moduleServer = function() {
    this.serverName = "";
    this.idc = "";
    this.type = "";
    this._classname = "DCache.moduleServer";
};
DCache.moduleServer.prototype = new TarsStream.JceStruct();
DCache.moduleServer._classname = "DCache.moduleServer";

DCache.moduleServer._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.moduleServer._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.moduleServer._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.moduleServer();
    tmp.serverName = is.readString(0, true, "");
    tmp.idc = is.readString(1, true, "");
    tmp.type = is.readString(2, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.moduleServer.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.serverName);
    os.writeString(1, this.idc);
    os.writeString(2, this.type);
    os.resumePrecision && os.resumePrecision();
};
DCache.moduleServer.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.moduleServer.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.moduleServer.prototype.toObject = function() { 
    var tmp = {};

    tmp.serverName = this.serverName;
    tmp.idc = this.idc;
    tmp.type = this.type;
    
    return tmp;
}
DCache.moduleServer.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("serverName") || (this.serverName = json.serverName);
    !json.hasOwnProperty("idc") || (this.idc = json.idc);
    !json.hasOwnProperty("type") || (this.type = json.type);
}
DCache.moduleServer.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.moduleServer.new = function () {
    return new DCache.moduleServer();
}
DCache.moduleServer.create = function (is) {
    return DCache.moduleServer._readFrom(is);
}
DCache.transferInfo = function() {
    this.appName = "";
    this.moduleName = "";
    this.srcGroupName = "";
    this.destGroupNames = "";
    this.status = 0;
    this.progress = 0;
    this.type = 0;
    this.beginTime = "";
    this._classname = "DCache.transferInfo";
};
DCache.transferInfo.prototype = new TarsStream.JceStruct();
DCache.transferInfo._classname = "DCache.transferInfo";

DCache.transferInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.transferInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.transferInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.transferInfo();
    tmp.appName = is.readString(0, true, "");
    tmp.moduleName = is.readString(1, true, "");
    tmp.srcGroupName = is.readString(2, true, "");
    tmp.destGroupNames = is.readString(3, true, "");
    tmp.status = is.readInt32(4, true, 0);
    tmp.progress = is.readInt32(5, true, 0);
    tmp.type = is.readInt32(6, true, 0);
    tmp.beginTime = is.readString(7, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.transferInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.appName);
    os.writeString(1, this.moduleName);
    os.writeString(2, this.srcGroupName);
    os.writeString(3, this.destGroupNames);
    os.writeInt32(4, this.status);
    os.writeInt32(5, this.progress);
    os.writeInt32(6, this.type);
    os.writeString(7, this.beginTime);
    os.resumePrecision && os.resumePrecision();
};
DCache.transferInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.transferInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.transferInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.appName = this.appName;
    tmp.moduleName = this.moduleName;
    tmp.srcGroupName = this.srcGroupName;
    tmp.destGroupNames = this.destGroupNames;
    tmp.status = this.status;
    tmp.progress = this.progress;
    tmp.type = this.type;
    tmp.beginTime = this.beginTime;
    
    return tmp;
}
DCache.transferInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("appName") || (this.appName = json.appName);
    !json.hasOwnProperty("moduleName") || (this.moduleName = json.moduleName);
    !json.hasOwnProperty("srcGroupName") || (this.srcGroupName = json.srcGroupName);
    !json.hasOwnProperty("destGroupNames") || (this.destGroupNames = json.destGroupNames);
    !json.hasOwnProperty("status") || (this.status = json.status);
    !json.hasOwnProperty("progress") || (this.progress = json.progress);
    !json.hasOwnProperty("type") || (this.type = json.type);
    !json.hasOwnProperty("beginTime") || (this.beginTime = json.beginTime);
}
DCache.transferInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.transferInfo.new = function () {
    return new DCache.transferInfo();
}
DCache.transferInfo.create = function (is) {
    return DCache.transferInfo._readFrom(is);
}
DCache.SwitchInfo = function() {
    this.sAppName = "";
    this.sModuleName = "";
    this.sGroupName = "";
    this.sMasterServer = "";
    this.sSlaveServer = "";
    this.sMirrorIdc = "";
    this.sMasterMirror = "";
    this.sSlaveMirror = "";
    this.sSwitchTime = "";
    this.sModifyTime = "";
    this.sComment = "";
    this.sDBFlag = "";
    this.sEnableErase = "";
    this.iSwitchType = 0;
    this.iSwitchResult = 0;
    this.iGroupStatus = 0;
    this.sMemsize = "";
    this.sSwitchProperty = "";
    this._classname = "DCache.SwitchInfo";
};
DCache.SwitchInfo.prototype = new TarsStream.JceStruct();
DCache.SwitchInfo._classname = "DCache.SwitchInfo";

DCache.SwitchInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.SwitchInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.SwitchInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.SwitchInfo();
    tmp.sAppName = is.readString(0, true, "");
    tmp.sModuleName = is.readString(1, true, "");
    tmp.sGroupName = is.readString(2, true, "");
    tmp.sMasterServer = is.readString(3, true, "");
    tmp.sSlaveServer = is.readString(4, true, "");
    tmp.sMirrorIdc = is.readString(5, true, "");
    tmp.sMasterMirror = is.readString(6, true, "");
    tmp.sSlaveMirror = is.readString(7, true, "");
    tmp.sSwitchTime = is.readString(8, true, "");
    tmp.sModifyTime = is.readString(9, true, "");
    tmp.sComment = is.readString(10, true, "");
    tmp.sDBFlag = is.readString(11, true, "");
    tmp.sEnableErase = is.readString(12, true, "");
    tmp.iSwitchType = is.readInt32(13, true, 0);
    tmp.iSwitchResult = is.readInt32(14, true, 0);
    tmp.iGroupStatus = is.readInt32(15, true, 0);
    tmp.sMemsize = is.readString(16, true, "");
    tmp.sSwitchProperty = is.readString(17, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.SwitchInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.sAppName);
    os.writeString(1, this.sModuleName);
    os.writeString(2, this.sGroupName);
    os.writeString(3, this.sMasterServer);
    os.writeString(4, this.sSlaveServer);
    os.writeString(5, this.sMirrorIdc);
    os.writeString(6, this.sMasterMirror);
    os.writeString(7, this.sSlaveMirror);
    os.writeString(8, this.sSwitchTime);
    os.writeString(9, this.sModifyTime);
    os.writeString(10, this.sComment);
    os.writeString(11, this.sDBFlag);
    os.writeString(12, this.sEnableErase);
    os.writeInt32(13, this.iSwitchType);
    os.writeInt32(14, this.iSwitchResult);
    os.writeInt32(15, this.iGroupStatus);
    os.writeString(16, this.sMemsize);
    if (this.sSwitchProperty != undefined && this.sSwitchProperty != "") {
        os.writeString(17, this.sSwitchProperty);
    }
    os.resumePrecision && os.resumePrecision();
};
DCache.SwitchInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.SwitchInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.SwitchInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.sAppName = this.sAppName;
    tmp.sModuleName = this.sModuleName;
    tmp.sGroupName = this.sGroupName;
    tmp.sMasterServer = this.sMasterServer;
    tmp.sSlaveServer = this.sSlaveServer;
    tmp.sMirrorIdc = this.sMirrorIdc;
    tmp.sMasterMirror = this.sMasterMirror;
    tmp.sSlaveMirror = this.sSlaveMirror;
    tmp.sSwitchTime = this.sSwitchTime;
    tmp.sModifyTime = this.sModifyTime;
    tmp.sComment = this.sComment;
    tmp.sDBFlag = this.sDBFlag;
    tmp.sEnableErase = this.sEnableErase;
    tmp.iSwitchType = this.iSwitchType;
    tmp.iSwitchResult = this.iSwitchResult;
    tmp.iGroupStatus = this.iGroupStatus;
    tmp.sMemsize = this.sMemsize;
    tmp.sSwitchProperty = this.sSwitchProperty;
    
    return tmp;
}
DCache.SwitchInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("sAppName") || (this.sAppName = json.sAppName);
    !json.hasOwnProperty("sModuleName") || (this.sModuleName = json.sModuleName);
    !json.hasOwnProperty("sGroupName") || (this.sGroupName = json.sGroupName);
    !json.hasOwnProperty("sMasterServer") || (this.sMasterServer = json.sMasterServer);
    !json.hasOwnProperty("sSlaveServer") || (this.sSlaveServer = json.sSlaveServer);
    !json.hasOwnProperty("sMirrorIdc") || (this.sMirrorIdc = json.sMirrorIdc);
    !json.hasOwnProperty("sMasterMirror") || (this.sMasterMirror = json.sMasterMirror);
    !json.hasOwnProperty("sSlaveMirror") || (this.sSlaveMirror = json.sSlaveMirror);
    !json.hasOwnProperty("sSwitchTime") || (this.sSwitchTime = json.sSwitchTime);
    !json.hasOwnProperty("sModifyTime") || (this.sModifyTime = json.sModifyTime);
    !json.hasOwnProperty("sComment") || (this.sComment = json.sComment);
    !json.hasOwnProperty("sDBFlag") || (this.sDBFlag = json.sDBFlag);
    !json.hasOwnProperty("sEnableErase") || (this.sEnableErase = json.sEnableErase);
    !json.hasOwnProperty("iSwitchType") || (this.iSwitchType = json.iSwitchType);
    !json.hasOwnProperty("iSwitchResult") || (this.iSwitchResult = json.iSwitchResult);
    !json.hasOwnProperty("iGroupStatus") || (this.iGroupStatus = json.iGroupStatus);
    !json.hasOwnProperty("sMemsize") || (this.sMemsize = json.sMemsize);
    !json.hasOwnProperty("sSwitchProperty") || (this.sSwitchProperty = json.sSwitchProperty);
}
DCache.SwitchInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.SwitchInfo.new = function () {
    return new DCache.SwitchInfo();
}
DCache.SwitchInfo.create = function (is) {
    return DCache.SwitchInfo._readFrom(is);
}
DCache.CacheCond = function() {
    this.fieldName = "";
    this.op = DCache.CacheOp.tEQ;
    this.value = "";
    this._classname = "DCache.CacheCond";
};
DCache.CacheCond.prototype = new TarsStream.JceStruct();
DCache.CacheCond._classname = "DCache.CacheCond";

DCache.CacheCond._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.CacheCond._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.CacheCond._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.CacheCond();
    tmp.fieldName = is.readString(0, true, "");
    tmp.op = is.readInt32(1, true, DCache.CacheOp.tEQ);
    tmp.value = is.readString(2, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.CacheCond.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.fieldName);
    os.writeInt32(1, this.op);
    os.writeString(2, this.value);
    os.resumePrecision && os.resumePrecision();
};
DCache.CacheCond.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.CacheCond.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.CacheCond.prototype.toObject = function() { 
    var tmp = {};

    tmp.fieldName = this.fieldName;
    tmp.op = this.op;
    tmp.value = this.value;
    
    return tmp;
}
DCache.CacheCond.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("fieldName") || (this.fieldName = json.fieldName);
    !json.hasOwnProperty("op") || (this.op = json.op);
    !json.hasOwnProperty("value") || (this.value = json.value);
}
DCache.CacheCond.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.CacheCond.new = function () {
    return new DCache.CacheCond();
}
DCache.CacheCond.create = function (is) {
    return DCache.CacheCond._readFrom(is);
}
DCache.CacheData = function() {
    this.sData = "";
    this.iDataSize = 0;
    this.sMd5 = "";
    this._classname = "DCache.CacheData";
};
DCache.CacheData.prototype = new TarsStream.JceStruct();
DCache.CacheData._classname = "DCache.CacheData";

DCache.CacheData._write = function (os, tag, value) { os.writeStruct(tag, value); }
DCache.CacheData._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DCache.CacheData._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new DCache.CacheData();
    tmp.sData = is.readString(0, true, "");
    tmp.iDataSize = is.readInt32(1, true, 0);
    tmp.sMd5 = is.readString(2, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
DCache.CacheData.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.sData);
    os.writeInt32(1, this.iDataSize);
    os.writeString(2, this.sMd5);
    os.resumePrecision && os.resumePrecision();
};
DCache.CacheData.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
DCache.CacheData.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
DCache.CacheData.prototype.toObject = function() { 
    var tmp = {};

    tmp.sData = this.sData;
    tmp.iDataSize = this.iDataSize;
    tmp.sMd5 = this.sMd5;
    
    return tmp;
}
DCache.CacheData.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("sData") || (this.sData = json.sData);
    !json.hasOwnProperty("iDataSize") || (this.iDataSize = json.iDataSize);
    !json.hasOwnProperty("sMd5") || (this.sMd5 = json.sMd5);
}
DCache.CacheData.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DCache.CacheData.new = function () {
    return new DCache.CacheData();
}
DCache.CacheData.create = function (is) {
    return DCache.CacheData._readFrom(is);
}

DCache.DCacheOptProxy.prototype.TransferDataExistGroup = function (appName, moduleName, srcGroupName, destGroupName, bTransferData, userName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        os.writeString(4, destGroupName);
        os.writeBoolean(5, bTransferData);
        os.writeString(6, userName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(7, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('TransferDataExistGroup', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.TransferOnlySetRouterDBV2 = function (appName, moduleName, srcGroupName, destGroupName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        os.writeString(4, destGroupName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('TransferOnlySetRouterDBV2', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.cacheIsSerializated = function (sAppName, sModuleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sModuleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.isSerializated = is.readBoolean(3, true, TarsStream.Boolean);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('cacheIsSerializated', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.changeCacheItem = function (sAppName, sModuleName, cacheType, vItem) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sModuleName);
        os.writeInt32(3, cacheType);
        os.writeList(4, vItem);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('changeCacheItem', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.checkDCacheRouteConfig = function (sHost, sUser, sPasswd, sDatabase, sCharSet, iPort, iFlag) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sHost);
        os.writeString(2, sUser);
        os.writeString(3, sPasswd);
        os.writeString(4, sDatabase);
        os.writeString(5, sCharSet);
        os.writeInt32(6, iPort);
        os.writeInt32(7, iFlag);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readString(0, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('checkDCacheRouteConfig', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.cleanExpandInfo = function (appName, moduleName, destGroupNames) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeList(3, destGroupNames);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('cleanExpandInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.cleanTransferInfo = function (appName, moduleName, srcGroupName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('cleanTransferInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.cleanUpDB = function (sAppName, sModuleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sModuleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('cleanUpDB', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.configureExpand = function (appName, moduleName, sTarsVersion, serverType, vtCacheHost) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, sTarsVersion);
        os.writeInt32(4, serverType);
        os.writeList(5, vtCacheHost);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(6, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('configureExpand', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.configureTransfer = function (appName, moduleName, srcGroupName, sTarsVersion, serverType, isDestServerExist, vtCacheHost) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        os.writeString(4, sTarsVersion);
        os.writeInt32(5, serverType);
        os.writeBoolean(6, isDestServerExist);
        os.writeList(7, vtCacheHost);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(8, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('configureTransfer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.configureTransferV2 = function (appName, moduleName, srcGroupName, sTarsVersion, serverType, isDestServerExist, vtCacheHost) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        os.writeString(4, sTarsVersion);
        os.writeInt32(5, serverType);
        os.writeBoolean(6, isDestServerExist);
        os.writeList(7, vtCacheHost);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(8, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('configureTransferV2', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.dataRecover = function (sAppName, sServerName, serverType, lastTime) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sServerName);
        os.writeInt32(3, serverType);
        os.writeInt64(4, lastTime);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('dataRecover', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.delMKCacheData = function (proxyObj, moduleName, sKey, cond) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, proxyObj);
        os.writeString(2, moduleName);
        os.writeString(3, sKey);
        os.writeList(4, cond);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.iRet = is.readInt32(5, true, TarsStream.Int32);
            response.arguments.consumeTime = is.readInt32(6, true, TarsStream.Int32);
            response.arguments.err = is.readString(7, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('delMKCacheData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.delTCacheData = function (proxyObj, moduleName, sKey, keyType) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, proxyObj);
        os.writeString(2, moduleName);
        os.writeString(3, sKey);
        os.writeString(4, keyType);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.iRet = is.readInt32(5, true, TarsStream.Int32);
            response.arguments.consumeTime = is.readInt32(6, true, TarsStream.Int32);
            response.arguments.err = is.readString(7, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('delTCacheData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.deleteTransferTask = function (appName, moduleName, srcGroup, destGroup, type) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroup);
        os.writeString(4, destGroup);
        os.writeInt32(5, type);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(6, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('deleteTransferTask', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.expandDCache = function (appName, moduleName, serviceSetName, serviceName, vtCacheHost, sTarsVersion, expandType, bReplace) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, serviceSetName);
        os.writeString(4, serviceName);
        os.writeList(5, vtCacheHost);
        os.writeString(6, sTarsVersion);
        os.writeInt32(7, expandType);
        os.writeBoolean(8, bReplace);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.rcRes = is.readStruct(9, true, DCache.RouterConsistRes);
            response.arguments.err = is.readString(10, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('expandDCache', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getCangeItemProgress = function (sAppName, sModuleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sModuleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.process = is.readInt32(3, true, TarsStream.Int32);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getCangeItemProgress', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getCleanUpDBProgress = function (sAppName, sModuleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sModuleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.process = is.readInt32(3, true, TarsStream.Int32);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getCleanUpDBProgress', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getDBConfInfo = function (dbaccessServerName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, dbaccessServerName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.conf = is.readStruct(2, true, DCache.DBAccessConf);
            response.arguments.isSerializated = is.readBoolean(3, true, TarsStream.Boolean);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getDBConfInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getDBDataSize = function (dbaccessServerName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, dbaccessServerName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.dataNum = is.readInt64(2, true, TarsStream.Int64);
            response.arguments.err = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getDBDataSize', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getExpandInfo = function (appName, moduleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getExpandInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getMKCacheData = function (proxyObj, moduleName, sKey, cond) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, proxyObj);
        os.writeString(2, moduleName);
        os.writeString(3, sKey);
        os.writeList(4, cond);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.cacheServerName = is.readString(5, true, TarsStream.String);
            response.arguments.vtData = is.readList(6, true, TarsStream.List(TarsStream.Map(TarsStream.String, DCache.CacheData)));
            response.arguments.dataNum = is.readInt32(7, true, TarsStream.Int32);
            response.arguments.vDataSize = is.readList(8, true, TarsStream.List(TarsStream.Int32));
            response.arguments.totalSize = is.readInt32(9, true, TarsStream.Int32);
            response.arguments.iRet = is.readInt32(10, true, TarsStream.Int32);
            response.arguments.consumeTime = is.readInt32(11, true, TarsStream.Int32);
            response.arguments.err = is.readString(12, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getMKCacheData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getMKDBData = function (sAppName, sModuleName, dbaccessObj, sKey, cond) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sModuleName);
        os.writeString(3, dbaccessObj);
        os.writeString(4, sKey);
        os.writeList(5, cond);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.ip = is.readString(6, true, TarsStream.String);
            response.arguments.port = is.readString(7, true, TarsStream.String);
            response.arguments.dbName = is.readString(8, true, TarsStream.String);
            response.arguments.tableName = is.readString(9, true, TarsStream.String);
            response.arguments.vtData = is.readList(10, true, TarsStream.List(TarsStream.Map(TarsStream.String, DCache.CacheData)));
            response.arguments.dataNum = is.readInt32(11, true, TarsStream.Int32);
            response.arguments.vDataSize = is.readList(12, true, TarsStream.List(TarsStream.Int32));
            response.arguments.totalSize = is.readInt32(13, true, TarsStream.Int32);
            response.arguments.iRet = is.readInt32(14, true, TarsStream.Int32);
            response.arguments.consumeTime = is.readInt32(15, true, TarsStream.Int32);
            response.arguments.err = is.readString(16, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getMKDBData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getModuleInfo = function (appName, moduleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.vtModuleRecord = is.readList(3, true, TarsStream.List(DCache.moduleParam));
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getModuleInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getModuleStruct = function (appName, moduleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.idc = is.readString(3, true, TarsStream.String);
            response.arguments.nodeNum = is.readInt32(4, true, TarsStream.Int32);
            response.arguments.totalMemSize = is.readString(5, true, TarsStream.String);
            response.arguments.avgMemSize = is.readString(6, true, TarsStream.String);
            response.arguments.memUsage = is.readInt32(7, true, TarsStream.Int32);
            response.arguments.hit = is.readInt32(8, true, TarsStream.Int32);
            response.arguments.dataNum = is.readInt32(9, true, TarsStream.Int32);
            response.arguments.cacheType = is.readInt32(10, true, TarsStream.Int32);
            response.arguments.info = is.readList(11, true, TarsStream.List(DCache.moduleServer));
            response.arguments.err = is.readString(12, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getModuleStruct', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getReleaseProgress = function (id) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeInt32(1, id);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.sPercent = is.readString(2, true, TarsStream.String);
            response.arguments.err = is.readString(3, true, TarsStream.String);
            response.arguments.vecPatchInfo = is.readList(4, true, TarsStream.List(DCache.DCacheReleaseInfo));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getReleaseProgress', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getSwitchInfo = function (cond, index, number) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeMap(1, cond);
        os.writeInt32(2, index);
        os.writeInt32(3, number);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.vInfo = is.readList(4, true, TarsStream.List(DCache.SwitchInfo));
            response.arguments.totalNum = is.readInt32(5, true, TarsStream.Int32);
            response.arguments.err = is.readString(6, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getSwitchInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getTCacheData = function (proxyObj, moduleName, sKey, keyType) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, proxyObj);
        os.writeString(2, moduleName);
        os.writeString(3, sKey);
        os.writeString(4, keyType);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.cacheServerName = is.readString(5, true, TarsStream.String);
            response.arguments.value = is.readString(6, true, TarsStream.String);
            response.arguments.valueSize = is.readInt32(7, true, TarsStream.Int32);
            response.arguments.valueMd5 = is.readString(8, true, TarsStream.String);
            response.arguments.ver = is.readInt32(9, true, TarsStream.Int32);
            response.arguments.iRet = is.readInt32(10, true, TarsStream.Int32);
            response.arguments.consumeTime = is.readInt32(11, true, TarsStream.Int32);
            response.arguments.err = is.readString(12, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getTCacheData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getTDBData = function (dbaccessObj, sKey, keyType) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, dbaccessObj);
        os.writeString(2, sKey);
        os.writeString(3, keyType);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.ip = is.readString(4, true, TarsStream.String);
            response.arguments.port = is.readString(5, true, TarsStream.String);
            response.arguments.dbName = is.readString(6, true, TarsStream.String);
            response.arguments.tableName = is.readString(7, true, TarsStream.String);
            response.arguments.value = is.readString(8, true, TarsStream.String);
            response.arguments.valueSize = is.readInt32(9, true, TarsStream.Int32);
            response.arguments.valueMd5 = is.readString(10, true, TarsStream.String);
            response.arguments.iRet = is.readInt32(11, true, TarsStream.Int32);
            response.arguments.consumeTime = is.readInt32(12, true, TarsStream.Int32);
            response.arguments.err = is.readString(13, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getTDBData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getTransferGroup = function (cond, index, number) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeMap(1, cond);
        os.writeInt32(2, index);
        os.writeInt32(3, number);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.vInfo = is.readList(4, true, TarsStream.List(DCache.transferInfo));
            response.arguments.totalNum = is.readInt32(5, true, TarsStream.Int32);
            response.arguments.err = is.readString(6, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getTransferGroup', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getTransferInfo = function (appName, moduleName, srcGroupName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getTransferInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getTransferProgress = function (appName, moduleName, srcGroupName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.vtTransferProgress = is.readList(4, true, TarsStream.List(DCache.transferProgress));
            response.arguments.err = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getTransferProgress', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.getTransferProgressForExpand = function (appName, moduleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.vtTransferProgress = is.readList(3, true, TarsStream.List(DCache.transferProgress));
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getTransferProgressForExpand', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.installDBAccess = function (appName, serverName, serverIp, serverTemplate, isSerializated, vtModuleRecord, conf, bReplace) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, serverName);
        os.writeList(3, serverIp);
        os.writeString(4, serverTemplate);
        os.writeBoolean(5, isSerializated);
        os.writeList(6, vtModuleRecord);
        os.writeStruct(7, conf);
        os.writeBoolean(8, bReplace);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(9, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('installDBAccess', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.installMultiKey = function (moduleName, serviceSetName, serviceName, stRouter, stProxy, vtCacheHost, stMultiKeyConf, vtRecord, sTarsVersion, bReplace) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, moduleName);
        os.writeString(2, serviceSetName);
        os.writeString(3, serviceName);
        os.writeStruct(4, stRouter);
        os.writeStruct(5, stProxy);
        os.writeList(6, vtCacheHost);
        os.writeStruct(7, stMultiKeyConf);
        os.writeList(8, vtRecord);
        os.writeString(9, sTarsVersion);
        os.writeBoolean(10, bReplace);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.rcRes = is.readStruct(11, true, DCache.RouterConsistRes);
            response.arguments.err = is.readString(12, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('installMultiKey', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.installSingleKey = function (moduleName, serviceSetName, serviceName, stRouter, stProxy, vtCacheHost, stSingleKeyConf, sTarsVersion, bReplace) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, moduleName);
        os.writeString(2, serviceSetName);
        os.writeString(3, serviceName);
        os.writeStruct(4, stRouter);
        os.writeStruct(5, stProxy);
        os.writeList(6, vtCacheHost);
        os.writeStruct(7, stSingleKeyConf);
        os.writeString(8, sTarsVersion);
        os.writeBoolean(9, bReplace);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.rcRes = is.readStruct(10, true, DCache.RouterConsistRes);
            response.arguments.err = is.readString(11, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('installSingleKey', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.installWDBAccess = function (appName, serverName, serverIp, serverTemplate, vtModuleRecord, conf, bReplace) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, serverName);
        os.writeList(3, serverIp);
        os.writeString(4, serverTemplate);
        os.writeList(5, vtModuleRecord);
        os.writeStruct(6, conf);
        os.writeBoolean(7, bReplace);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(8, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('installWDBAccess', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.reTryStopedExpand = function (appName, moduleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('reTryStopedExpand', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.recoverMirrorStat = function (sAppName, sModuleName, sGroupName, sMirrorIdc, sDBFlag, sEnableErase) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sModuleName);
        os.writeString(3, sGroupName);
        os.writeString(4, sMirrorIdc);
        os.writeString(5, sDBFlag);
        os.writeString(6, sEnableErase);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(7, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('recoverMirrorStat', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.releaseExpandServer = function (appName, moduleName, version, user, md5, vtCacheHost) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, version);
        os.writeString(4, user);
        os.writeString(5, md5);
        os.writeList(6, vtCacheHost);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(7, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('releaseExpandServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.releaseServer = function (vecPatchInfo) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeList(1, vecPatchInfo);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.releaseId = is.readInt32(2, true, TarsStream.Int32);
            response.arguments.err = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('releaseServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.releaseTransferServer = function (appName, moduleName, srcGroupName, version, user, md5, isDestServerExist, vtCacheHost) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        os.writeString(4, version);
        os.writeString(5, user);
        os.writeString(6, md5);
        os.writeBoolean(7, isDestServerExist);
        os.writeList(8, vtCacheHost);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(9, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('releaseTransferServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.reloadRouterConfByModuleFromDB = function (sApp, moduleName, sRouterServerName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sApp);
        os.writeString(2, moduleName);
        os.writeString(3, sRouterServerName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readBoolean(0, true, TarsStream.Boolean);
            response.arguments.sResult = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('reloadRouterConfByModuleFromDB', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.reloadRouterConfFromDB = function (sApp, sRouterServerName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sApp);
        os.writeString(2, sRouterServerName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readBoolean(0, true, TarsStream.Boolean);
            response.arguments.sResult = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('reloadRouterConfFromDB', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.restoreFromGroup = function (appName, moduleName, srcGroup, destServerName, lastTime) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroup);
        os.writeString(4, destServerName);
        os.writeInt64(5, lastTime);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(6, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('restoreFromGroup', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.setTransferInRouterDB = function (appName, moduleName, srcGroupName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('setTransferInRouterDB', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.setTransferInRouterDBV2 = function (appName, moduleName, srcGroupName, destGroupName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        os.writeString(4, destGroupName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('setTransferInRouterDBV2', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.setTransferInRouterDBforExpand = function (appName, moduleName, destGroupNames) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeList(3, destGroupNames);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('setTransferInRouterDBforExpand', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.stopTransfer = function (appName, moduleName, srcGroupName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('stopTransfer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.stopTransferForExpand = function (appName, moduleName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('stopTransferForExpand', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.stopTransferv2 = function (appName, moduleName, srcGroupName, destGroupName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, appName);
        os.writeString(2, moduleName);
        os.writeString(3, srcGroupName);
        os.writeString(4, destGroupName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('stopTransferv2', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.switchByGroup = function (sAppName, sModuleName, sGroupName, bForceSwitch, iDifBinlogTime) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sAppName);
        os.writeString(2, sModuleName);
        os.writeString(3, sGroupName);
        os.writeBoolean(4, bForceSwitch);
        os.writeInt32(5, iDifBinlogTime);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.err = is.readString(6, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('switchByGroup', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.uninstall4DCache = function (uninstallInfo) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeStruct(1, uninstallInfo);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.sError = is.readString(2, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('uninstall4DCache', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

DCache.DCacheOptProxy.prototype.uninstall4TarsServer = function (sTarsServerName, sIp) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, sTarsServerName);
        os.writeString(2, sIp);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.sError = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('uninstall4TarsServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



