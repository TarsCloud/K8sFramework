// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 5.3.1 by TARS Team.
// Generated from `./NodeDescriptor.jce'
// **********************************************************************

var assert    = require('assert');
var TarsStream = require('@tars/tars-stream');

if(TarsStream.JceStruct == undefined){
TarsStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TarsStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TarsStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TarsStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TarsStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}



var tars = tars || {};
module.exports.tars = tars;

tars.ServerState = {
    Inactive : 0,
    Activating : 1,
    Active : 2,
    Deactivating : 3,
    Destroying : 4,
    Destroyed : 5
};

tars.ServerState.etos = function(enm) {
    switch(enm){
        case 0 : return 'Inactive';
        case 1 : return 'Activating';
        case 2 : return 'Active';
        case 3 : return 'Deactivating';
        case 4 : return 'Destroying';
        case 5 : return 'Destroyed';
    }
    return undefined;
};

tars.ServerState.stoe = function(enm) {
    switch(enm){
        case 'Inactive' : return 0;
        case 'Activating' : return 1;
        case 'Active' : return 2;
        case 'Deactivating' : return 3;
        case 'Destroying' : return 4;
        case 'Destroyed' : return 5;
    }
    return undefined;
};

tars.ServerState._write = function(os, tag, val) { return os.writeInt32(tag, val); }
tars.ServerState._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

tars.LoadInfo = function() {
    this.avg1 = 0;
    this.avg5 = 0;
    this.avg15 = 0;
    this._classname = "tars.LoadInfo";
};
tars.LoadInfo.prototype = new TarsStream.JceStruct();
tars.LoadInfo._classname = "tars.LoadInfo";

tars.LoadInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.LoadInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.LoadInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.LoadInfo();
    tmp.avg1 = is.readFloat(0, true, 0);
    tmp.avg5 = is.readFloat(1, true, 0);
    tmp.avg15 = is.readFloat(2, true, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.LoadInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeFloat(0, this.avg1);
    os.writeFloat(1, this.avg5);
    os.writeFloat(2, this.avg15);
    os.resumePrecision && os.resumePrecision();
};
tars.LoadInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.LoadInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.LoadInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.avg1 = this.avg1;
    tmp.avg5 = this.avg5;
    tmp.avg15 = this.avg15;
    
    return tmp;
}
tars.LoadInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("avg1") || (this.avg1 = json.avg1);
    !json.hasOwnProperty("avg5") || (this.avg5 = json.avg5);
    !json.hasOwnProperty("avg15") || (this.avg15 = json.avg15);
}
tars.LoadInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.LoadInfo.new = function () {
    return new tars.LoadInfo();
}
tars.LoadInfo.create = function (is) {
    return tars.LoadInfo._readFrom(is);
}
tars.PatchInfo = function() {
    this.bPatching = false;
    this.iPercent = 0;
    this.iModifyTime = 0;
    this.sVersion = "";
    this.sResult = "";
    this.bSucc = false;
    this._classname = "tars.PatchInfo";
};
tars.PatchInfo.prototype = new TarsStream.JceStruct();
tars.PatchInfo._classname = "tars.PatchInfo";

tars.PatchInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.PatchInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.PatchInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.PatchInfo();
    tmp.bPatching = is.readBoolean(0, true, false);
    tmp.iPercent = is.readInt32(1, true, 0);
    tmp.iModifyTime = is.readInt32(2, true, 0);
    tmp.sVersion = is.readString(3, true, "");
    tmp.sResult = is.readString(4, true, "");
    tmp.bSucc = is.readBoolean(5, false, false);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.PatchInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeBoolean(0, this.bPatching);
    os.writeInt32(1, this.iPercent);
    os.writeInt32(2, this.iModifyTime);
    os.writeString(3, this.sVersion);
    os.writeString(4, this.sResult);
    if (this.bSucc != undefined && this.bSucc != false) {
        os.writeBoolean(5, this.bSucc);
    }
    os.resumePrecision && os.resumePrecision();
};
tars.PatchInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.PatchInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.PatchInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.bPatching = this.bPatching;
    tmp.iPercent = this.iPercent;
    tmp.iModifyTime = this.iModifyTime;
    tmp.sVersion = this.sVersion;
    tmp.sResult = this.sResult;
    tmp.bSucc = this.bSucc;
    
    return tmp;
}
tars.PatchInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("bPatching") || (this.bPatching = json.bPatching);
    !json.hasOwnProperty("iPercent") || (this.iPercent = json.iPercent);
    !json.hasOwnProperty("iModifyTime") || (this.iModifyTime = json.iModifyTime);
    !json.hasOwnProperty("sVersion") || (this.sVersion = json.sVersion);
    !json.hasOwnProperty("sResult") || (this.sResult = json.sResult);
    !json.hasOwnProperty("bSucc") || (this.bSucc = json.bSucc);
}
tars.PatchInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.PatchInfo.new = function () {
    return new tars.PatchInfo();
}
tars.PatchInfo.create = function (is) {
    return tars.PatchInfo._readFrom(is);
}
tars.NodeInfo = function() {
    this.nodeName = "";
    this.nodeObj = "";
    this.endpointIp = "";
    this.endpointPort = 0;
    this.timeOut = 0;
    this.dataDir = "";
    this.version = "";
    this.coreFileSize = "";
    this.openFiles = 0;
    this._classname = "tars.NodeInfo";
};
tars.NodeInfo.prototype = new TarsStream.JceStruct();
tars.NodeInfo._classname = "tars.NodeInfo";

tars.NodeInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.NodeInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.NodeInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.NodeInfo();
    tmp.nodeName = is.readString(0, true, "");
    tmp.nodeObj = is.readString(1, true, "");
    tmp.endpointIp = is.readString(2, true, "");
    tmp.endpointPort = is.readInt32(3, true, 0);
    tmp.timeOut = is.readInt16(4, true, 0);
    tmp.dataDir = is.readString(5, true, "");
    tmp.version = is.readString(6, false, "");
    tmp.coreFileSize = is.readString(7, false, "");
    tmp.openFiles = is.readInt32(8, false, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.NodeInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.nodeName);
    os.writeString(1, this.nodeObj);
    os.writeString(2, this.endpointIp);
    os.writeInt32(3, this.endpointPort);
    os.writeInt16(4, this.timeOut);
    os.writeString(5, this.dataDir);
    if (this.version != undefined && this.version != "") {
        os.writeString(6, this.version);
    }
    if (this.coreFileSize != undefined && this.coreFileSize != "") {
        os.writeString(7, this.coreFileSize);
    }
    if (this.openFiles != undefined && this.openFiles != 0) {
        os.writeInt32(8, this.openFiles);
    }
    os.resumePrecision && os.resumePrecision();
};
tars.NodeInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.NodeInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.NodeInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.nodeName = this.nodeName;
    tmp.nodeObj = this.nodeObj;
    tmp.endpointIp = this.endpointIp;
    tmp.endpointPort = this.endpointPort;
    tmp.timeOut = this.timeOut;
    tmp.dataDir = this.dataDir;
    tmp.version = this.version;
    tmp.coreFileSize = this.coreFileSize;
    tmp.openFiles = this.openFiles;
    
    return tmp;
}
tars.NodeInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("nodeName") || (this.nodeName = json.nodeName);
    !json.hasOwnProperty("nodeObj") || (this.nodeObj = json.nodeObj);
    !json.hasOwnProperty("endpointIp") || (this.endpointIp = json.endpointIp);
    !json.hasOwnProperty("endpointPort") || (this.endpointPort = json.endpointPort);
    !json.hasOwnProperty("timeOut") || (this.timeOut = json.timeOut);
    !json.hasOwnProperty("dataDir") || (this.dataDir = json.dataDir);
    !json.hasOwnProperty("version") || (this.version = json.version);
    !json.hasOwnProperty("coreFileSize") || (this.coreFileSize = json.coreFileSize);
    !json.hasOwnProperty("openFiles") || (this.openFiles = json.openFiles);
}
tars.NodeInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.NodeInfo.new = function () {
    return new tars.NodeInfo();
}
tars.NodeInfo.create = function (is) {
    return tars.NodeInfo._readFrom(is);
}
tars.ServerStateInfo = function() {
    this.serverState = tars.ServerState.Inactive;
    this.processId = 0;
    this.nodeName = "";
    this.application = "";
    this.serverName = "";
    this.settingState = tars.ServerState.Inactive;
    this._classname = "tars.ServerStateInfo";
};
tars.ServerStateInfo.prototype = new TarsStream.JceStruct();
tars.ServerStateInfo._classname = "tars.ServerStateInfo";

tars.ServerStateInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.ServerStateInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.ServerStateInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.ServerStateInfo();
    tmp.serverState = is.readInt32(0, true, tars.ServerState.Inactive);
    tmp.processId = is.readInt32(1, true, 0);
    tmp.nodeName = is.readString(2, false, "");
    tmp.application = is.readString(3, false, "");
    tmp.serverName = is.readString(4, false, "");
    tmp.settingState = is.readInt32(5, false, tars.ServerState.Inactive);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.ServerStateInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.serverState);
    os.writeInt32(1, this.processId);
    if (this.nodeName != undefined && this.nodeName != "") {
        os.writeString(2, this.nodeName);
    }
    if (this.application != undefined && this.application != "") {
        os.writeString(3, this.application);
    }
    if (this.serverName != undefined && this.serverName != "") {
        os.writeString(4, this.serverName);
    }
    if (this.settingState != undefined) {
        os.writeInt32(5, this.settingState);
    }
    os.resumePrecision && os.resumePrecision();
};
tars.ServerStateInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.ServerStateInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.ServerStateInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.serverState = this.serverState;
    tmp.processId = this.processId;
    tmp.nodeName = this.nodeName;
    tmp.application = this.application;
    tmp.serverName = this.serverName;
    tmp.settingState = this.settingState;
    
    return tmp;
}
tars.ServerStateInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("serverState") || (this.serverState = json.serverState);
    !json.hasOwnProperty("processId") || (this.processId = json.processId);
    !json.hasOwnProperty("nodeName") || (this.nodeName = json.nodeName);
    !json.hasOwnProperty("application") || (this.application = json.application);
    !json.hasOwnProperty("serverName") || (this.serverName = json.serverName);
    !json.hasOwnProperty("settingState") || (this.settingState = json.settingState);
}
tars.ServerStateInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.ServerStateInfo.new = function () {
    return new tars.ServerStateInfo();
}
tars.ServerStateInfo.create = function (is) {
    return tars.ServerStateInfo._readFrom(is);
}
tars.PatchRequest = function() {
    this.appname = "";
    this.servername = "";
    this.nodename = "";
    this.groupname = "";
    this.binname = "";
    this.version = "";
    this.user = "";
    this.servertype = "";
    this.patchobj = "";
    this.md5 = "";
    this.ostype = "";
    this._classname = "tars.PatchRequest";
};
tars.PatchRequest.prototype = new TarsStream.JceStruct();
tars.PatchRequest._classname = "tars.PatchRequest";

tars.PatchRequest._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.PatchRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.PatchRequest._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.PatchRequest();
    tmp.appname = is.readString(0, true, "");
    tmp.servername = is.readString(1, true, "");
    tmp.nodename = is.readString(2, true, "");
    tmp.groupname = is.readString(3, true, "");
    tmp.binname = is.readString(4, true, "");
    tmp.version = is.readString(5, true, "");
    tmp.user = is.readString(6, true, "");
    tmp.servertype = is.readString(7, true, "");
    tmp.patchobj = is.readString(8, true, "");
    tmp.md5 = is.readString(9, true, "");
    tmp.ostype = is.readString(10, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.PatchRequest.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.appname);
    os.writeString(1, this.servername);
    os.writeString(2, this.nodename);
    os.writeString(3, this.groupname);
    os.writeString(4, this.binname);
    os.writeString(5, this.version);
    os.writeString(6, this.user);
    os.writeString(7, this.servertype);
    os.writeString(8, this.patchobj);
    os.writeString(9, this.md5);
    if (this.ostype != undefined && this.ostype != "") {
        os.writeString(10, this.ostype);
    }
    os.resumePrecision && os.resumePrecision();
};
tars.PatchRequest.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.PatchRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.PatchRequest.prototype.toObject = function() { 
    var tmp = {};

    tmp.appname = this.appname;
    tmp.servername = this.servername;
    tmp.nodename = this.nodename;
    tmp.groupname = this.groupname;
    tmp.binname = this.binname;
    tmp.version = this.version;
    tmp.user = this.user;
    tmp.servertype = this.servertype;
    tmp.patchobj = this.patchobj;
    tmp.md5 = this.md5;
    tmp.ostype = this.ostype;
    
    return tmp;
}
tars.PatchRequest.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("appname") || (this.appname = json.appname);
    !json.hasOwnProperty("servername") || (this.servername = json.servername);
    !json.hasOwnProperty("nodename") || (this.nodename = json.nodename);
    !json.hasOwnProperty("groupname") || (this.groupname = json.groupname);
    !json.hasOwnProperty("binname") || (this.binname = json.binname);
    !json.hasOwnProperty("version") || (this.version = json.version);
    !json.hasOwnProperty("user") || (this.user = json.user);
    !json.hasOwnProperty("servertype") || (this.servertype = json.servertype);
    !json.hasOwnProperty("patchobj") || (this.patchobj = json.patchobj);
    !json.hasOwnProperty("md5") || (this.md5 = json.md5);
    !json.hasOwnProperty("ostype") || (this.ostype = json.ostype);
}
tars.PatchRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.PatchRequest.new = function () {
    return new tars.PatchRequest();
}
tars.PatchRequest.create = function (is) {
    return tars.PatchRequest._readFrom(is);
}


