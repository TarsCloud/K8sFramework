// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 5.3.1 by TARS Team.
// Generated from `./NodeDescriptor.jce'
// **********************************************************************

var TarsStream = require('@tars/tars-stream');
var TarsError  = require('@tars/tars-rpc').error;

if(TarsStream.JceStruct == undefined){
TarsStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TarsStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TarsStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TarsStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TarsStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}
var _TARS_MODULE_A_ = require('./NodeDescriptorJce.js');

var tars = tars || {};
module.exports.tars = tars;

tars.AdminRegProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

tars.AdminRegProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

tars.AdminRegProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


tars.tarsErrCode = {
    EM_TARS_NODE_NOT_REGISTRY_ERR : 1001,
    EM_TARS_CALL_NODE_TIMEOUT_ERR : 1002,
    EM_TARS_LOAD_SERVICE_DESC_ERR : 1003,
    EM_TARS_SERVICE_STATE_ERR : 1004,
    EM_TARS_REQ_ALREADY_ERR : 1005,
    EM_TARS_INVALID_IP_ERR : 1006,
    EM_TARS_PARAMETER_ERR : 1007,
    EM_TARS_OTHER_ERR : 1008,
    EM_TARS_GET_PATCH_FILE_ERR : 1009,
    EM_TARS_PREPARE_ERR : 1010,
    EM_TARS_UNKNOWN_ERR : -1,
    EM_TARS_SUCCESS : 0
};

tars.tarsErrCode.etos = function(enm) {
    switch(enm){
        case -1 : return 'EM_TARS_UNKNOWN_ERR';
        case 0 : return 'EM_TARS_SUCCESS';
        case 1001 : return 'EM_TARS_NODE_NOT_REGISTRY_ERR';
        case 1002 : return 'EM_TARS_CALL_NODE_TIMEOUT_ERR';
        case 1003 : return 'EM_TARS_LOAD_SERVICE_DESC_ERR';
        case 1004 : return 'EM_TARS_SERVICE_STATE_ERR';
        case 1005 : return 'EM_TARS_REQ_ALREADY_ERR';
        case 1006 : return 'EM_TARS_INVALID_IP_ERR';
        case 1007 : return 'EM_TARS_PARAMETER_ERR';
        case 1008 : return 'EM_TARS_OTHER_ERR';
        case 1009 : return 'EM_TARS_GET_PATCH_FILE_ERR';
        case 1010 : return 'EM_TARS_PREPARE_ERR';
    }
    return undefined;
};

tars.tarsErrCode.stoe = function(enm) {
    switch(enm){
        case 'EM_TARS_UNKNOWN_ERR' : return -1;
        case 'EM_TARS_SUCCESS' : return 0;
        case 'EM_TARS_NODE_NOT_REGISTRY_ERR' : return 1001;
        case 'EM_TARS_CALL_NODE_TIMEOUT_ERR' : return 1002;
        case 'EM_TARS_LOAD_SERVICE_DESC_ERR' : return 1003;
        case 'EM_TARS_SERVICE_STATE_ERR' : return 1004;
        case 'EM_TARS_REQ_ALREADY_ERR' : return 1005;
        case 'EM_TARS_INVALID_IP_ERR' : return 1006;
        case 'EM_TARS_PARAMETER_ERR' : return 1007;
        case 'EM_TARS_OTHER_ERR' : return 1008;
        case 'EM_TARS_GET_PATCH_FILE_ERR' : return 1009;
        case 'EM_TARS_PREPARE_ERR' : return 1010;
    }
    return undefined;
};

tars.tarsErrCode._write = function(os, tag, val) { return os.writeInt32(tag, val); }
tars.tarsErrCode._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
tars.EMTaskCommand = {
    EM_CMD_START : 0,
    EM_CMD_STOP : 1,
    EM_CMD_PATCH : 2,
    EM_CMD_UNINSTALL : 3
};

tars.EMTaskCommand.etos = function(enm) {
    switch(enm){
        case 0 : return 'EM_CMD_START';
        case 1 : return 'EM_CMD_STOP';
        case 2 : return 'EM_CMD_PATCH';
        case 3 : return 'EM_CMD_UNINSTALL';
    }
    return undefined;
};

tars.EMTaskCommand.stoe = function(enm) {
    switch(enm){
        case 'EM_CMD_START' : return 0;
        case 'EM_CMD_STOP' : return 1;
        case 'EM_CMD_PATCH' : return 2;
        case 'EM_CMD_UNINSTALL' : return 3;
    }
    return undefined;
};

tars.EMTaskCommand._write = function(os, tag, val) { return os.writeInt32(tag, val); }
tars.EMTaskCommand._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
tars.EMTaskStatus = {
    EM_T_NOT_START : 0,
    EM_T_RUNNING : 1,
    EM_T_SUCCESS : 2,
    EM_T_FAILED : 3,
    EM_T_CANCEL : 4,
    EM_T_PARIAL : 5
};

tars.EMTaskStatus.etos = function(enm) {
    switch(enm){
        case 0 : return 'EM_T_NOT_START';
        case 1 : return 'EM_T_RUNNING';
        case 2 : return 'EM_T_SUCCESS';
        case 3 : return 'EM_T_FAILED';
        case 4 : return 'EM_T_CANCEL';
        case 5 : return 'EM_T_PARIAL';
    }
    return undefined;
};

tars.EMTaskStatus.stoe = function(enm) {
    switch(enm){
        case 'EM_T_NOT_START' : return 0;
        case 'EM_T_RUNNING' : return 1;
        case 'EM_T_SUCCESS' : return 2;
        case 'EM_T_FAILED' : return 3;
        case 'EM_T_CANCEL' : return 4;
        case 'EM_T_PARIAL' : return 5;
    }
    return undefined;
};

tars.EMTaskStatus._write = function(os, tag, val) { return os.writeInt32(tag, val); }
tars.EMTaskStatus._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
tars.EMTaskItemStatus = {
    EM_I_NOT_START : 0,
    EM_I_RUNNING : 1,
    EM_I_SUCCESS : 2,
    EM_I_FAILED : 3,
    EM_I_CANCEL : 4
};

tars.EMTaskItemStatus.etos = function(enm) {
    switch(enm){
        case 0 : return 'EM_I_NOT_START';
        case 1 : return 'EM_I_RUNNING';
        case 2 : return 'EM_I_SUCCESS';
        case 3 : return 'EM_I_FAILED';
        case 4 : return 'EM_I_CANCEL';
    }
    return undefined;
};

tars.EMTaskItemStatus.stoe = function(enm) {
    switch(enm){
        case 'EM_I_NOT_START' : return 0;
        case 'EM_I_RUNNING' : return 1;
        case 'EM_I_SUCCESS' : return 2;
        case 'EM_I_FAILED' : return 3;
        case 'EM_I_CANCEL' : return 4;
    }
    return undefined;
};

tars.EMTaskItemStatus._write = function(os, tag, val) { return os.writeInt32(tag, val); }
tars.EMTaskItemStatus._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

tars.ServerStateDesc = function() {
    this.settingStateInReg = "";
    this.presentStateInReg = "";
    this.presentStateInNode = "";
    this.processId = 0;
    this.patchVersion = "";
    this.patchTime = "";
    this.patchUser = "";
    this._classname = "tars.ServerStateDesc";
};
tars.ServerStateDesc.prototype = new TarsStream.JceStruct();
tars.ServerStateDesc._classname = "tars.ServerStateDesc";

tars.ServerStateDesc._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.ServerStateDesc._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.ServerStateDesc._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.ServerStateDesc();
    tmp.settingStateInReg = is.readString(0, true, "");
    tmp.presentStateInReg = is.readString(1, true, "");
    tmp.presentStateInNode = is.readString(2, true, "");
    tmp.processId = is.readInt32(3, true, 0);
    tmp.patchVersion = is.readString(4, true, "");
    tmp.patchTime = is.readString(5, true, "");
    tmp.patchUser = is.readString(6, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.ServerStateDesc.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.settingStateInReg);
    os.writeString(1, this.presentStateInReg);
    os.writeString(2, this.presentStateInNode);
    os.writeInt32(3, this.processId);
    os.writeString(4, this.patchVersion);
    os.writeString(5, this.patchTime);
    os.writeString(6, this.patchUser);
    os.resumePrecision && os.resumePrecision();
};
tars.ServerStateDesc.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.ServerStateDesc.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.ServerStateDesc.prototype.toObject = function() { 
    var tmp = {};

    tmp.settingStateInReg = this.settingStateInReg;
    tmp.presentStateInReg = this.presentStateInReg;
    tmp.presentStateInNode = this.presentStateInNode;
    tmp.processId = this.processId;
    tmp.patchVersion = this.patchVersion;
    tmp.patchTime = this.patchTime;
    tmp.patchUser = this.patchUser;
    
    return tmp;
}
tars.ServerStateDesc.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("settingStateInReg") || (this.settingStateInReg = json.settingStateInReg);
    !json.hasOwnProperty("presentStateInReg") || (this.presentStateInReg = json.presentStateInReg);
    !json.hasOwnProperty("presentStateInNode") || (this.presentStateInNode = json.presentStateInNode);
    !json.hasOwnProperty("processId") || (this.processId = json.processId);
    !json.hasOwnProperty("patchVersion") || (this.patchVersion = json.patchVersion);
    !json.hasOwnProperty("patchTime") || (this.patchTime = json.patchTime);
    !json.hasOwnProperty("patchUser") || (this.patchUser = json.patchUser);
}
tars.ServerStateDesc.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.ServerStateDesc.new = function () {
    return new tars.ServerStateDesc();
}
tars.ServerStateDesc.create = function (is) {
    return tars.ServerStateDesc._readFrom(is);
}
tars.TaskItemReq = function() {
    this.taskNo = "";
    this.itemNo = "";
    this.application = "";
    this.serverName = "";
    this.nodeName = "";
    this.setName = "";
    this.command = "";
    this.userName = "";
    this.parameters = new TarsStream.Map(TarsStream.String, TarsStream.String);
    this._classname = "tars.TaskItemReq";
};
tars.TaskItemReq.prototype = new TarsStream.JceStruct();
tars.TaskItemReq._classname = "tars.TaskItemReq";

tars.TaskItemReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.TaskItemReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.TaskItemReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.TaskItemReq();
    tmp.taskNo = is.readString(0, false, "");
    tmp.itemNo = is.readString(1, false, "");
    tmp.application = is.readString(2, false, "");
    tmp.serverName = is.readString(3, false, "");
    tmp.nodeName = is.readString(4, false, "");
    tmp.setName = is.readString(5, false, "");
    tmp.command = is.readString(6, false, "");
    tmp.userName = is.readString(7, false, "");
    tmp.parameters = is.readMap(8, false, TarsStream.Map(TarsStream.String, TarsStream.String));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.TaskItemReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.taskNo != undefined && this.taskNo != "") {
        os.writeString(0, this.taskNo);
    }
    if (this.itemNo != undefined && this.itemNo != "") {
        os.writeString(1, this.itemNo);
    }
    if (this.application != undefined && this.application != "") {
        os.writeString(2, this.application);
    }
    if (this.serverName != undefined && this.serverName != "") {
        os.writeString(3, this.serverName);
    }
    if (this.nodeName != undefined && this.nodeName != "") {
        os.writeString(4, this.nodeName);
    }
    if (this.setName != undefined && this.setName != "") {
        os.writeString(5, this.setName);
    }
    if (this.command != undefined && this.command != "") {
        os.writeString(6, this.command);
    }
    if (this.userName != undefined && this.userName != "") {
        os.writeString(7, this.userName);
    }
    if (this.parameters != undefined) {
        os.writeMap(8, this.parameters);
    }
    os.resumePrecision && os.resumePrecision();
};
tars.TaskItemReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.TaskItemReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.TaskItemReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.taskNo = this.taskNo;
    tmp.itemNo = this.itemNo;
    tmp.application = this.application;
    tmp.serverName = this.serverName;
    tmp.nodeName = this.nodeName;
    tmp.setName = this.setName;
    tmp.command = this.command;
    tmp.userName = this.userName;
    tmp.parameters = this.parameters.toObject();
    
    return tmp;
}
tars.TaskItemReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("taskNo") || (this.taskNo = json.taskNo);
    !json.hasOwnProperty("itemNo") || (this.itemNo = json.itemNo);
    !json.hasOwnProperty("application") || (this.application = json.application);
    !json.hasOwnProperty("serverName") || (this.serverName = json.serverName);
    !json.hasOwnProperty("nodeName") || (this.nodeName = json.nodeName);
    !json.hasOwnProperty("setName") || (this.setName = json.setName);
    !json.hasOwnProperty("command") || (this.command = json.command);
    !json.hasOwnProperty("userName") || (this.userName = json.userName);
    !json.hasOwnProperty("parameters") || (this.parameters.readFromObject(json.parameters));
}
tars.TaskItemReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.TaskItemReq.new = function () {
    return new tars.TaskItemReq();
}
tars.TaskItemReq.create = function (is) {
    return tars.TaskItemReq._readFrom(is);
}
tars.TaskItemRsp = function() {
    this.req = new tars.TaskItemReq();
    this.startTime = "";
    this.endTime = "";
    this.status = tars.EMTaskItemStatus.EM_I_NOT_START;
    this.statusInfo = "";
    this.executeLog = "";
    this._classname = "tars.TaskItemRsp";
};
tars.TaskItemRsp.prototype = new TarsStream.JceStruct();
tars.TaskItemRsp._classname = "tars.TaskItemRsp";

tars.TaskItemRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.TaskItemRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.TaskItemRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.TaskItemRsp();
    tmp.req = is.readStruct(0, false, tars.TaskItemReq);
    tmp.startTime = is.readString(1, false, "");
    tmp.endTime = is.readString(2, false, "");
    tmp.status = is.readInt32(3, false, tars.EMTaskItemStatus.EM_I_NOT_START);
    tmp.statusInfo = is.readString(4, false, "");
    tmp.executeLog = is.readString(5, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.TaskItemRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeStruct(0, this.req);
    if (this.startTime != undefined && this.startTime != "") {
        os.writeString(1, this.startTime);
    }
    if (this.endTime != undefined && this.endTime != "") {
        os.writeString(2, this.endTime);
    }
    if (this.status != undefined) {
        os.writeInt32(3, this.status);
    }
    if (this.statusInfo != undefined && this.statusInfo != "") {
        os.writeString(4, this.statusInfo);
    }
    if (this.executeLog != undefined && this.executeLog != "") {
        os.writeString(5, this.executeLog);
    }
    os.resumePrecision && os.resumePrecision();
};
tars.TaskItemRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.TaskItemRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.TaskItemRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.req = this.req.toObject();
    tmp.startTime = this.startTime;
    tmp.endTime = this.endTime;
    tmp.status = this.status;
    tmp.statusInfo = this.statusInfo;
    tmp.executeLog = this.executeLog;
    
    return tmp;
}
tars.TaskItemRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("req") || (this.req.readFromObject(json.req));
    !json.hasOwnProperty("startTime") || (this.startTime = json.startTime);
    !json.hasOwnProperty("endTime") || (this.endTime = json.endTime);
    !json.hasOwnProperty("status") || (this.status = json.status);
    !json.hasOwnProperty("statusInfo") || (this.statusInfo = json.statusInfo);
    !json.hasOwnProperty("executeLog") || (this.executeLog = json.executeLog);
}
tars.TaskItemRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.TaskItemRsp.new = function () {
    return new tars.TaskItemRsp();
}
tars.TaskItemRsp.create = function (is) {
    return tars.TaskItemRsp._readFrom(is);
}
tars.TaskReq = function() {
    this.taskItemReq = new TarsStream.List(tars.TaskItemReq);
    this.taskNo = "";
    this.serial = true;
    this.userName = "";
    this._classname = "tars.TaskReq";
};
tars.TaskReq.prototype = new TarsStream.JceStruct();
tars.TaskReq._classname = "tars.TaskReq";

tars.TaskReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.TaskReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.TaskReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.TaskReq();
    tmp.taskItemReq = is.readList(0, false, TarsStream.List(tars.TaskItemReq));
    tmp.taskNo = is.readString(1, false, "");
    tmp.serial = is.readBoolean(2, false, true);
    tmp.userName = is.readString(3, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.TaskReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.taskItemReq != undefined) {
        os.writeList(0, this.taskItemReq);
    }
    if (this.taskNo != undefined && this.taskNo != "") {
        os.writeString(1, this.taskNo);
    }
    if (this.serial != undefined && this.serial != true) {
        os.writeBoolean(2, this.serial);
    }
    if (this.userName != undefined && this.userName != "") {
        os.writeString(3, this.userName);
    }
    os.resumePrecision && os.resumePrecision();
};
tars.TaskReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.TaskReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.TaskReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.taskItemReq = this.taskItemReq.toObject();
    tmp.taskNo = this.taskNo;
    tmp.serial = this.serial;
    tmp.userName = this.userName;
    
    return tmp;
}
tars.TaskReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("taskItemReq") || (this.taskItemReq.readFromObject(json.taskItemReq));
    !json.hasOwnProperty("taskNo") || (this.taskNo = json.taskNo);
    !json.hasOwnProperty("serial") || (this.serial = json.serial);
    !json.hasOwnProperty("userName") || (this.userName = json.userName);
}
tars.TaskReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.TaskReq.new = function () {
    return new tars.TaskReq();
}
tars.TaskReq.create = function (is) {
    return tars.TaskReq._readFrom(is);
}
tars.TaskRsp = function() {
    this.taskItemRsp = new TarsStream.List(tars.TaskItemRsp);
    this.taskNo = "";
    this.serial = true;
    this.userName = "";
    this.status = tars.EMTaskStatus.EM_T_NOT_START;
    this._classname = "tars.TaskRsp";
};
tars.TaskRsp.prototype = new TarsStream.JceStruct();
tars.TaskRsp._classname = "tars.TaskRsp";

tars.TaskRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
tars.TaskRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
tars.TaskRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new tars.TaskRsp();
    tmp.taskItemRsp = is.readList(0, false, TarsStream.List(tars.TaskItemRsp));
    tmp.taskNo = is.readString(1, false, "");
    tmp.serial = is.readBoolean(2, false, true);
    tmp.userName = is.readString(3, false, "");
    tmp.status = is.readInt32(4, false, tars.EMTaskStatus.EM_T_NOT_START);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
tars.TaskRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.taskItemRsp != undefined) {
        os.writeList(0, this.taskItemRsp);
    }
    if (this.taskNo != undefined && this.taskNo != "") {
        os.writeString(1, this.taskNo);
    }
    if (this.serial != undefined && this.serial != true) {
        os.writeBoolean(2, this.serial);
    }
    if (this.userName != undefined && this.userName != "") {
        os.writeString(3, this.userName);
    }
    if (this.status != undefined) {
        os.writeInt32(4, this.status);
    }
    os.resumePrecision && os.resumePrecision();
};
tars.TaskRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
tars.TaskRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
tars.TaskRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.taskItemRsp = this.taskItemRsp.toObject();
    tmp.taskNo = this.taskNo;
    tmp.serial = this.serial;
    tmp.userName = this.userName;
    tmp.status = this.status;
    
    return tmp;
}
tars.TaskRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("taskItemRsp") || (this.taskItemRsp.readFromObject(json.taskItemRsp));
    !json.hasOwnProperty("taskNo") || (this.taskNo = json.taskNo);
    !json.hasOwnProperty("serial") || (this.serial = json.serial);
    !json.hasOwnProperty("userName") || (this.userName = json.userName);
    !json.hasOwnProperty("status") || (this.status = json.status);
}
tars.TaskRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
tars.TaskRsp.new = function () {
    return new tars.TaskRsp();
}
tars.TaskRsp.create = function (is) {
    return tars.TaskRsp._readFrom(is);
}

tars.AdminRegProxy.prototype.addTaskReq = function (taskReq) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeStruct(1, taskReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('addTaskReq', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.batchPatch = function (req) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.result = is.readString(2, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('batchPatch', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getAllApplicationNames = function () {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readList(0, true, TarsStream.List(TarsStream.String));
            response.arguments.result = is.readString(1, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getAllApplicationNames', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getAllNodeNames = function () {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readList(0, true, TarsStream.List(TarsStream.String));
            response.arguments.result = is.readString(1, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getAllNodeNames', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getAllServerIds = function () {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readList(0, true, TarsStream.List(TarsStream.List(TarsStream.String)));
            response.arguments.result = is.readString(1, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getAllServerIds', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getClientIp = function () {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.sClientIp = is.readString(1, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getClientIp', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getGroupId = function (ip) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, ip);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.groupId = is.readInt32(2, true, TarsStream.Int32);
            response.arguments.result = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getGroupId', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getLogData = function (application, serverName, nodeName, logFile, cmd) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        os.writeString(4, logFile);
        os.writeString(5, cmd);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.fileData = is.readString(6, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getLogData', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getLogFileList = function (application, serverName, nodeName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.logFileList = is.readList(4, true, TarsStream.List(TarsStream.String));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getLogFileList', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getNodeVesion = function (name) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, name);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.version = is.readString(2, true, TarsStream.String);
            response.arguments.result = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getNodeVesion', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getPatchPercent = function (application, serverName, nodeName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.tPatchInfo = is.readStruct(4, true, _TARS_MODULE_A_.tars.PatchInfo);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getPatchPercent', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getProfileTemplate = function (profileName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, profileName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.profileTemplate = is.readString(2, true, TarsStream.String);
            response.arguments.resultDesc = is.readString(3, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getProfileTemplate', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getServerProfileTemplate = function (application, serverName, nodeName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.profileTemplate = is.readString(4, true, TarsStream.String);
            response.arguments.resultDesc = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getServerProfileTemplate', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getServerState = function (application, serverName, nodeName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.state = is.readStruct(4, true, tars.ServerStateDesc);
            response.arguments.result = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getServerState', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getTaskHistory = function (application, serverName, command) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, command);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.taskRsps = is.readList(4, true, TarsStream.List(tars.TaskRsp));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getTaskHistory', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.getTaskRsp = function (taskNo) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, taskNo);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.taskRsp = is.readStruct(2, true, tars.TaskRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getTaskRsp', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.loadServer = function (application, serverName, nodeName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.result = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('loadServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.notifyServer = function (application, serverName, nodeName, command) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        os.writeString(4, command);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.result = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('notifyServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.pingNode = function (name) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, name);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readBoolean(0, true, TarsStream.Boolean);
            response.arguments.result = is.readString(2, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('pingNode', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.restartServer = function (application, serverName, nodeName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.result = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('restartServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.setTaskItemInfo = function (itemNo, info) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, itemNo);
        os.writeMap(2, info);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('setTaskItemInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.shutdownNode = function (name) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, name);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.result = is.readString(2, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('shutdownNode', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.startServer = function (application, serverName, nodeName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.result = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('startServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.stopServer = function (application, serverName, nodeName) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.result = is.readString(4, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('stopServer', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.undeploy = function (application, serverName, nodeName, user) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        os.writeString(4, user);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.log = is.readString(5, true, TarsStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('undeploy', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

tars.AdminRegProxy.prototype.updatePatchLog = function (application, serverName, nodeName, patchId, user, patchType, succ) {
    var _encode = function () { 
        var os = new TarsStream.JceOutputStream();
        os.writeString(1, application);
        os.writeString(2, serverName);
        os.writeString(3, nodeName);
        os.writeString(4, patchId);
        os.writeString(5, user);
        os.writeString(6, patchType);
        os.writeBoolean(7, succ);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('updatePatchLog', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



