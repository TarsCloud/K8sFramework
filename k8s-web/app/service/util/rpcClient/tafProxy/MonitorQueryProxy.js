// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 5.3.1 by TAF Team.
// Generated from `./MonitorQuery.jce'
// **********************************************************************

var TafStream = require('@taf/taf-stream');
var TafError  = require('@taf/taf-rpc').error;

if(TafStream.JceStruct == undefined){
TafStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TafStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TafStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TafStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TafStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var taf = taf || {};
module.exports.taf = taf;

taf.MonitorQueryProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

taf.MonitorQueryProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

taf.MonitorQueryProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


taf.OP = {
    EQ : 0,
    GT : 1,
    GTE : 2,
    LT : 3,
    LTE : 4,
    LIKE : 5
};

taf.OP.etos = function(enm) {
    switch(enm){
        case 0 : return 'EQ';
        case 1 : return 'GT';
        case 2 : return 'GTE';
        case 3 : return 'LT';
        case 4 : return 'LTE';
        case 5 : return 'LIKE';
    }
    return undefined;
};

taf.OP.stoe = function(enm) {
    switch(enm){
        case 'EQ' : return 0;
        case 'GT' : return 1;
        case 'GTE' : return 2;
        case 'LT' : return 3;
        case 'LTE' : return 4;
        case 'LIKE' : return 5;
    }
    return undefined;
};

taf.OP._write = function(os, tag, val) { return os.writeInt32(tag, val); }
taf.OP._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

taf.Condition = function() {
    this.field = "";
    this.op = taf.OP.EQ;
    this.val = "";
    this._classname = "taf.Condition";
};
taf.Condition.prototype = new TafStream.JceStruct();
taf.Condition._classname = "taf.Condition";

taf.Condition._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.Condition._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.Condition._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new taf.Condition();
    tmp.field = is.readString(0, true, "");
    tmp.op = is.readInt32(1, true, taf.OP.EQ);
    tmp.val = is.readString(2, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
taf.Condition.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.field);
    os.writeInt32(1, this.op);
    os.writeString(2, this.val);
    os.resumePrecision && os.resumePrecision();
};
taf.Condition.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
taf.Condition.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
taf.Condition.prototype.toObject = function() { 
    var tmp = {};

    tmp.field = this.field;
    tmp.op = this.op;
    tmp.val = this.val;
    
    return tmp;
}
taf.Condition.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("field") || (this.field = json.field);
    !json.hasOwnProperty("op") || (this.op = json.op);
    !json.hasOwnProperty("val") || (this.val = json.val);
}
taf.Condition.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
taf.Condition.new = function () {
    return new taf.Condition();
}
taf.Condition.create = function (is) {
    return taf.Condition._readFrom(is);
}
taf.MonitorQueryReq = function() {
    this.uid = "";
    this.method = "query";
    this.dataid = "";
    this.date = "";
    this.tflag1 = "";
    this.tflag2 = "";
    this.conditions = new TafStream.List(taf.Condition);
    this.indexs = new TafStream.List(TafStream.String);
    this.groupby = new TafStream.List(TafStream.String);
    this._classname = "taf.MonitorQueryReq";
};
taf.MonitorQueryReq.prototype = new TafStream.JceStruct();
taf.MonitorQueryReq._classname = "taf.MonitorQueryReq";

taf.MonitorQueryReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.MonitorQueryReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.MonitorQueryReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new taf.MonitorQueryReq();
    tmp.uid = is.readString(0, true, "");
    tmp.method = is.readString(1, true, "query");
    tmp.dataid = is.readString(2, true, "");
    tmp.date = is.readString(3, true, "");
    tmp.tflag1 = is.readString(4, true, "");
    tmp.tflag2 = is.readString(5, true, "");
    tmp.conditions = is.readList(6, true, TafStream.List(taf.Condition));
    tmp.indexs = is.readList(7, true, TafStream.List(TafStream.String));
    tmp.groupby = is.readList(8, true, TafStream.List(TafStream.String));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
taf.MonitorQueryReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.uid);
    os.writeString(1, this.method);
    os.writeString(2, this.dataid);
    os.writeString(3, this.date);
    os.writeString(4, this.tflag1);
    os.writeString(5, this.tflag2);
    os.writeList(6, this.conditions);
    os.writeList(7, this.indexs);
    os.writeList(8, this.groupby);
    os.resumePrecision && os.resumePrecision();
};
taf.MonitorQueryReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
taf.MonitorQueryReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
taf.MonitorQueryReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.uid = this.uid;
    tmp.method = this.method;
    tmp.dataid = this.dataid;
    tmp.date = this.date;
    tmp.tflag1 = this.tflag1;
    tmp.tflag2 = this.tflag2;
    tmp.conditions = this.conditions.toObject();
    tmp.indexs = this.indexs.toObject();
    tmp.groupby = this.groupby.toObject();
    
    return tmp;
}
taf.MonitorQueryReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("method") || (this.method = json.method);
    !json.hasOwnProperty("dataid") || (this.dataid = json.dataid);
    !json.hasOwnProperty("date") || (this.date = json.date);
    !json.hasOwnProperty("tflag1") || (this.tflag1 = json.tflag1);
    !json.hasOwnProperty("tflag2") || (this.tflag2 = json.tflag2);
    !json.hasOwnProperty("conditions") || (this.conditions.readFromObject(json.conditions));
    !json.hasOwnProperty("indexs") || (this.indexs.readFromObject(json.indexs));
    !json.hasOwnProperty("groupby") || (this.groupby.readFromObject(json.groupby));
}
taf.MonitorQueryReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
taf.MonitorQueryReq.new = function () {
    return new taf.MonitorQueryReq();
}
taf.MonitorQueryReq.create = function (is) {
    return taf.MonitorQueryReq._readFrom(is);
}
taf.MonitorQueryRsp = function() {
    this.ret = 0;
    this.msg = "";
    this.lastTime = "";
    this.activeDb = 0;
    this.totalDb = 0;
    this.retThreads = new TafStream.List(TafStream.Int32);
    this.result = new TafStream.Map(TafStream.String, TafStream.List(TafStream.Double));
    this._classname = "taf.MonitorQueryRsp";
};
taf.MonitorQueryRsp.prototype = new TafStream.JceStruct();
taf.MonitorQueryRsp._classname = "taf.MonitorQueryRsp";

taf.MonitorQueryRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.MonitorQueryRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.MonitorQueryRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new taf.MonitorQueryRsp();
    tmp.ret = is.readInt32(0, true, 0);
    tmp.msg = is.readString(1, false, "");
    tmp.lastTime = is.readString(2, true, "");
    tmp.activeDb = is.readInt32(3, true, 0);
    tmp.totalDb = is.readInt32(4, true, 0);
    tmp.retThreads = is.readList(5, true, TafStream.List(TafStream.Int32));
    tmp.result = is.readMap(6, false, TafStream.Map(TafStream.String, TafStream.List(TafStream.Double)));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
taf.MonitorQueryRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.ret);
    if (this.msg != undefined && this.msg != "") {
        os.writeString(1, this.msg);
    }
    os.writeString(2, this.lastTime);
    os.writeInt32(3, this.activeDb);
    os.writeInt32(4, this.totalDb);
    os.writeList(5, this.retThreads);
    if (this.result != undefined) {
        os.writeMap(6, this.result);
    }
    os.resumePrecision && os.resumePrecision();
};
taf.MonitorQueryRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
taf.MonitorQueryRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
taf.MonitorQueryRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.ret = this.ret;
    tmp.msg = this.msg;
    tmp.lastTime = this.lastTime;
    tmp.activeDb = this.activeDb;
    tmp.totalDb = this.totalDb;
    tmp.retThreads = this.retThreads.toObject();
    tmp.result = this.result.toObject();
    
    return tmp;
}
taf.MonitorQueryRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ret") || (this.ret = json.ret);
    !json.hasOwnProperty("msg") || (this.msg = json.msg);
    !json.hasOwnProperty("lastTime") || (this.lastTime = json.lastTime);
    !json.hasOwnProperty("activeDb") || (this.activeDb = json.activeDb);
    !json.hasOwnProperty("totalDb") || (this.totalDb = json.totalDb);
    !json.hasOwnProperty("retThreads") || (this.retThreads.readFromObject(json.retThreads));
    !json.hasOwnProperty("result") || (this.result.readFromObject(json.result));
}
taf.MonitorQueryRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
taf.MonitorQueryRsp.new = function () {
    return new taf.MonitorQueryRsp();
}
taf.MonitorQueryRsp.create = function (is) {
    return taf.MonitorQueryRsp._readFrom(is);
}

taf.MonitorQueryProxy.prototype.query = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, taf.MonitorQueryRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('query', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



