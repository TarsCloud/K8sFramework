#!/usr/bin/env node
/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

// 全局变量

// 默认第一个参数就是配置文件，全局优先加载
const arguments = process.argv.splice(2);
global.WebConf = require(arguments[0])

// websocket代理对象，要同时在www.js和app.js里使用，故暂时放在global对象中
// https://github.com/chimurai/http-proxy-middleware/blob/master/examples/websocket/index.js
global.wsProxyMidware = require('../app/midware/wsProxyMidware')

// 启动逻辑

const debug = require('debug')('demo:server');
const http = require('http');
const logger = require('../app/logger')
const cluster = require('cluster');
const os = require('os');
const loadConfig = require('../utils/config');

//获取端口
const webConf = global.WebConf.webConf;
const port = normalizePort(process.env.PORT || webConf.port || '3000');
const enableMultiProcess = false;

//创建服务
try {
	loadConfig('TarsWebServer.conf', 'c').then(() => {
		//优先环境变量生效
		if(process.env.TARS_WEB_STRICT) {
			webConf.strict = (process.env.TARS_WEB_STRICT == "true");
		}
		// webConf.strict = process.env.TARS_WEB_STRICT || webConf.strict;
		const app = require('../app');
		let numCpus = os.cpus().length;
		if (cluster.isMaster && enableMultiProcess) {
			for (let i = 0; i < numCpus; i++) {
				cluster.fork();
			}
			cluster.on('listening', function (worker, address) {
			});
			let processNum = numCpus;
			cluster.on('exit', function (worker, code, signal) {
				processNum--;
				console.error('worker ' + worker.process.pid + ' died');
				if (!processNum) {
					throw(new Error('Server startup failed'));
				}
			});
		} else if (cluster.isWorker || !enableMultiProcess) {
			let server = http.createServer(app.callback());
			server.listen(port, '0.0.0.0', function () {
				logger.info('Server has been started successfully');
			});
			server.on('error', onError);
			server.on('upgrade', global.wsProxyMidware.upgrade);
		}
	})
} catch (e) {
	logger.error(e.toString())
}


//标准化端口值
function normalizePort(val) {
	let port = parseInt(val, 10);
	if (isNaN(port)) {
		return val;
	}
	if (port >= 0) {
		return port;
	}
	return false;
}


// 服务错误回调
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	switch (error.code) {
		case 'EACCES':
			logger.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			logger.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

//服务监听事件
function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
