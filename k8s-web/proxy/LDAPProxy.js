// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.2.2 by TAF Team.
// Generated from `./LDAP.jce'
// **********************************************************************

var TafStream = require('@taf/taf-stream');
var TafError  = require('@taf/taf-rpc').error;

if(TafStream.JceStruct == undefined){
TafStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TafStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TafStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TafStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TafStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var Common = Common || {};
module.exports.Common = Common;

Common.LDAPServerProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

Common.LDAPServerProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

Common.LDAPServerProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


Common.ENUM_RETURN_CODE = {
    SUCCESS : 0,
    LDAPKEY_ERROR : -1000,
    LDAPKEY_OUTDATE : -1001,
    PASSWORD_ERROR : -2001,
    PASSWORD_EXPIRED : -2002,
    PASSWORD_WILLEXPIRED : -2003,
    PASSWORD_LOCKED : -2004,
    SERVER_ERROR : -3000,
    SERVER_BUSSI : -3001,
    UNKNOWN_ERROR : 9999
};

Common.ENUM_RETURN_CODE.etos = function(enm) {
    switch(enm){
        case -3001 : return 'SERVER_BUSSI';
        case -3000 : return 'SERVER_ERROR';
        case -2004 : return 'PASSWORD_LOCKED';
        case -2003 : return 'PASSWORD_WILLEXPIRED';
        case -2002 : return 'PASSWORD_EXPIRED';
        case -2001 : return 'PASSWORD_ERROR';
        case -1001 : return 'LDAPKEY_OUTDATE';
        case -1000 : return 'LDAPKEY_ERROR';
        case 0 : return 'SUCCESS';
        case 9999 : return 'UNKNOWN_ERROR';
    }
    return undefined;
};

Common.ENUM_RETURN_CODE.stoe = function(enm) {
    switch(enm){
        case 'SERVER_BUSSI' : return -3001;
        case 'SERVER_ERROR' : return -3000;
        case 'PASSWORD_LOCKED' : return -2004;
        case 'PASSWORD_WILLEXPIRED' : return -2003;
        case 'PASSWORD_EXPIRED' : return -2002;
        case 'PASSWORD_ERROR' : return -2001;
        case 'LDAPKEY_OUTDATE' : return -1001;
        case 'LDAPKEY_ERROR' : return -1000;
        case 'SUCCESS' : return 0;
        case 'UNKNOWN_ERROR' : return 9999;
    }
    return undefined;
};

Common.ENUM_RETURN_CODE._write = function(os, tag, val) { return os.writeInt32(tag, val); }
Common.ENUM_RETURN_CODE._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

Common.UserInfo = function() {
    this.uid = "";
    this.tel = "";
    this.email = "";
    this.name = "";
    this.psw = "";
    this.surname = "";
    this.avatar = "";
    this.position = "";
    this.department = "";
    this._classname = "Common.UserInfo";
};
Common.UserInfo.prototype = new TafStream.JceStruct();
Common.UserInfo._classname = "Common.UserInfo";

Common.UserInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.UserInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.UserInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.UserInfo();
    tmp.uid = is.readString(0, true, "");
    tmp.tel = is.readString(1, false, "");
    tmp.email = is.readString(2, false, "");
    tmp.name = is.readString(3, false, "");
    tmp.psw = is.readString(4, false, "");
    tmp.surname = is.readString(5, false, "");
    tmp.avatar = is.readString(6, false, "");
    tmp.position = is.readString(7, false, "");
    tmp.department = is.readString(8, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.UserInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.uid);
    if (this.tel != undefined && this.tel != "") {
        os.writeString(1, this.tel);
    }
    if (this.email != undefined && this.email != "") {
        os.writeString(2, this.email);
    }
    if (this.name != undefined && this.name != "") {
        os.writeString(3, this.name);
    }
    if (this.psw != undefined && this.psw != "") {
        os.writeString(4, this.psw);
    }
    if (this.surname != undefined && this.surname != "") {
        os.writeString(5, this.surname);
    }
    if (this.avatar != undefined && this.avatar != "") {
        os.writeString(6, this.avatar);
    }
    if (this.position != undefined && this.position != "") {
        os.writeString(7, this.position);
    }
    if (this.department != undefined && this.department != "") {
        os.writeString(8, this.department);
    }
    os.resumePrecision && os.resumePrecision();
};
Common.UserInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.UserInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.UserInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.uid = this.uid;
    tmp.tel = this.tel;
    tmp.email = this.email;
    tmp.name = this.name;
    tmp.psw = this.psw;
    tmp.surname = this.surname;
    tmp.avatar = this.avatar;
    tmp.position = this.position;
    tmp.department = this.department;
    
    return tmp;
}
Common.UserInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("tel") || (this.tel = json.tel);
    !json.hasOwnProperty("email") || (this.email = json.email);
    !json.hasOwnProperty("name") || (this.name = json.name);
    !json.hasOwnProperty("psw") || (this.psw = json.psw);
    !json.hasOwnProperty("surname") || (this.surname = json.surname);
    !json.hasOwnProperty("avatar") || (this.avatar = json.avatar);
    !json.hasOwnProperty("position") || (this.position = json.position);
    !json.hasOwnProperty("department") || (this.department = json.department);
}
Common.UserInfo.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.UserInfo.new = function () {
    return new Common.UserInfo();
}
Common.UserInfo.create = function (is) {
    return Common.UserInfo._readFrom(is);
}
Common.CheckLDAPKeyReq = function() {
    this.LDAPKey = "";
    this._classname = "Common.CheckLDAPKeyReq";
};
Common.CheckLDAPKeyReq.prototype = new TafStream.JceStruct();
Common.CheckLDAPKeyReq._classname = "Common.CheckLDAPKeyReq";

Common.CheckLDAPKeyReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.CheckLDAPKeyReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.CheckLDAPKeyReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.CheckLDAPKeyReq();
    tmp.LDAPKey = is.readString(0, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.CheckLDAPKeyReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.LDAPKey);
    os.resumePrecision && os.resumePrecision();
};
Common.CheckLDAPKeyReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.CheckLDAPKeyReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.CheckLDAPKeyReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.LDAPKey = this.LDAPKey;
    
    return tmp;
}
Common.CheckLDAPKeyReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("LDAPKey") || (this.LDAPKey = json.LDAPKey);
}
Common.CheckLDAPKeyReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.CheckLDAPKeyReq.new = function () {
    return new Common.CheckLDAPKeyReq();
}
Common.CheckLDAPKeyReq.create = function (is) {
    return Common.CheckLDAPKeyReq._readFrom(is);
}
Common.CheckLDAPKeyRsp = function() {
    this.ret = Common.ENUM_RETURN_CODE.SUCCESS;
    this.expireTime = 0;
    this.uid = "";
    this.name = "";
    this.tel = "";
    this.email = "";
    this.avatar = "";
    this.position = "";
    this.department = "";
    this._classname = "Common.CheckLDAPKeyRsp";
};
Common.CheckLDAPKeyRsp.prototype = new TafStream.JceStruct();
Common.CheckLDAPKeyRsp._classname = "Common.CheckLDAPKeyRsp";

Common.CheckLDAPKeyRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.CheckLDAPKeyRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.CheckLDAPKeyRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.CheckLDAPKeyRsp();
    tmp.ret = is.readInt32(0, true, Common.ENUM_RETURN_CODE.SUCCESS);
    tmp.expireTime = is.readInt32(1, false, 0);
    tmp.uid = is.readString(2, false, "");
    tmp.name = is.readString(3, false, "");
    tmp.tel = is.readString(4, false, "");
    tmp.email = is.readString(5, false, "");
    tmp.avatar = is.readString(6, false, "");
    tmp.position = is.readString(7, false, "");
    tmp.department = is.readString(8, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.CheckLDAPKeyRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.ret);
    if (this.expireTime != undefined && this.expireTime != 0) {
        os.writeInt32(1, this.expireTime);
    }
    if (this.uid != undefined && this.uid != "") {
        os.writeString(2, this.uid);
    }
    if (this.name != undefined && this.name != "") {
        os.writeString(3, this.name);
    }
    if (this.tel != undefined && this.tel != "") {
        os.writeString(4, this.tel);
    }
    if (this.email != undefined && this.email != "") {
        os.writeString(5, this.email);
    }
    if (this.avatar != undefined && this.avatar != "") {
        os.writeString(6, this.avatar);
    }
    if (this.position != undefined && this.position != "") {
        os.writeString(7, this.position);
    }
    if (this.department != undefined && this.department != "") {
        os.writeString(8, this.department);
    }
    os.resumePrecision && os.resumePrecision();
};
Common.CheckLDAPKeyRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.CheckLDAPKeyRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.CheckLDAPKeyRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.ret = this.ret;
    tmp.expireTime = this.expireTime;
    tmp.uid = this.uid;
    tmp.name = this.name;
    tmp.tel = this.tel;
    tmp.email = this.email;
    tmp.avatar = this.avatar;
    tmp.position = this.position;
    tmp.department = this.department;
    
    return tmp;
}
Common.CheckLDAPKeyRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ret") || (this.ret = json.ret);
    !json.hasOwnProperty("expireTime") || (this.expireTime = json.expireTime);
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("name") || (this.name = json.name);
    !json.hasOwnProperty("tel") || (this.tel = json.tel);
    !json.hasOwnProperty("email") || (this.email = json.email);
    !json.hasOwnProperty("avatar") || (this.avatar = json.avatar);
    !json.hasOwnProperty("position") || (this.position = json.position);
    !json.hasOwnProperty("department") || (this.department = json.department);
}
Common.CheckLDAPKeyRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.CheckLDAPKeyRsp.new = function () {
    return new Common.CheckLDAPKeyRsp();
}
Common.CheckLDAPKeyRsp.create = function (is) {
    return Common.CheckLDAPKeyRsp._readFrom(is);
}
Common.LoginReq = function() {
    this.uid = "";
    this.psw = "";
    this._classname = "Common.LoginReq";
};
Common.LoginReq.prototype = new TafStream.JceStruct();
Common.LoginReq._classname = "Common.LoginReq";

Common.LoginReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.LoginReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.LoginReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.LoginReq();
    tmp.uid = is.readString(0, true, "");
    tmp.psw = is.readString(1, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.LoginReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.uid);
    os.writeString(1, this.psw);
    os.resumePrecision && os.resumePrecision();
};
Common.LoginReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.LoginReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.LoginReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.uid = this.uid;
    tmp.psw = this.psw;
    
    return tmp;
}
Common.LoginReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("psw") || (this.psw = json.psw);
}
Common.LoginReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.LoginReq.new = function () {
    return new Common.LoginReq();
}
Common.LoginReq.create = function (is) {
    return Common.LoginReq._readFrom(is);
}
Common.UpdatePwdReq = function() {
    this.uid = "";
    this.opsw = "";
    this.npsw = "";
    this._classname = "Common.UpdatePwdReq";
};
Common.UpdatePwdReq.prototype = new TafStream.JceStruct();
Common.UpdatePwdReq._classname = "Common.UpdatePwdReq";

Common.UpdatePwdReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.UpdatePwdReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.UpdatePwdReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.UpdatePwdReq();
    tmp.uid = is.readString(0, true, "");
    tmp.opsw = is.readString(1, true, "");
    tmp.npsw = is.readString(2, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.UpdatePwdReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.uid);
    os.writeString(1, this.opsw);
    os.writeString(2, this.npsw);
    os.resumePrecision && os.resumePrecision();
};
Common.UpdatePwdReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.UpdatePwdReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.UpdatePwdReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.uid = this.uid;
    tmp.opsw = this.opsw;
    tmp.npsw = this.npsw;
    
    return tmp;
}
Common.UpdatePwdReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("opsw") || (this.opsw = json.opsw);
    !json.hasOwnProperty("npsw") || (this.npsw = json.npsw);
}
Common.UpdatePwdReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.UpdatePwdReq.new = function () {
    return new Common.UpdatePwdReq();
}
Common.UpdatePwdReq.create = function (is) {
    return Common.UpdatePwdReq._readFrom(is);
}
Common.UpdateInfoReq = function() {
    this.uinfo = new Common.UserInfo();
    this.tag = 0;
    this._classname = "Common.UpdateInfoReq";
};
Common.UpdateInfoReq.prototype = new TafStream.JceStruct();
Common.UpdateInfoReq._classname = "Common.UpdateInfoReq";

Common.UpdateInfoReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.UpdateInfoReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.UpdateInfoReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.UpdateInfoReq();
    tmp.uinfo = is.readStruct(0, true, Common.UserInfo);
    tmp.tag = is.readInt32(1, false, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.UpdateInfoReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeStruct(0, this.uinfo);
    if (this.tag != undefined && this.tag != 0) {
        os.writeInt32(1, this.tag);
    }
    os.resumePrecision && os.resumePrecision();
};
Common.UpdateInfoReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.UpdateInfoReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.UpdateInfoReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.uinfo = this.uinfo.toObject();
    tmp.tag = this.tag;
    
    return tmp;
}
Common.UpdateInfoReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uinfo") || (this.uinfo.readFromObject(json.uinfo));
    !json.hasOwnProperty("tag") || (this.tag = json.tag);
}
Common.UpdateInfoReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.UpdateInfoReq.new = function () {
    return new Common.UpdateInfoReq();
}
Common.UpdateInfoReq.create = function (is) {
    return Common.UpdateInfoReq._readFrom(is);
}
Common.SearchReq = function() {
    this.fExp = "";
    this._classname = "Common.SearchReq";
};
Common.SearchReq.prototype = new TafStream.JceStruct();
Common.SearchReq._classname = "Common.SearchReq";

Common.SearchReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.SearchReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.SearchReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.SearchReq();
    tmp.fExp = is.readString(0, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.SearchReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.fExp);
    os.resumePrecision && os.resumePrecision();
};
Common.SearchReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.SearchReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.SearchReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.fExp = this.fExp;
    
    return tmp;
}
Common.SearchReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("fExp") || (this.fExp = json.fExp);
}
Common.SearchReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.SearchReq.new = function () {
    return new Common.SearchReq();
}
Common.SearchReq.create = function (is) {
    return Common.SearchReq._readFrom(is);
}
Common.LoginRsp = function() {
    this.ret = Common.ENUM_RETURN_CODE.SUCCESS;
    this.LDAPKey = "";
    this.expireTime = 0;
    this.tel = "";
    this.email = "";
    this.name = "";
    this._classname = "Common.LoginRsp";
};
Common.LoginRsp.prototype = new TafStream.JceStruct();
Common.LoginRsp._classname = "Common.LoginRsp";

Common.LoginRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.LoginRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.LoginRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.LoginRsp();
    tmp.ret = is.readInt32(0, true, Common.ENUM_RETURN_CODE.SUCCESS);
    tmp.LDAPKey = is.readString(1, false, "");
    tmp.expireTime = is.readInt32(2, false, 0);
    tmp.tel = is.readString(3, false, "");
    tmp.email = is.readString(4, false, "");
    tmp.name = is.readString(5, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.LoginRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.ret);
    if (this.LDAPKey != undefined && this.LDAPKey != "") {
        os.writeString(1, this.LDAPKey);
    }
    if (this.expireTime != undefined && this.expireTime != 0) {
        os.writeInt32(2, this.expireTime);
    }
    if (this.tel != undefined && this.tel != "") {
        os.writeString(3, this.tel);
    }
    if (this.email != undefined && this.email != "") {
        os.writeString(4, this.email);
    }
    if (this.name != undefined && this.name != "") {
        os.writeString(5, this.name);
    }
    os.resumePrecision && os.resumePrecision();
};
Common.LoginRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.LoginRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.LoginRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.ret = this.ret;
    tmp.LDAPKey = this.LDAPKey;
    tmp.expireTime = this.expireTime;
    tmp.tel = this.tel;
    tmp.email = this.email;
    tmp.name = this.name;
    
    return tmp;
}
Common.LoginRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ret") || (this.ret = json.ret);
    !json.hasOwnProperty("LDAPKey") || (this.LDAPKey = json.LDAPKey);
    !json.hasOwnProperty("expireTime") || (this.expireTime = json.expireTime);
    !json.hasOwnProperty("tel") || (this.tel = json.tel);
    !json.hasOwnProperty("email") || (this.email = json.email);
    !json.hasOwnProperty("name") || (this.name = json.name);
}
Common.LoginRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.LoginRsp.new = function () {
    return new Common.LoginRsp();
}
Common.LoginRsp.create = function (is) {
    return Common.LoginRsp._readFrom(is);
}
Common.UpdateRsp = function() {
    this.ret = Common.ENUM_RETURN_CODE.SUCCESS;
    this.msg = "";
    this._classname = "Common.UpdateRsp";
};
Common.UpdateRsp.prototype = new TafStream.JceStruct();
Common.UpdateRsp._classname = "Common.UpdateRsp";

Common.UpdateRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.UpdateRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.UpdateRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.UpdateRsp();
    tmp.ret = is.readInt32(0, true, Common.ENUM_RETURN_CODE.SUCCESS);
    tmp.msg = is.readString(1, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.UpdateRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.ret);
    if (this.msg != undefined && this.msg != "") {
        os.writeString(1, this.msg);
    }
    os.resumePrecision && os.resumePrecision();
};
Common.UpdateRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.UpdateRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.UpdateRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.ret = this.ret;
    tmp.msg = this.msg;
    
    return tmp;
}
Common.UpdateRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ret") || (this.ret = json.ret);
    !json.hasOwnProperty("msg") || (this.msg = json.msg);
}
Common.UpdateRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.UpdateRsp.new = function () {
    return new Common.UpdateRsp();
}
Common.UpdateRsp.create = function (is) {
    return Common.UpdateRsp._readFrom(is);
}
Common.SearchRsp = function() {
    this.ret = Common.ENUM_RETURN_CODE.SUCCESS;
    this.users = new TafStream.List(Common.UserInfo);
    this._classname = "Common.SearchRsp";
};
Common.SearchRsp.prototype = new TafStream.JceStruct();
Common.SearchRsp._classname = "Common.SearchRsp";

Common.SearchRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.SearchRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.SearchRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.SearchRsp();
    tmp.ret = is.readInt32(0, true, Common.ENUM_RETURN_CODE.SUCCESS);
    tmp.users = is.readList(1, false, TafStream.List(Common.UserInfo));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.SearchRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.ret);
    if (this.users != undefined) {
        os.writeList(1, this.users);
    }
    os.resumePrecision && os.resumePrecision();
};
Common.SearchRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.SearchRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.SearchRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.ret = this.ret;
    tmp.users = this.users.toObject();
    
    return tmp;
}
Common.SearchRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ret") || (this.ret = json.ret);
    !json.hasOwnProperty("users") || (this.users.readFromObject(json.users));
}
Common.SearchRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.SearchRsp.new = function () {
    return new Common.SearchRsp();
}
Common.SearchRsp.create = function (is) {
    return Common.SearchRsp._readFrom(is);
}
Common.LogoutReq = function() {
    this.uid = "";
    this.ldapKey = "";
    this._classname = "Common.LogoutReq";
};
Common.LogoutReq.prototype = new TafStream.JceStruct();
Common.LogoutReq._classname = "Common.LogoutReq";

Common.LogoutReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.LogoutReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.LogoutReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.LogoutReq();
    tmp.uid = is.readString(0, true, "");
    tmp.ldapKey = is.readString(1, true, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.LogoutReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.uid);
    os.writeString(1, this.ldapKey);
    os.resumePrecision && os.resumePrecision();
};
Common.LogoutReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.LogoutReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.LogoutReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.uid = this.uid;
    tmp.ldapKey = this.ldapKey;
    
    return tmp;
}
Common.LogoutReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uid") || (this.uid = json.uid);
    !json.hasOwnProperty("ldapKey") || (this.ldapKey = json.ldapKey);
}
Common.LogoutReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.LogoutReq.new = function () {
    return new Common.LogoutReq();
}
Common.LogoutReq.create = function (is) {
    return Common.LogoutReq._readFrom(is);
}
Common.LogoutRsp = function() {
    this.ret = Common.ENUM_RETURN_CODE.SUCCESS;
    this._classname = "Common.LogoutRsp";
};
Common.LogoutRsp.prototype = new TafStream.JceStruct();
Common.LogoutRsp._classname = "Common.LogoutRsp";

Common.LogoutRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Common.LogoutRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Common.LogoutRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Common.LogoutRsp();
    tmp.ret = is.readInt32(0, true, Common.ENUM_RETURN_CODE.SUCCESS);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Common.LogoutRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.ret);
    os.resumePrecision && os.resumePrecision();
};
Common.LogoutRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Common.LogoutRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Common.LogoutRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.ret = this.ret;
    
    return tmp;
}
Common.LogoutRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ret") || (this.ret = json.ret);
}
Common.LogoutRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Common.LogoutRsp.new = function () {
    return new Common.LogoutRsp();
}
Common.LogoutRsp.create = function (is) {
    return Common.LogoutRsp._readFrom(is);
}

Common.LDAPServerProxy.prototype.addUserInfo = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.UpdateRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('addUserInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Common.LDAPServerProxy.prototype.checkLDAPKey = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.CheckLDAPKeyRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('checkLDAPKey', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Common.LDAPServerProxy.prototype.delUserInfo = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.UpdateRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('delUserInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Common.LDAPServerProxy.prototype.login = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.LoginRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('login', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Common.LDAPServerProxy.prototype.logout = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.LogoutRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('logout', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Common.LDAPServerProxy.prototype.scanLogin = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.LoginRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('scanLogin', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Common.LDAPServerProxy.prototype.searchByFilter = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.SearchRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('searchByFilter', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Common.LDAPServerProxy.prototype.updatePwd = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.UpdateRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('updatePwd', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Common.LDAPServerProxy.prototype.updateUserInfo = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Common.UpdateRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('updateUserInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



