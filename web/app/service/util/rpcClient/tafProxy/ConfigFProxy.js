// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 5.3.1 by TAF Team.
// Generated from `./ConfigF.jce'
// **********************************************************************

var TafStream = require('@taf/taf-stream');
var TafError  = require('@taf/taf-rpc').error;

if(TafStream.JceStruct == undefined){
TafStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TafStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TafStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TafStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TafStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var taf = taf || {};
module.exports.taf = taf;

taf.ConfigProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

taf.ConfigProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

taf.ConfigProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


taf.ConfigInfo = function() {
    this.appname = "";
    this.servername = "";
    this.filename = "";
    this.bAppOnly = false;
    this.host = "";
    this.setdivision = "";
    this._classname = "taf.ConfigInfo";
};
taf.ConfigInfo.prototype = new TafStream.JceStruct();
taf.ConfigInfo._classname = "taf.ConfigInfo";

taf.ConfigInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.ConfigInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.ConfigInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new taf.ConfigInfo();
    tmp.appname = is.readString(0, true, "");
    tmp.servername = is.readString(1, true, "");
    tmp.filename = is.readString(2, true, "");
    tmp.bAppOnly = is.readBoolean(3, true, false);
    tmp.host = is.readString(4, false, "");
    tmp.setdivision = is.readString(5, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
taf.ConfigInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.appname);
    os.writeString(1, this.servername);
    os.writeString(2, this.filename);
    os.writeBoolean(3, this.bAppOnly);
    if (this.host != undefined && this.host != "") {
        os.writeString(4, this.host);
    }
    if (this.setdivision != undefined && this.setdivision != "") {
        os.writeString(5, this.setdivision);
    }
    os.resumePrecision && os.resumePrecision();
};
taf.ConfigInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
taf.ConfigInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
taf.ConfigInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.appname = this.appname;
    tmp.servername = this.servername;
    tmp.filename = this.filename;
    tmp.bAppOnly = this.bAppOnly;
    tmp.host = this.host;
    tmp.setdivision = this.setdivision;
    
    return tmp;
}
taf.ConfigInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("appname") || (this.appname = json.appname);
    !json.hasOwnProperty("servername") || (this.servername = json.servername);
    !json.hasOwnProperty("filename") || (this.filename = json.filename);
    !json.hasOwnProperty("bAppOnly") || (this.bAppOnly = json.bAppOnly);
    !json.hasOwnProperty("host") || (this.host = json.host);
    !json.hasOwnProperty("setdivision") || (this.setdivision = json.setdivision);
}
taf.ConfigInfo.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
taf.ConfigInfo.new = function () {
    return new taf.ConfigInfo();
}
taf.ConfigInfo.create = function (is) {
    return taf.ConfigInfo._readFrom(is);
}
taf.GetConfigListInfo = function() {
    this.appname = "";
    this.servername = "";
    this.bAppOnly = false;
    this.host = "";
    this.setdivision = "";
    this.containername = "";
    this._classname = "taf.GetConfigListInfo";
};
taf.GetConfigListInfo.prototype = new TafStream.JceStruct();
taf.GetConfigListInfo._classname = "taf.GetConfigListInfo";

taf.GetConfigListInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.GetConfigListInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.GetConfigListInfo._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new taf.GetConfigListInfo();
    tmp.appname = is.readString(0, true, "");
    tmp.servername = is.readString(1, false, "");
    tmp.bAppOnly = is.readBoolean(2, false, false);
    tmp.host = is.readString(3, false, "");
    tmp.setdivision = is.readString(4, false, "");
    tmp.containername = is.readString(5, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
taf.GetConfigListInfo.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.appname);
    if (this.servername != undefined && this.servername != "") {
        os.writeString(1, this.servername);
    }
    if (this.bAppOnly != undefined && this.bAppOnly != false) {
        os.writeBoolean(2, this.bAppOnly);
    }
    if (this.host != undefined && this.host != "") {
        os.writeString(3, this.host);
    }
    if (this.setdivision != undefined && this.setdivision != "") {
        os.writeString(4, this.setdivision);
    }
    if (this.containername != undefined && this.containername != "") {
        os.writeString(5, this.containername);
    }
    os.resumePrecision && os.resumePrecision();
};
taf.GetConfigListInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
taf.GetConfigListInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
taf.GetConfigListInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.appname = this.appname;
    tmp.servername = this.servername;
    tmp.bAppOnly = this.bAppOnly;
    tmp.host = this.host;
    tmp.setdivision = this.setdivision;
    tmp.containername = this.containername;
    
    return tmp;
}
taf.GetConfigListInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("appname") || (this.appname = json.appname);
    !json.hasOwnProperty("servername") || (this.servername = json.servername);
    !json.hasOwnProperty("bAppOnly") || (this.bAppOnly = json.bAppOnly);
    !json.hasOwnProperty("host") || (this.host = json.host);
    !json.hasOwnProperty("setdivision") || (this.setdivision = json.setdivision);
    !json.hasOwnProperty("containername") || (this.containername = json.containername);
}
taf.GetConfigListInfo.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
taf.GetConfigListInfo.new = function () {
    return new taf.GetConfigListInfo();
}
taf.GetConfigListInfo.create = function (is) {
    return taf.GetConfigListInfo._readFrom(is);
}

taf.ConfigProxy.prototype.ListAllConfigByInfo = function (configInfo) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, configInfo);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.vf = is.readList(2, true, TafStream.List(TafStream.String));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('ListAllConfigByInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.ConfigProxy.prototype.ListConfig = function (app, server) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, app);
        os.writeString(2, server);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.vf = is.readList(3, true, TafStream.List(TafStream.String));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('ListConfig', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.ConfigProxy.prototype.ListConfigByInfo = function (configInfo) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, configInfo);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.vf = is.readList(2, true, TafStream.List(TafStream.String));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('ListConfigByInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.ConfigProxy.prototype.checkConfig = function (appServerName, filename, host) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, appServerName);
        os.writeString(2, filename);
        os.writeString(3, host);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.result = is.readString(4, true, TafStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('checkConfig', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.ConfigProxy.prototype.checkConfigByInfo = function (configInfo) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, configInfo);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.result = is.readString(2, true, TafStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('checkConfigByInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.ConfigProxy.prototype.loadConfig = function (app, server, filename) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, app);
        os.writeString(2, server);
        os.writeString(3, filename);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.config = is.readString(4, true, TafStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('loadConfig', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.ConfigProxy.prototype.loadConfigByHost = function (appServerName, filename, host) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, appServerName);
        os.writeString(2, filename);
        os.writeString(3, host);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.config = is.readString(4, true, TafStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('loadConfigByHost', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.ConfigProxy.prototype.loadConfigByInfo = function (configInfo) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, configInfo);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.config = is.readString(2, true, TafStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('loadConfigByInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



