// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 8.0.18_20201105184458 by TAF Team.
// Generated from `/Users/jarod/centos/taf-k8s/NodeServer/Node.jce'
// **********************************************************************

#include "Node.h"
#include "wup-linux-c++/wup.h"
#include "servant/BaseF.h"

using namespace wup;

    namespace taf
    {

        void Node::async_response_addFile(taf::CurrentPtr current, taf::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == WUPVERSION)
            {
                UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                tafAttr.put("", _ret);
                tafAttr.put("result", result);

                current->sendResponse(taf::JCESERVERSUCCESS, tafAttr);
            }
            else
            {
                taf::JceOutputStream<taf::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 4);

                current->sendResponse(taf::JCESERVERSUCCESS, _os);
            }
        }

        void Node::async_response_notifyServer(taf::CurrentPtr current, taf::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == WUPVERSION)
            {
                UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                tafAttr.put("", _ret);
                tafAttr.put("result", result);

                current->sendResponse(taf::JCESERVERSUCCESS, tafAttr);
            }
            else
            {
                taf::JceOutputStream<taf::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 4);

                current->sendResponse(taf::JCESERVERSUCCESS, _os);
            }
        }

        void Node::async_response_restartServer(taf::CurrentPtr current, taf::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == WUPVERSION)
            {
                UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                tafAttr.put("", _ret);
                tafAttr.put("result", result);

                current->sendResponse(taf::JCESERVERSUCCESS, tafAttr);
            }
            else
            {
                taf::JceOutputStream<taf::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 3);

                current->sendResponse(taf::JCESERVERSUCCESS, _os);
            }
        }

        void Node::async_response_startServer(taf::CurrentPtr current, taf::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == WUPVERSION)
            {
                UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                tafAttr.put("", _ret);
                tafAttr.put("result", result);

                current->sendResponse(taf::JCESERVERSUCCESS, tafAttr);
            }
            else
            {
                taf::JceOutputStream<taf::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 3);

                current->sendResponse(taf::JCESERVERSUCCESS, _os);
            }
        }

        void Node::async_response_stopServer(taf::CurrentPtr current, taf::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == WUPVERSION)
            {
                UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                tafAttr.put("", _ret);
                tafAttr.put("result", result);

                current->sendResponse(taf::JCESERVERSUCCESS, tafAttr);
            }
            else
            {
                taf::JceOutputStream<taf::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 3);

                current->sendResponse(taf::JCESERVERSUCCESS, _os);
            }
        }

        int Node::onDispatch(taf::CurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __taf__Node_all[]=
            {
                "addFile",
                "notifyServer",
                "restartServer",
                "startServer",
                "stopServer"
            };

            pair<string*, string*> r = equal_range(__taf__Node_all, __taf__Node_all+5, _current->getFuncName());
            if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
            switch(r.first - __taf__Node_all)
            {
                case 0:
                {
                    taf::JceInputStream<taf::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string application;
                    std::string serverName;
                    std::string file;
                    std::string result;
                    if (_current->getRequestVersion() == WUPVERSION)
                    {
                        UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                        tafAttr.decode(_current->getRequestBuffer());
                        tafAttr.get("application", application);
                        tafAttr.get("serverName", serverName);
                        tafAttr.get("file", file);
                        tafAttr.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        string buff(_current->getRequestBuffer().begin(), _current->getRequestBuffer().end());
                        taf::JsonValuePtr p = taf::TC_Json::getValue(buff);
                        taf::JsonValueObjPtr pObj = taf::JsonValueObjPtr::dynamicCast(p);
                        taf::JsonInput::readJson(application, pObj->value["application"], true);
                        taf::JsonInput::readJson(serverName, pObj->value["serverName"], true);
                        taf::JsonInput::readJson(file, pObj->value["file"], true);
                        taf::JsonInput::readJson(result, pObj->value["result"], false);
                    }
                    else
                    {
                        _is.read(application, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(file, 3, true);
                        _is.read(result, 4, false);
                    }
                    taf::Int32 _ret = addFile(application,serverName,file,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == WUPVERSION)
                        {
                            UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                            tafAttr.put("", _ret);
                            tafAttr.put("result", result);
                            tafAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            taf::JsonValueObjPtr p = new taf::JsonValueObj();
                            p->value[""] = taf::JsonOutput::writeJson(_ret);
                            p->value["result"] = taf::JsonOutput::writeJson(result);
                            string buff = taf::TC_Json::writeValue(p);
                            _sResponseBuffer.resize(buff.length());
                            _sResponseBuffer.assign(buff.begin(), buff.end());
                        }
                        else
                        {
                            taf::JceOutputStream<taf::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return taf::JCESERVERSUCCESS;

                }
                case 1:
                {
                    taf::JceInputStream<taf::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string application;
                    std::string serverName;
                    std::string command;
                    std::string result;
                    if (_current->getRequestVersion() == WUPVERSION)
                    {
                        UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                        tafAttr.decode(_current->getRequestBuffer());
                        tafAttr.get("application", application);
                        tafAttr.get("serverName", serverName);
                        tafAttr.get("command", command);
                        tafAttr.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        string buff(_current->getRequestBuffer().begin(), _current->getRequestBuffer().end());
                        taf::JsonValuePtr p = taf::TC_Json::getValue(buff);
                        taf::JsonValueObjPtr pObj = taf::JsonValueObjPtr::dynamicCast(p);
                        taf::JsonInput::readJson(application, pObj->value["application"], true);
                        taf::JsonInput::readJson(serverName, pObj->value["serverName"], true);
                        taf::JsonInput::readJson(command, pObj->value["command"], true);
                        taf::JsonInput::readJson(result, pObj->value["result"], false);
                    }
                    else
                    {
                        _is.read(application, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(command, 3, true);
                        _is.read(result, 4, false);
                    }
                    taf::Int32 _ret = notifyServer(application,serverName,command,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == WUPVERSION)
                        {
                            UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                            tafAttr.put("", _ret);
                            tafAttr.put("result", result);
                            tafAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            taf::JsonValueObjPtr p = new taf::JsonValueObj();
                            p->value[""] = taf::JsonOutput::writeJson(_ret);
                            p->value["result"] = taf::JsonOutput::writeJson(result);
                            string buff = taf::TC_Json::writeValue(p);
                            _sResponseBuffer.resize(buff.length());
                            _sResponseBuffer.assign(buff.begin(), buff.end());
                        }
                        else
                        {
                            taf::JceOutputStream<taf::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return taf::JCESERVERSUCCESS;

                }
                case 2:
                {
                    taf::JceInputStream<taf::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string application;
                    std::string serverName;
                    std::string result;
                    if (_current->getRequestVersion() == WUPVERSION)
                    {
                        UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                        tafAttr.decode(_current->getRequestBuffer());
                        tafAttr.get("application", application);
                        tafAttr.get("serverName", serverName);
                        tafAttr.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        string buff(_current->getRequestBuffer().begin(), _current->getRequestBuffer().end());
                        taf::JsonValuePtr p = taf::TC_Json::getValue(buff);
                        taf::JsonValueObjPtr pObj = taf::JsonValueObjPtr::dynamicCast(p);
                        taf::JsonInput::readJson(application, pObj->value["application"], true);
                        taf::JsonInput::readJson(serverName, pObj->value["serverName"], true);
                        taf::JsonInput::readJson(result, pObj->value["result"], false);
                    }
                    else
                    {
                        _is.read(application, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(result, 3, false);
                    }
                    taf::Int32 _ret = restartServer(application,serverName,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == WUPVERSION)
                        {
                            UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                            tafAttr.put("", _ret);
                            tafAttr.put("result", result);
                            tafAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            taf::JsonValueObjPtr p = new taf::JsonValueObj();
                            p->value[""] = taf::JsonOutput::writeJson(_ret);
                            p->value["result"] = taf::JsonOutput::writeJson(result);
                            string buff = taf::TC_Json::writeValue(p);
                            _sResponseBuffer.resize(buff.length());
                            _sResponseBuffer.assign(buff.begin(), buff.end());
                        }
                        else
                        {
                            taf::JceOutputStream<taf::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return taf::JCESERVERSUCCESS;

                }
                case 3:
                {
                    taf::JceInputStream<taf::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string application;
                    std::string serverName;
                    std::string result;
                    if (_current->getRequestVersion() == WUPVERSION)
                    {
                        UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                        tafAttr.decode(_current->getRequestBuffer());
                        tafAttr.get("application", application);
                        tafAttr.get("serverName", serverName);
                        tafAttr.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        string buff(_current->getRequestBuffer().begin(), _current->getRequestBuffer().end());
                        taf::JsonValuePtr p = taf::TC_Json::getValue(buff);
                        taf::JsonValueObjPtr pObj = taf::JsonValueObjPtr::dynamicCast(p);
                        taf::JsonInput::readJson(application, pObj->value["application"], true);
                        taf::JsonInput::readJson(serverName, pObj->value["serverName"], true);
                        taf::JsonInput::readJson(result, pObj->value["result"], false);
                    }
                    else
                    {
                        _is.read(application, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(result, 3, false);
                    }
                    taf::Int32 _ret = startServer(application,serverName,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == WUPVERSION)
                        {
                            UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                            tafAttr.put("", _ret);
                            tafAttr.put("result", result);
                            tafAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            taf::JsonValueObjPtr p = new taf::JsonValueObj();
                            p->value[""] = taf::JsonOutput::writeJson(_ret);
                            p->value["result"] = taf::JsonOutput::writeJson(result);
                            string buff = taf::TC_Json::writeValue(p);
                            _sResponseBuffer.resize(buff.length());
                            _sResponseBuffer.assign(buff.begin(), buff.end());
                        }
                        else
                        {
                            taf::JceOutputStream<taf::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return taf::JCESERVERSUCCESS;

                }
                case 4:
                {
                    taf::JceInputStream<taf::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string application;
                    std::string serverName;
                    std::string result;
                    if (_current->getRequestVersion() == WUPVERSION)
                    {
                        UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                        tafAttr.decode(_current->getRequestBuffer());
                        tafAttr.get("application", application);
                        tafAttr.get("serverName", serverName);
                        tafAttr.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        string buff(_current->getRequestBuffer().begin(), _current->getRequestBuffer().end());
                        taf::JsonValuePtr p = taf::TC_Json::getValue(buff);
                        taf::JsonValueObjPtr pObj = taf::JsonValueObjPtr::dynamicCast(p);
                        taf::JsonInput::readJson(application, pObj->value["application"], true);
                        taf::JsonInput::readJson(serverName, pObj->value["serverName"], true);
                        taf::JsonInput::readJson(result, pObj->value["result"], false);
                    }
                    else
                    {
                        _is.read(application, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(result, 3, false);
                    }
                    taf::Int32 _ret = stopServer(application,serverName,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == WUPVERSION)
                        {
                            UniAttribute<taf::BufferWriterVector, taf::BufferReader>  tafAttr;
                            tafAttr.put("", _ret);
                            tafAttr.put("result", result);
                            tafAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            taf::JsonValueObjPtr p = new taf::JsonValueObj();
                            p->value[""] = taf::JsonOutput::writeJson(_ret);
                            p->value["result"] = taf::JsonOutput::writeJson(result);
                            string buff = taf::TC_Json::writeValue(p);
                            _sResponseBuffer.resize(buff.length());
                            _sResponseBuffer.assign(buff.begin(), buff.end());
                        }
                        else
                        {
                            taf::JceOutputStream<taf::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return taf::JCESERVERSUCCESS;

                }
            }
            return taf::JCESERVERNOFUNCERR;
        }


}

