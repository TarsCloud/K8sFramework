// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Business business
//
// swagger:model Business
type Business struct {

	// app
	App []*AppElem `json:"App"`

	// business name
	// Pattern: ^[a-zA-Z0-9.:_-]{1,128}\z
	BusinessName string `json:"BusinessName,omitempty"`

	// business show
	BusinessShow string `json:"BusinessShow,omitempty"`
}

// Validate validates this business
func (m *Business) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Business) validateApp(formats strfmt.Registry) error {

	if swag.IsZero(m.App) { // not required
		return nil
	}

	for i := 0; i < len(m.App); i++ {
		if swag.IsZero(m.App[i]) { // not required
			continue
		}

		if m.App[i] != nil {
			if err := m.App[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("App" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Business) validateBusinessName(formats strfmt.Registry) error {

	if swag.IsZero(m.BusinessName) { // not required
		return nil
	}

	if err := validate.Pattern("BusinessName", "body", string(m.BusinessName), `^[a-zA-Z0-9.:_-]{1,128}\z`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Business) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Business) UnmarshalBinary(b []byte) error {
	var res Business
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
