// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeSelector node selector
//
// swagger:model NodeSelector
type NodeSelector struct {

	// ability pool
	AbilityPool *NodeSelectorElem `json:"AbilityPool,omitempty"`

	// daemon set
	DaemonSet *NodeSelectorElem `json:"DaemonSet,omitempty"`

	// node bind
	NodeBind *NodeSelectorElem `json:"NodeBind,omitempty"`

	// public pool
	PublicPool *NodeSelectorElem `json:"PublicPool,omitempty"`
}

// Validate validates this node selector
func (m *NodeSelector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbilityPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaemonSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeBind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicPool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeSelector) validateAbilityPool(formats strfmt.Registry) error {

	if swag.IsZero(m.AbilityPool) { // not required
		return nil
	}

	if m.AbilityPool != nil {
		if err := m.AbilityPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AbilityPool")
			}
			return err
		}
	}

	return nil
}

func (m *NodeSelector) validateDaemonSet(formats strfmt.Registry) error {

	if swag.IsZero(m.DaemonSet) { // not required
		return nil
	}

	if m.DaemonSet != nil {
		if err := m.DaemonSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DaemonSet")
			}
			return err
		}
	}

	return nil
}

func (m *NodeSelector) validateNodeBind(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeBind) { // not required
		return nil
	}

	if m.NodeBind != nil {
		if err := m.NodeBind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodeBind")
			}
			return err
		}
	}

	return nil
}

func (m *NodeSelector) validatePublicPool(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicPool) { // not required
		return nil
	}

	if m.PublicPool != nil {
		if err := m.PublicPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PublicPool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeSelector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeSelector) UnmarshalBinary(b []byte) error {
	var res NodeSelector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
