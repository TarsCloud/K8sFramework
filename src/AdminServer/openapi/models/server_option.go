// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerOption server option
//
// swagger:model ServerOption
type ServerOption struct {

	// async thread
	// Maximum: 20
	// Minimum: 0
	AsyncThread *int32 `json:"AsyncThread,omitempty"`

	// server important
	// Maximum: 20
	// Minimum: 0
	ServerImportant *int32 `json:"ServerImportant,omitempty"`

	// server profile
	ServerProfile string `json:"ServerProfile,omitempty"`

	// server sub type
	// Enum: [tars normal]
	ServerSubType *string `json:"ServerSubType,omitempty"`

	// server template
	// Pattern: [0-9a-zA-Z.-]{5,64}\z
	ServerTemplate string `json:"ServerTemplate,omitempty"`
}

// Validate validates this server option
func (m *ServerOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsyncThread(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerImportant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerSubType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerOption) validateAsyncThread(formats strfmt.Registry) error {

	if swag.IsZero(m.AsyncThread) { // not required
		return nil
	}

	if err := validate.MinimumInt("AsyncThread", "body", int64(*m.AsyncThread), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("AsyncThread", "body", int64(*m.AsyncThread), 20, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerOption) validateServerImportant(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerImportant) { // not required
		return nil
	}

	if err := validate.MinimumInt("ServerImportant", "body", int64(*m.ServerImportant), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ServerImportant", "body", int64(*m.ServerImportant), 20, false); err != nil {
		return err
	}

	return nil
}

var serverOptionTypeServerSubTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tars","normal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverOptionTypeServerSubTypePropEnum = append(serverOptionTypeServerSubTypePropEnum, v)
	}
}

const (

	// ServerOptionServerSubTypeTars captures enum value "tars"
	ServerOptionServerSubTypeTars string = "tars"

	// ServerOptionServerSubTypeNormal captures enum value "normal"
	ServerOptionServerSubTypeNormal string = "normal"
)

// prop value enum
func (m *ServerOption) validateServerSubTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverOptionTypeServerSubTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerOption) validateServerSubType(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerSubType) { // not required
		return nil
	}

	// value enum
	if err := m.validateServerSubTypeEnum("ServerSubType", "body", *m.ServerSubType); err != nil {
		return err
	}

	return nil
}

func (m *ServerOption) validateServerTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerTemplate) { // not required
		return nil
	}

	if err := validate.Pattern("ServerTemplate", "body", string(m.ServerTemplate), `[0-9a-zA-Z.-]{5,64}\z`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerOption) UnmarshalBinary(b []byte) error {
	var res ServerOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
