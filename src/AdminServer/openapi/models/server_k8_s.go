// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServerK8S server k8 s
//
// swagger:model ServerK8S
type ServerK8S struct {

	// host ipc
	HostIpc bool `json:"HostIpc,omitempty"`

	// host network
	HostNetwork bool `json:"HostNetwork,omitempty"`

	// host port
	HostPort []*HostPortElem `json:"HostPort"`

	// image
	Image string `json:"Image,omitempty"`

	// node selector
	NodeSelector *NodeSelector `json:"NodeSelector,omitempty"`

	// not stacked
	NotStacked *bool `json:"NotStacked,omitempty"`

	// replicas
	Replicas int32 `json:"Replicas,omitempty"`

	// version
	Version string `json:"Version,omitempty"`
}

// Validate validates this server k8 s
func (m *ServerK8S) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeSelector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerK8S) validateHostPort(formats strfmt.Registry) error {

	if swag.IsZero(m.HostPort) { // not required
		return nil
	}

	for i := 0; i < len(m.HostPort); i++ {
		if swag.IsZero(m.HostPort[i]) { // not required
			continue
		}

		if m.HostPort[i] != nil {
			if err := m.HostPort[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("HostPort" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServerK8S) validateNodeSelector(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeSelector) { // not required
		return nil
	}

	if m.NodeSelector != nil {
		if err := m.NodeSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodeSelector")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerK8S) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerK8S) UnmarshalBinary(b []byte) error {
	var res ServerK8S
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
