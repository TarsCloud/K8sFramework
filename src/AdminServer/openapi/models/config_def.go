// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigDef config def
//
// swagger:model ConfigDef
type ConfigDef struct {

	// config Id
	// Required: true
	ConfigID *string `json:"ConfigId"`

	// config type
	// Required: true
	// Enum: [app server pod]
	ConfigType *string `json:"ConfigType"`
}

// Validate validates this config def
func (m *ConfigDef) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigDef) validateConfigID(formats strfmt.Registry) error {

	if err := validate.Required("ConfigId", "body", m.ConfigID); err != nil {
		return err
	}

	return nil
}

var configDefTypeConfigTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["app","server","pod"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configDefTypeConfigTypePropEnum = append(configDefTypeConfigTypePropEnum, v)
	}
}

const (

	// ConfigDefConfigTypeApp captures enum value "app"
	ConfigDefConfigTypeApp string = "app"

	// ConfigDefConfigTypeServer captures enum value "server"
	ConfigDefConfigTypeServer string = "server"

	// ConfigDefConfigTypePod captures enum value "pod"
	ConfigDefConfigTypePod string = "pod"
)

// prop value enum
func (m *ConfigDef) validateConfigTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, configDefTypeConfigTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConfigDef) validateConfigType(formats strfmt.Registry) error {

	if err := validate.Required("ConfigType", "body", m.ConfigType); err != nil {
		return err
	}

	// value enum
	if err := m.validateConfigTypeEnum("ConfigType", "body", *m.ConfigType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigDef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigDef) UnmarshalBinary(b []byte) error {
	var res ConfigDef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
