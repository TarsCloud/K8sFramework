// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeployMeta deploy meta
//
// swagger:model DeployMeta
type DeployMeta struct {

	// request person
	// Read Only: true
	RequestPerson string `json:"RequestPerson,omitempty"`

	// request time
	// Read Only: true
	// Format: date-time
	RequestTime strfmt.DateTime `json:"RequestTime,omitempty"`

	// server app
	// Required: true
	ServerApp *string `json:"ServerApp"`

	// server k8 s
	// Required: true
	ServerK8S *ServerK8S `json:"ServerK8S"`

	// server mark
	ServerMark string `json:"ServerMark,omitempty"`

	// server name
	// Required: true
	ServerName *string `json:"ServerName"`

	// server option
	// Required: true
	ServerOption *ServerOption `json:"ServerOption"`

	// server servant
	// Required: true
	ServerServant MapServant `json:"ServerServant"`
}

// Validate validates this deploy meta
func (m *DeployMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerK8S(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerServant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployMeta) validateRequestTime(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestTime) { // not required
		return nil
	}

	if err := validate.FormatOf("RequestTime", "body", "date-time", m.RequestTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeployMeta) validateServerApp(formats strfmt.Registry) error {

	if err := validate.Required("ServerApp", "body", m.ServerApp); err != nil {
		return err
	}

	return nil
}

func (m *DeployMeta) validateServerK8S(formats strfmt.Registry) error {

	if err := validate.Required("ServerK8S", "body", m.ServerK8S); err != nil {
		return err
	}

	if m.ServerK8S != nil {
		if err := m.ServerK8S.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServerK8S")
			}
			return err
		}
	}

	return nil
}

func (m *DeployMeta) validateServerName(formats strfmt.Registry) error {

	if err := validate.Required("ServerName", "body", m.ServerName); err != nil {
		return err
	}

	return nil
}

func (m *DeployMeta) validateServerOption(formats strfmt.Registry) error {

	if err := validate.Required("ServerOption", "body", m.ServerOption); err != nil {
		return err
	}

	if m.ServerOption != nil {
		if err := m.ServerOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServerOption")
			}
			return err
		}
	}

	return nil
}

func (m *DeployMeta) validateServerServant(formats strfmt.Registry) error {

	if err := m.ServerServant.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ServerServant")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployMeta) UnmarshalBinary(b []byte) error {
	var res DeployMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
