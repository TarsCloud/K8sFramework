// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppElem app elem
//
// swagger:model AppElem
type AppElem struct {

	// app name
	// Pattern: ^[a-zA-Z0-9]{1,24}\z
	AppName string `json:"AppName,omitempty"`

	// server
	Server []*ServerElem `json:"Server"`
}

// Validate validates this app elem
func (m *AppElem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppElem) validateAppName(formats strfmt.Registry) error {

	if swag.IsZero(m.AppName) { // not required
		return nil
	}

	if err := validate.Pattern("AppName", "body", string(m.AppName), `^[a-zA-Z0-9]{1,24}\z`); err != nil {
		return err
	}

	return nil
}

func (m *AppElem) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	for i := 0; i < len(m.Server); i++ {
		if swag.IsZero(m.Server[i]) { // not required
			continue
		}

		if m.Server[i] != nil {
			if err := m.Server[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Server" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppElem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppElem) UnmarshalBinary(b []byte) error {
	var res AppElem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
