// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerServantElem server servant elem
//
// swagger:model ServerServantElem
type ServerServantElem struct {

	// capacity
	// Maximum: 3e+06
	// Minimum: 1
	Capacity int32 `json:"Capacity,omitempty"`

	// connections
	// Maximum: 3e+07
	// Minimum: 1
	Connections int32 `json:"Connections,omitempty"`

	// is taf
	IsTaf *bool `json:"IsTaf,omitempty"`

	// is Tcp
	IsTCP *bool `json:"IsTcp,omitempty"`

	// name
	// Pattern: ^[a-zA-Z1-9]{1,64}Obj\z
	Name string `json:"Name,omitempty"`

	// port
	// Maximum: 65535
	// Minimum: 1
	Port int32 `json:"Port,omitempty"`

	// threads
	// Maximum: 50
	// Minimum: 1
	Threads int32 `json:"Threads,omitempty"`

	// timeout
	// Maximum: 1.2e+06
	// Minimum: 1
	Timeout int32 `json:"Timeout,omitempty"`
}

// Validate validates this server servant elem
func (m *ServerServantElem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerServantElem) validateCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if err := validate.MinimumInt("Capacity", "body", int64(m.Capacity), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Capacity", "body", int64(m.Capacity), 3e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerServantElem) validateConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	if err := validate.MinimumInt("Connections", "body", int64(m.Connections), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Connections", "body", int64(m.Connections), 3e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerServantElem) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("Name", "body", string(m.Name), `^[a-zA-Z1-9]{1,64}Obj\z`); err != nil {
		return err
	}

	return nil
}

func (m *ServerServantElem) validatePort(formats strfmt.Registry) error {

	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("Port", "body", int64(m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Port", "body", int64(m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerServantElem) validateThreads(formats strfmt.Registry) error {

	if swag.IsZero(m.Threads) { // not required
		return nil
	}

	if err := validate.MinimumInt("Threads", "body", int64(m.Threads), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Threads", "body", int64(m.Threads), 50, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerServantElem) validateTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("Timeout", "body", int64(m.Timeout), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Timeout", "body", int64(m.Timeout), 1.2e+06, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerServantElem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerServantElem) UnmarshalBinary(b []byte) error {
	var res ServerServantElem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
