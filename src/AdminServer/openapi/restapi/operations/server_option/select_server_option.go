// Code generated by go-swagger; DO NOT EDIT.

package server_option

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectServerOptionHandlerFunc turns a function with the right signature into a select server option handler
type SelectServerOptionHandlerFunc func(SelectServerOptionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectServerOptionHandlerFunc) Handle(params SelectServerOptionParams) middleware.Responder {
	return fn(params)
}

// SelectServerOptionHandler interface for that can handle valid select server option params
type SelectServerOptionHandler interface {
	Handle(SelectServerOptionParams) middleware.Responder
}

// NewSelectServerOption creates a new http.Handler for the select server option operation
func NewSelectServerOption(ctx *middleware.Context, handler SelectServerOptionHandler) *SelectServerOption {
	return &SelectServerOption{Context: ctx, Handler: handler}
}

/*SelectServerOption swagger:route GET /servers/options server-option k8s selectServerOption

获取私有模板，web=/server_option_select

columns key=['ServerId', 'ServerTemplate', 'ServerProfile', 'ServerImportant', 'AsyncThread']

*/
type SelectServerOption struct {
	Context *middleware.Context
	Handler SelectServerOptionHandler
}

func (o *SelectServerOption) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectServerOptionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
