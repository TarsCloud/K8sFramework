// Code generated by go-swagger; DO NOT EDIT.

package approval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectApprovalHandlerFunc turns a function with the right signature into a select approval handler
type SelectApprovalHandlerFunc func(SelectApprovalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectApprovalHandlerFunc) Handle(params SelectApprovalParams) middleware.Responder {
	return fn(params)
}

// SelectApprovalHandler interface for that can handle valid select approval params
type SelectApprovalHandler interface {
	Handle(SelectApprovalParams) middleware.Responder
}

// NewSelectApproval creates a new http.Handler for the select approval operation
func NewSelectApproval(ctx *middleware.Context, handler SelectApprovalHandler) *SelectApproval {
	return &SelectApproval{Context: ctx, Handler: handler}
}

/*SelectApproval swagger:route GET /approvals approval k8s selectApproval

拉取审批列表，web=/approval_select

columns key=['ServerApp', 'ServerName', 'ServerServant', 'ServerOption', 'ServerK8S', 'ApprovalPerson', 'ApprovalResult', 'ApprovalTime', 'ApprovalMark', 'RequestPerson', 'RequestTime', 'RequestMark']

*/
type SelectApproval struct {
	Context *middleware.Context
	Handler SelectApprovalHandler
}

func (o *SelectApproval) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectApprovalParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
