// Code generated by go-swagger; DO NOT EDIT.

package approval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateApprovalHandlerFunc turns a function with the right signature into a create approval handler
type CreateApprovalHandlerFunc func(CreateApprovalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateApprovalHandlerFunc) Handle(params CreateApprovalParams) middleware.Responder {
	return fn(params)
}

// CreateApprovalHandler interface for that can handle valid create approval params
type CreateApprovalHandler interface {
	Handle(CreateApprovalParams) middleware.Responder
}

// NewCreateApproval creates a new http.Handler for the create approval operation
func NewCreateApproval(ctx *middleware.Context, handler CreateApprovalHandler) *CreateApproval {
	return &CreateApproval{Context: ctx, Handler: handler}
}

/*CreateApproval swagger:route POST /approvals approval k8s createApproval

创建服务审批，web=/approval_create

*/
type CreateApproval struct {
	Context *middleware.Context
	Handler CreateApprovalHandler
}

func (o *CreateApproval) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateApprovalParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateApprovalBody create approval body
//
// swagger:model CreateApprovalBody
type CreateApprovalBody struct {

	// metadata
	Metadata *CreateApprovalParamsBodyMetadata `json:"metadata,omitempty"`
}

// Validate validates this create approval body
func (o *CreateApprovalBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateApprovalBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateApprovalBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateApprovalBody) UnmarshalBinary(b []byte) error {
	var res CreateApprovalBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateApprovalOKBody create approval o k body
//
// swagger:model CreateApprovalOKBody
type CreateApprovalOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this create approval o k body
func (o *CreateApprovalOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateApprovalOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateApprovalOKBody) UnmarshalBinary(b []byte) error {
	var res CreateApprovalOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateApprovalParamsBodyMetadata create approval params body metadata
//
// swagger:model CreateApprovalParamsBodyMetadata
type CreateApprovalParamsBodyMetadata struct {

	// approval mark
	ApprovalMark string `json:"ApprovalMark,omitempty"`

	// approval result
	ApprovalResult bool `json:"ApprovalResult,omitempty"`

	// deploy Id
	// Required: true
	DeployID *string `json:"DeployId"`
}

// Validate validates this create approval params body metadata
func (o *CreateApprovalParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeployID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateApprovalParamsBodyMetadata) validateDeployID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"DeployId", "body", o.DeployID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateApprovalParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateApprovalParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res CreateApprovalParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
