// Code generated by go-swagger; DO NOT EDIT.

package server_pod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectPodAliveHandlerFunc turns a function with the right signature into a select pod alive handler
type SelectPodAliveHandlerFunc func(SelectPodAliveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectPodAliveHandlerFunc) Handle(params SelectPodAliveParams) middleware.Responder {
	return fn(params)
}

// SelectPodAliveHandler interface for that can handle valid select pod alive params
type SelectPodAliveHandler interface {
	Handle(SelectPodAliveParams) middleware.Responder
}

// NewSelectPodAlive creates a new http.Handler for the select pod alive operation
func NewSelectPodAlive(ctx *middleware.Context, handler SelectPodAliveHandler) *SelectPodAlive {
	return &SelectPodAlive{Context: ctx, Handler: handler}
}

/*SelectPodAlive swagger:route GET /servers/alivePods server-pod k8s selectPodAlive

获取当前Pod，web=/pod_list

columns key=['PodId', 'PodName', 'PodIp', 'NodeIp','ServerId', 'ServerApp', 'ServerName', 'ServiceVersion', 'SettingState', 'PresentState', 'PresentMessage', 'CreateTime', 'UpdateTime']

*/
type SelectPodAlive struct {
	Context *middleware.Context
	Handler SelectPodAliveHandler
}

func (o *SelectPodAlive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectPodAliveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
