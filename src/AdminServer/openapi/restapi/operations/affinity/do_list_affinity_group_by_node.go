// Code generated by go-swagger; DO NOT EDIT.

package affinity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DoListAffinityGroupByNodeHandlerFunc turns a function with the right signature into a do list affinity group by node handler
type DoListAffinityGroupByNodeHandlerFunc func(DoListAffinityGroupByNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DoListAffinityGroupByNodeHandlerFunc) Handle(params DoListAffinityGroupByNodeParams) middleware.Responder {
	return fn(params)
}

// DoListAffinityGroupByNodeHandler interface for that can handle valid do list affinity group by node params
type DoListAffinityGroupByNodeHandler interface {
	Handle(DoListAffinityGroupByNodeParams) middleware.Responder
}

// NewDoListAffinityGroupByNode creates a new http.Handler for the do list affinity group by node operation
func NewDoListAffinityGroupByNode(ctx *middleware.Context, handler DoListAffinityGroupByNodeHandler) *DoListAffinityGroupByNode {
	return &DoListAffinityGroupByNode{Context: ctx, Handler: handler}
}

/*DoListAffinityGroupByNode swagger:route GET /affinities/nodes affinity k8s doListAffinityGroupByNode

通过节点名拉取亲和性，web=/affinity_list_node

columns key=['ServerApp', 'NodeName']

*/
type DoListAffinityGroupByNode struct {
	Context *middleware.Context
	Handler DoListAffinityGroupByNodeHandler
}

func (o *DoListAffinityGroupByNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDoListAffinityGroupByNodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
