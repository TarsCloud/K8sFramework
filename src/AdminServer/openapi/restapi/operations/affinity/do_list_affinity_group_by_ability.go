// Code generated by go-swagger; DO NOT EDIT.

package affinity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DoListAffinityGroupByAbilityHandlerFunc turns a function with the right signature into a do list affinity group by ability handler
type DoListAffinityGroupByAbilityHandlerFunc func(DoListAffinityGroupByAbilityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DoListAffinityGroupByAbilityHandlerFunc) Handle(params DoListAffinityGroupByAbilityParams) middleware.Responder {
	return fn(params)
}

// DoListAffinityGroupByAbilityHandler interface for that can handle valid do list affinity group by ability params
type DoListAffinityGroupByAbilityHandler interface {
	Handle(DoListAffinityGroupByAbilityParams) middleware.Responder
}

// NewDoListAffinityGroupByAbility creates a new http.Handler for the do list affinity group by ability operation
func NewDoListAffinityGroupByAbility(ctx *middleware.Context, handler DoListAffinityGroupByAbilityHandler) *DoListAffinityGroupByAbility {
	return &DoListAffinityGroupByAbility{Context: ctx, Handler: handler}
}

/*DoListAffinityGroupByAbility swagger:route GET /affinities/servers affinity k8s doListAffinityGroupByAbility

通过亲和性亲和性拉取服务名，web=/affinity_list_server

columns key=['ServerApp', 'NodeName']

*/
type DoListAffinityGroupByAbility struct {
	Context *middleware.Context
	Handler DoListAffinityGroupByAbilityHandler
}

func (o *DoListAffinityGroupByAbility) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDoListAffinityGroupByAbilityParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
