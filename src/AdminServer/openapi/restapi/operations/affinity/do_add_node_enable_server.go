// Code generated by go-swagger; DO NOT EDIT.

package affinity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DoAddNodeEnableServerHandlerFunc turns a function with the right signature into a do add node enable server handler
type DoAddNodeEnableServerHandlerFunc func(DoAddNodeEnableServerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DoAddNodeEnableServerHandlerFunc) Handle(params DoAddNodeEnableServerParams) middleware.Responder {
	return fn(params)
}

// DoAddNodeEnableServerHandler interface for that can handle valid do add node enable server params
type DoAddNodeEnableServerHandler interface {
	Handle(DoAddNodeEnableServerParams) middleware.Responder
}

// NewDoAddNodeEnableServer creates a new http.Handler for the do add node enable server operation
func NewDoAddNodeEnableServer(ctx *middleware.Context, handler DoAddNodeEnableServerHandler) *DoAddNodeEnableServer {
	return &DoAddNodeEnableServer{Context: ctx, Handler: handler}
}

/*DoAddNodeEnableServer swagger:route PATCH /affinities/nodes affinity k8s doAddNodeEnableServer

Node新增可部署的服务，web=/affinity_add_server

*/
type DoAddNodeEnableServer struct {
	Context *middleware.Context
	Handler DoAddNodeEnableServerHandler
}

func (o *DoAddNodeEnableServer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDoAddNodeEnableServerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DoAddNodeEnableServerBody do add node enable server body
//
// swagger:model DoAddNodeEnableServerBody
type DoAddNodeEnableServerBody struct {

	// metadata
	Metadata *DoAddNodeEnableServerParamsBodyMetadata `json:"metadata,omitempty"`
}

// Validate validates this do add node enable server body
func (o *DoAddNodeEnableServerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DoAddNodeEnableServerBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DoAddNodeEnableServerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DoAddNodeEnableServerBody) UnmarshalBinary(b []byte) error {
	var res DoAddNodeEnableServerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DoAddNodeEnableServerOKBody do add node enable server o k body
//
// swagger:model DoAddNodeEnableServerOKBody
type DoAddNodeEnableServerOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this do add node enable server o k body
func (o *DoAddNodeEnableServerOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DoAddNodeEnableServerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DoAddNodeEnableServerOKBody) UnmarshalBinary(b []byte) error {
	var res DoAddNodeEnableServerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DoAddNodeEnableServerParamsBodyMetadata do add node enable server params body metadata
//
// swagger:model DoAddNodeEnableServerParamsBodyMetadata
type DoAddNodeEnableServerParamsBodyMetadata struct {

	// node name
	NodeName string `json:"NodeName,omitempty"`

	// server app
	ServerApp []string `json:"ServerApp"`
}

// Validate validates this do add node enable server params body metadata
func (o *DoAddNodeEnableServerParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DoAddNodeEnableServerParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DoAddNodeEnableServerParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res DoAddNodeEnableServerParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
