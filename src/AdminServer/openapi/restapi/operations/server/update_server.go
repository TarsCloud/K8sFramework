// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateServerHandlerFunc turns a function with the right signature into a update server handler
type UpdateServerHandlerFunc func(UpdateServerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateServerHandlerFunc) Handle(params UpdateServerParams) middleware.Responder {
	return fn(params)
}

// UpdateServerHandler interface for that can handle valid update server params
type UpdateServerHandler interface {
	Handle(UpdateServerParams) middleware.Responder
}

// NewUpdateServer creates a new http.Handler for the update server operation
func NewUpdateServer(ctx *middleware.Context, handler UpdateServerHandler) *UpdateServer {
	return &UpdateServer{Context: ctx, Handler: handler}
}

/*UpdateServer swagger:route PATCH /servers server k8s updateServer

更新服务，web=/server_update

*/
type UpdateServer struct {
	Context *middleware.Context
	Handler UpdateServerHandler
}

func (o *UpdateServer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateServerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateServerBody update server body
//
// swagger:model UpdateServerBody
type UpdateServerBody struct {

	// metadata
	Metadata *UpdateServerParamsBodyMetadata `json:"metadata,omitempty"`

	// target
	Target *UpdateServerParamsBodyTarget `json:"target,omitempty"`
}

// Validate validates this update server body
func (o *UpdateServerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServerBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateServerBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerBody) UnmarshalBinary(b []byte) error {
	var res UpdateServerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateServerOKBody update server o k body
//
// swagger:model UpdateServerOKBody
type UpdateServerOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this update server o k body
func (o *UpdateServerOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateServerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateServerParamsBodyMetadata update server params body metadata
//
// swagger:model UpdateServerParamsBodyMetadata
type UpdateServerParamsBodyMetadata struct {

	// server Id
	// Required: true
	ServerID *string `json:"ServerId"`
}

// Validate validates this update server params body metadata
func (o *UpdateServerParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServerParamsBodyMetadata) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"ServerId", "body", o.ServerID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res UpdateServerParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateServerParamsBodyTarget update server params body target
//
// swagger:model UpdateServerParamsBodyTarget
type UpdateServerParamsBodyTarget struct {

	// server type
	ServerType string `json:"ServerType,omitempty"`
}

// Validate validates this update server params body target
func (o *UpdateServerParamsBodyTarget) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerParamsBodyTarget) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerParamsBodyTarget) UnmarshalBinary(b []byte) error {
	var res UpdateServerParamsBodyTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
