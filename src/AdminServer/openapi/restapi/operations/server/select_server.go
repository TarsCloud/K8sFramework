// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectServerHandlerFunc turns a function with the right signature into a select server handler
type SelectServerHandlerFunc func(SelectServerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectServerHandlerFunc) Handle(params SelectServerParams) middleware.Responder {
	return fn(params)
}

// SelectServerHandler interface for that can handle valid select server params
type SelectServerHandler interface {
	Handle(SelectServerParams) middleware.Responder
}

// NewSelectServer creates a new http.Handler for the select server operation
func NewSelectServer(ctx *middleware.Context, handler SelectServerHandler) *SelectServer {
	return &SelectServer{Context: ctx, Handler: handler}
}

/*SelectServer swagger:route GET /servers server k8s selectServer

拉取服务，web=/server_list

columns key=['ServerId', 'ServerApp', 'ServerName', 'ServerType']

*/
type SelectServer struct {
	Context *middleware.Context
	Handler SelectServerHandler
}

func (o *SelectServer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectServerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
