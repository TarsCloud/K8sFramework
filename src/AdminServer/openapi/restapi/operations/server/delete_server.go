// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteServerHandlerFunc turns a function with the right signature into a delete server handler
type DeleteServerHandlerFunc func(DeleteServerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteServerHandlerFunc) Handle(params DeleteServerParams) middleware.Responder {
	return fn(params)
}

// DeleteServerHandler interface for that can handle valid delete server params
type DeleteServerHandler interface {
	Handle(DeleteServerParams) middleware.Responder
}

// NewDeleteServer creates a new http.Handler for the delete server operation
func NewDeleteServer(ctx *middleware.Context, handler DeleteServerHandler) *DeleteServer {
	return &DeleteServer{Context: ctx, Handler: handler}
}

/*DeleteServer swagger:route DELETE /servers server k8s deleteServer

下线服务，web=/server_undeploy

*/
type DeleteServer struct {
	Context *middleware.Context
	Handler DeleteServerHandler
}

func (o *DeleteServer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteServerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteServerBody delete server body
//
// swagger:model DeleteServerBody
type DeleteServerBody struct {

	// metadata
	Metadata *DeleteServerParamsBodyMetadata `json:"metadata,omitempty"`
}

// Validate validates this delete server body
func (o *DeleteServerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteServerBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteServerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteServerBody) UnmarshalBinary(b []byte) error {
	var res DeleteServerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteServerOKBody delete server o k body
//
// swagger:model DeleteServerOKBody
type DeleteServerOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this delete server o k body
func (o *DeleteServerOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteServerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteServerOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteServerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteServerParamsBodyMetadata delete server params body metadata
//
// swagger:model DeleteServerParamsBodyMetadata
type DeleteServerParamsBodyMetadata struct {

	// server Id
	// Required: true
	ServerID []string `json:"ServerId"`
}

// Validate validates this delete server params body metadata
func (o *DeleteServerParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteServerParamsBodyMetadata) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"ServerId", "body", o.ServerID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteServerParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteServerParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res DeleteServerParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
