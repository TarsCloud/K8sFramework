// Code generated by go-swagger; DO NOT EDIT.

package business

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectBusinessHandlerFunc turns a function with the right signature into a select business handler
type SelectBusinessHandlerFunc func(SelectBusinessParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectBusinessHandlerFunc) Handle(params SelectBusinessParams) middleware.Responder {
	return fn(params)
}

// SelectBusinessHandler interface for that can handle valid select business params
type SelectBusinessHandler interface {
	Handle(SelectBusinessParams) middleware.Responder
}

// NewSelectBusiness creates a new http.Handler for the select business operation
func NewSelectBusiness(ctx *middleware.Context, handler SelectBusinessHandler) *SelectBusiness {
	return &SelectBusiness{Context: ctx, Handler: handler}
}

/*SelectBusiness swagger:route GET /businesses business k8s selectBusiness

拉取业务列表，web=/business_select

columns key=['BusinessName', 'BusinessShow', 'BusinessMark', 'BusinessOrder', 'CreateTime', 'CreatePerson'

*/
type SelectBusiness struct {
	Context *middleware.Context
	Handler SelectBusinessHandler
}

func (o *SelectBusiness) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectBusinessParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
