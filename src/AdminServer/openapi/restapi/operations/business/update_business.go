// Code generated by go-swagger; DO NOT EDIT.

package business

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateBusinessHandlerFunc turns a function with the right signature into a update business handler
type UpdateBusinessHandlerFunc func(UpdateBusinessParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateBusinessHandlerFunc) Handle(params UpdateBusinessParams) middleware.Responder {
	return fn(params)
}

// UpdateBusinessHandler interface for that can handle valid update business params
type UpdateBusinessHandler interface {
	Handle(UpdateBusinessParams) middleware.Responder
}

// NewUpdateBusiness creates a new http.Handler for the update business operation
func NewUpdateBusiness(ctx *middleware.Context, handler UpdateBusinessHandler) *UpdateBusiness {
	return &UpdateBusiness{Context: ctx, Handler: handler}
}

/*UpdateBusiness swagger:route PATCH /businesses business k8s updateBusiness

更新业务列表，web=/business_update

*/
type UpdateBusiness struct {
	Context *middleware.Context
	Handler UpdateBusinessHandler
}

func (o *UpdateBusiness) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateBusinessParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateBusinessBody update business body
//
// swagger:model UpdateBusinessBody
type UpdateBusinessBody struct {

	// metadata
	Metadata *UpdateBusinessParamsBodyMetadata `json:"metadata,omitempty"`

	// target
	Target *UpdateBusinessParamsBodyTarget `json:"target,omitempty"`
}

// Validate validates this update business body
func (o *UpdateBusinessBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateBusinessBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBusinessBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateBusinessBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateBusinessBody) UnmarshalBinary(b []byte) error {
	var res UpdateBusinessBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateBusinessOKBody update business o k body
//
// swagger:model UpdateBusinessOKBody
type UpdateBusinessOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this update business o k body
func (o *UpdateBusinessOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateBusinessOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateBusinessOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateBusinessOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateBusinessParamsBodyMetadata update business params body metadata
//
// swagger:model UpdateBusinessParamsBodyMetadata
type UpdateBusinessParamsBodyMetadata struct {

	// business name
	// Required: true
	// Pattern: ^[a-zA-Z0-9.:_-]{1,128}\z
	BusinessName *string `json:"BusinessName"`
}

// Validate validates this update business params body metadata
func (o *UpdateBusinessParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBusinessName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateBusinessParamsBodyMetadata) validateBusinessName(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"BusinessName", "body", o.BusinessName); err != nil {
		return err
	}

	if err := validate.Pattern("Params"+"."+"metadata"+"."+"BusinessName", "body", string(*o.BusinessName), `^[a-zA-Z0-9.:_-]{1,128}\z`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateBusinessParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateBusinessParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res UpdateBusinessParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateBusinessParamsBodyTarget update business params body target
//
// swagger:model UpdateBusinessParamsBodyTarget
type UpdateBusinessParamsBodyTarget struct {

	// business mark
	BusinessMark string `json:"BusinessMark,omitempty"`

	// business order
	// Maximum: 100
	// Minimum: 1
	BusinessOrder int32 `json:"BusinessOrder,omitempty"`

	// business show
	BusinessShow string `json:"BusinessShow,omitempty"`
}

// Validate validates this update business params body target
func (o *UpdateBusinessParamsBodyTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBusinessOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateBusinessParamsBodyTarget) validateBusinessOrder(formats strfmt.Registry) error {

	if swag.IsZero(o.BusinessOrder) { // not required
		return nil
	}

	if err := validate.MinimumInt("Params"+"."+"target"+"."+"BusinessOrder", "body", int64(o.BusinessOrder), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("Params"+"."+"target"+"."+"BusinessOrder", "body", int64(o.BusinessOrder), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateBusinessParamsBodyTarget) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateBusinessParamsBodyTarget) UnmarshalBinary(b []byte) error {
	var res UpdateBusinessParamsBodyTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
