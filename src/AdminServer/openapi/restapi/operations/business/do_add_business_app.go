// Code generated by go-swagger; DO NOT EDIT.

package business

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DoAddBusinessAppHandlerFunc turns a function with the right signature into a do add business app handler
type DoAddBusinessAppHandlerFunc func(DoAddBusinessAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DoAddBusinessAppHandlerFunc) Handle(params DoAddBusinessAppParams) middleware.Responder {
	return fn(params)
}

// DoAddBusinessAppHandler interface for that can handle valid do add business app params
type DoAddBusinessAppHandler interface {
	Handle(DoAddBusinessAppParams) middleware.Responder
}

// NewDoAddBusinessApp creates a new http.Handler for the do add business app operation
func NewDoAddBusinessApp(ctx *middleware.Context, handler DoAddBusinessAppHandler) *DoAddBusinessApp {
	return &DoAddBusinessApp{Context: ctx, Handler: handler}
}

/*DoAddBusinessApp swagger:route POST /businesses/apps business k8s doAddBusinessApp

创建业务对应的App列表，web=/business_add_app

*/
type DoAddBusinessApp struct {
	Context *middleware.Context
	Handler DoAddBusinessAppHandler
}

func (o *DoAddBusinessApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDoAddBusinessAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DoAddBusinessAppBody do add business app body
//
// swagger:model DoAddBusinessAppBody
type DoAddBusinessAppBody struct {

	// metadata
	Metadata *DoAddBusinessAppParamsBodyMetadata `json:"metadata,omitempty"`
}

// Validate validates this do add business app body
func (o *DoAddBusinessAppBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DoAddBusinessAppBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DoAddBusinessAppBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DoAddBusinessAppBody) UnmarshalBinary(b []byte) error {
	var res DoAddBusinessAppBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DoAddBusinessAppOKBody do add business app o k body
//
// swagger:model DoAddBusinessAppOKBody
type DoAddBusinessAppOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this do add business app o k body
func (o *DoAddBusinessAppOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DoAddBusinessAppOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DoAddBusinessAppOKBody) UnmarshalBinary(b []byte) error {
	var res DoAddBusinessAppOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DoAddBusinessAppParamsBodyMetadata do add business app params body metadata
//
// swagger:model DoAddBusinessAppParamsBodyMetadata
type DoAddBusinessAppParamsBodyMetadata struct {

	// app name
	AppName []string `json:"AppName"`

	// business name
	// Pattern: ^[a-zA-Z0-9.:_-]{1,128}\z
	BusinessName string `json:"BusinessName,omitempty"`
}

// Validate validates this do add business app params body metadata
func (o *DoAddBusinessAppParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBusinessName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DoAddBusinessAppParamsBodyMetadata) validateAppName(formats strfmt.Registry) error {

	if swag.IsZero(o.AppName) { // not required
		return nil
	}

	for i := 0; i < len(o.AppName); i++ {

		if err := validate.Pattern("Params"+"."+"metadata"+"."+"AppName"+"."+strconv.Itoa(i), "body", string(o.AppName[i]), `^[a-zA-Z0-9]{1,24}\z`); err != nil {
			return err
		}

	}

	return nil
}

func (o *DoAddBusinessAppParamsBodyMetadata) validateBusinessName(formats strfmt.Registry) error {

	if swag.IsZero(o.BusinessName) { // not required
		return nil
	}

	if err := validate.Pattern("Params"+"."+"metadata"+"."+"BusinessName", "body", string(o.BusinessName), `^[a-zA-Z0-9.:_-]{1,128}\z`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DoAddBusinessAppParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DoAddBusinessAppParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res DoAddBusinessAppParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
