// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectNodeHandlerFunc turns a function with the right signature into a select node handler
type SelectNodeHandlerFunc func(SelectNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectNodeHandlerFunc) Handle(params SelectNodeParams) middleware.Responder {
	return fn(params)
}

// SelectNodeHandler interface for that can handle valid select node params
type SelectNodeHandler interface {
	Handle(SelectNodeParams) middleware.Responder
}

// NewSelectNode creates a new http.Handler for the select node operation
func NewSelectNode(ctx *middleware.Context, handler SelectNodeHandler) *SelectNode {
	return &SelectNode{Context: ctx, Handler: handler}
}

/*SelectNode swagger:route GET /nodes node mysql selectNode

拉取节点列表，web=/node_select

columns key=['NodeName', 'NodeAbility', 'NodePublic', 'NodeAddress', 'NodInfo']

*/
type SelectNode struct {
	Context *middleware.Context
	Handler SelectNodeHandler
}

func (o *SelectNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectNodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
