// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteTemplateHandlerFunc turns a function with the right signature into a delete template handler
type DeleteTemplateHandlerFunc func(DeleteTemplateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTemplateHandlerFunc) Handle(params DeleteTemplateParams) middleware.Responder {
	return fn(params)
}

// DeleteTemplateHandler interface for that can handle valid delete template params
type DeleteTemplateHandler interface {
	Handle(DeleteTemplateParams) middleware.Responder
}

// NewDeleteTemplate creates a new http.Handler for the delete template operation
func NewDeleteTemplate(ctx *middleware.Context, handler DeleteTemplateHandler) *DeleteTemplate {
	return &DeleteTemplate{Context: ctx, Handler: handler}
}

/*DeleteTemplate swagger:route DELETE /templates template k8s deleteTemplate

删除服务模板，web=/template_delete

*/
type DeleteTemplate struct {
	Context *middleware.Context
	Handler DeleteTemplateHandler
}

func (o *DeleteTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTemplateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteTemplateBody delete template body
//
// swagger:model DeleteTemplateBody
type DeleteTemplateBody struct {

	// metadata
	Metadata *DeleteTemplateParamsBodyMetadata `json:"metadata,omitempty"`
}

// Validate validates this delete template body
func (o *DeleteTemplateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTemplateBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTemplateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTemplateBody) UnmarshalBinary(b []byte) error {
	var res DeleteTemplateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteTemplateOKBody delete template o k body
//
// swagger:model DeleteTemplateOKBody
type DeleteTemplateOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this delete template o k body
func (o *DeleteTemplateOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTemplateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTemplateOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteTemplateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteTemplateParamsBodyMetadata delete template params body metadata
//
// swagger:model DeleteTemplateParamsBodyMetadata
type DeleteTemplateParamsBodyMetadata struct {

	// template Id
	// Required: true
	TemplateID *string `json:"TemplateId"`
}

// Validate validates this delete template params body metadata
func (o *DeleteTemplateParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTemplateParamsBodyMetadata) validateTemplateID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"TemplateId", "body", o.TemplateID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTemplateParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTemplateParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res DeleteTemplateParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
