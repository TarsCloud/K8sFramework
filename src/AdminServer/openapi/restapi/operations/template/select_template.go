// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectTemplateHandlerFunc turns a function with the right signature into a select template handler
type SelectTemplateHandlerFunc func(SelectTemplateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectTemplateHandlerFunc) Handle(params SelectTemplateParams) middleware.Responder {
	return fn(params)
}

// SelectTemplateHandler interface for that can handle valid select template params
type SelectTemplateHandler interface {
	Handle(SelectTemplateParams) middleware.Responder
}

// NewSelectTemplate creates a new http.Handler for the select template operation
func NewSelectTemplate(ctx *middleware.Context, handler SelectTemplateHandler) *SelectTemplate {
	return &SelectTemplate{Context: ctx, Handler: handler}
}

/*SelectTemplate swagger:route GET /templates template k8s selectTemplate

拉取服务模板，web=/template_select

columns key=['TemplateId', 'TemplateName', 'TemplateParent', 'TemplateContent']

*/
type SelectTemplate struct {
	Context *middleware.Context
	Handler SelectTemplateHandler
}

func (o *SelectTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectTemplateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
