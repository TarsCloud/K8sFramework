// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateTemplateHandlerFunc turns a function with the right signature into a update template handler
type UpdateTemplateHandlerFunc func(UpdateTemplateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateTemplateHandlerFunc) Handle(params UpdateTemplateParams) middleware.Responder {
	return fn(params)
}

// UpdateTemplateHandler interface for that can handle valid update template params
type UpdateTemplateHandler interface {
	Handle(UpdateTemplateParams) middleware.Responder
}

// NewUpdateTemplate creates a new http.Handler for the update template operation
func NewUpdateTemplate(ctx *middleware.Context, handler UpdateTemplateHandler) *UpdateTemplate {
	return &UpdateTemplate{Context: ctx, Handler: handler}
}

/*UpdateTemplate swagger:route PATCH /templates template k8s updateTemplate

更新服务模板，web=/template_update

*/
type UpdateTemplate struct {
	Context *middleware.Context
	Handler UpdateTemplateHandler
}

func (o *UpdateTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateTemplateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateTemplateBody update template body
//
// swagger:model UpdateTemplateBody
type UpdateTemplateBody struct {

	// metadata
	Metadata *UpdateTemplateParamsBodyMetadata `json:"metadata,omitempty"`

	// target
	Target *UpdateTemplateParamsBodyTarget `json:"target,omitempty"`
}

// Validate validates this update template body
func (o *UpdateTemplateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateTemplateBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateTemplateBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateTemplateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateTemplateBody) UnmarshalBinary(b []byte) error {
	var res UpdateTemplateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateTemplateOKBody update template o k body
//
// swagger:model UpdateTemplateOKBody
type UpdateTemplateOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this update template o k body
func (o *UpdateTemplateOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateTemplateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateTemplateOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateTemplateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateTemplateParamsBodyMetadata update template params body metadata
//
// swagger:model UpdateTemplateParamsBodyMetadata
type UpdateTemplateParamsBodyMetadata struct {

	// template Id
	// Required: true
	TemplateID *string `json:"TemplateId"`
}

// Validate validates this update template params body metadata
func (o *UpdateTemplateParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateTemplateParamsBodyMetadata) validateTemplateID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"TemplateId", "body", o.TemplateID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateTemplateParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateTemplateParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res UpdateTemplateParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateTemplateParamsBodyTarget update template params body target
//
// swagger:model UpdateTemplateParamsBodyTarget
type UpdateTemplateParamsBodyTarget struct {

	// template content
	TemplateContent string `json:"TemplateContent,omitempty"`

	// template parent
	TemplateParent string `json:"TemplateParent,omitempty"`
}

// Validate validates this update template params body target
func (o *UpdateTemplateParamsBodyTarget) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateTemplateParamsBodyTarget) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateTemplateParamsBodyTarget) UnmarshalBinary(b []byte) error {
	var res UpdateTemplateParamsBodyTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
