// Code generated by go-swagger; DO NOT EDIT.

package shell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSSHPodShellParams creates a new SSHPodShellParams object
// no default values defined in spec.
func NewSSHPodShellParams() SSHPodShellParams {

	return SSHPodShellParams{}
}

// SSHPodShellParams contains all the bound params for the ssh pod shell operation
// typically these are obtained from a http.Request
//
// swagger:parameters sshPodShell
type SSHPodShellParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	AppName *string
	/*
	  In: query
	*/
	History *bool
	/*
	  In: query
	*/
	NodeIP *string
	/*
	  In: query
	*/
	PodName *string
	/*
	  In: query
	*/
	ServerName *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSSHPodShellParams() beforehand.
func (o *SSHPodShellParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAppName, qhkAppName, _ := qs.GetOK("AppName")
	if err := o.bindAppName(qAppName, qhkAppName, route.Formats); err != nil {
		res = append(res, err)
	}

	qHistory, qhkHistory, _ := qs.GetOK("History")
	if err := o.bindHistory(qHistory, qhkHistory, route.Formats); err != nil {
		res = append(res, err)
	}

	qNodeIP, qhkNodeIP, _ := qs.GetOK("NodeIP")
	if err := o.bindNodeIP(qNodeIP, qhkNodeIP, route.Formats); err != nil {
		res = append(res, err)
	}

	qPodName, qhkPodName, _ := qs.GetOK("PodName")
	if err := o.bindPodName(qPodName, qhkPodName, route.Formats); err != nil {
		res = append(res, err)
	}

	qServerName, qhkServerName, _ := qs.GetOK("ServerName")
	if err := o.bindServerName(qServerName, qhkServerName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAppName binds and validates parameter AppName from query.
func (o *SSHPodShellParams) bindAppName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.AppName = &raw

	return nil
}

// bindHistory binds and validates parameter History from query.
func (o *SSHPodShellParams) bindHistory(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("History", "query", "bool", raw)
	}
	o.History = &value

	return nil
}

// bindNodeIP binds and validates parameter NodeIP from query.
func (o *SSHPodShellParams) bindNodeIP(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.NodeIP = &raw

	return nil
}

// bindPodName binds and validates parameter PodName from query.
func (o *SSHPodShellParams) bindPodName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PodName = &raw

	return nil
}

// bindServerName binds and validates parameter ServerName from query.
func (o *SSHPodShellParams) bindServerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ServerName = &raw

	return nil
}
