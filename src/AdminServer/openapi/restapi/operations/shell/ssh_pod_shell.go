// Code generated by go-swagger; DO NOT EDIT.

package shell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SSHPodShellHandlerFunc turns a function with the right signature into a ssh pod shell handler
type SSHPodShellHandlerFunc func(SSHPodShellParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SSHPodShellHandlerFunc) Handle(params SSHPodShellParams) middleware.Responder {
	return fn(params)
}

// SSHPodShellHandler interface for that can handle valid ssh pod shell params
type SSHPodShellHandler interface {
	Handle(SSHPodShellParams) middleware.Responder
}

// NewSSHPodShell creates a new http.Handler for the ssh pod shell operation
func NewSSHPodShell(ctx *middleware.Context, handler SSHPodShellHandler) *SSHPodShell {
	return &SSHPodShell{Context: ctx, Handler: handler}
}

/*SSHPodShell swagger:route GET /shell shell sshPodShell

kube shell进入到pod容器中

*/
type SSHPodShell struct {
	Context *middleware.Context
	Handler SSHPodShellHandler
}

func (o *SSHPodShell) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSSHPodShellParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SSHPodShellOKBody SSH pod shell o k body
//
// swagger:model SSHPodShellOKBody
type SSHPodShellOKBody struct {

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this SSH pod shell o k body
func (o *SSHPodShellOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SSHPodShellOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SSHPodShellOKBody) UnmarshalBinary(b []byte) error {
	var res SSHPodShellOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
