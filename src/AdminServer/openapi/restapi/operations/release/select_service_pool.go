// Code generated by go-swagger; DO NOT EDIT.

package release

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectServicePoolHandlerFunc turns a function with the right signature into a select service pool handler
type SelectServicePoolHandlerFunc func(SelectServicePoolParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectServicePoolHandlerFunc) Handle(params SelectServicePoolParams) middleware.Responder {
	return fn(params)
}

// SelectServicePoolHandler interface for that can handle valid select service pool params
type SelectServicePoolHandler interface {
	Handle(SelectServicePoolParams) middleware.Responder
}

// NewSelectServicePool creates a new http.Handler for the select service pool operation
func NewSelectServicePool(ctx *middleware.Context, handler SelectServicePoolHandler) *SelectServicePool {
	return &SelectServicePool{Context: ctx, Handler: handler}
}

/*SelectServicePool swagger:route GET /releases release k8s selectServicePool

获取server已发布版本列表，web=/patch_list

columns key=['ServiceId', 'ServerId', 'ServerApp', 'ServerName', 'ServiceVersion', 'ServiceImage']

*/
type SelectServicePool struct {
	Context *middleware.Context
	Handler SelectServicePoolHandler
}

func (o *SelectServicePool) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectServicePoolParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
