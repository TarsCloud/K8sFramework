// Code generated by go-swagger; DO NOT EDIT.

package release

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateServicePoolHandlerFunc turns a function with the right signature into a create service pool handler
type CreateServicePoolHandlerFunc func(CreateServicePoolParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateServicePoolHandlerFunc) Handle(params CreateServicePoolParams) middleware.Responder {
	return fn(params)
}

// CreateServicePoolHandler interface for that can handle valid create service pool params
type CreateServicePoolHandler interface {
	Handle(CreateServicePoolParams) middleware.Responder
}

// NewCreateServicePool creates a new http.Handler for the create service pool operation
func NewCreateServicePool(ctx *middleware.Context, handler CreateServicePoolHandler) *CreateServicePool {
	return &CreateServicePool{Context: ctx, Handler: handler}
}

/*CreateServicePool swagger:route POST /releases release k8s createServicePool

创建server发布的版本，web=/patch_upload_status中的ServicePoolCreate()调用

*/
type CreateServicePool struct {
	Context *middleware.Context
	Handler CreateServicePoolHandler
}

func (o *CreateServicePool) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateServicePoolParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateServicePoolBody create service pool body
//
// swagger:model CreateServicePoolBody
type CreateServicePoolBody struct {

	// metadata
	Metadata *CreateServicePoolParamsBodyMetadata `json:"metadata,omitempty"`
}

// Validate validates this create service pool body
func (o *CreateServicePoolBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServicePoolBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateServicePoolBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServicePoolBody) UnmarshalBinary(b []byte) error {
	var res CreateServicePoolBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateServicePoolOKBody create service pool o k body
//
// swagger:model CreateServicePoolOKBody
type CreateServicePoolOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this create service pool o k body
func (o *CreateServicePoolOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateServicePoolOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServicePoolOKBody) UnmarshalBinary(b []byte) error {
	var res CreateServicePoolOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateServicePoolParamsBodyMetadata create service pool params body metadata
//
// swagger:model CreateServicePoolParamsBodyMetadata
type CreateServicePoolParamsBodyMetadata struct {

	// active person
	ActivePerson string `json:"ActivePerson,omitempty"`

	// active reason
	ActiveReason string `json:"ActiveReason,omitempty"`

	// server Id
	// Required: true
	ServerID *string `json:"ServerId"`

	// server type
	// Required: true
	ServerType *string `json:"ServerType"`

	// service image
	// Required: true
	ServiceImage *string `json:"ServiceImage"`

	// service mark
	ServiceMark string `json:"ServiceMark,omitempty"`
}

// Validate validates this create service pool params body metadata
func (o *CreateServicePoolParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServerType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServiceImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServicePoolParamsBodyMetadata) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"ServerId", "body", o.ServerID); err != nil {
		return err
	}

	return nil
}

func (o *CreateServicePoolParamsBodyMetadata) validateServerType(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"ServerType", "body", o.ServerType); err != nil {
		return err
	}

	return nil
}

func (o *CreateServicePoolParamsBodyMetadata) validateServiceImage(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"ServiceImage", "body", o.ServiceImage); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateServicePoolParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServicePoolParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res CreateServicePoolParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
