// Code generated by go-swagger; DO NOT EDIT.

package release

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectServiceEnabledHandlerFunc turns a function with the right signature into a select service enabled handler
type SelectServiceEnabledHandlerFunc func(SelectServiceEnabledParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectServiceEnabledHandlerFunc) Handle(params SelectServiceEnabledParams) middleware.Responder {
	return fn(params)
}

// SelectServiceEnabledHandler interface for that can handle valid select service enabled params
type SelectServiceEnabledHandler interface {
	Handle(SelectServiceEnabledParams) middleware.Responder
}

// NewSelectServiceEnabled creates a new http.Handler for the select service enabled operation
func NewSelectServiceEnabled(ctx *middleware.Context, handler SelectServiceEnabledHandler) *SelectServiceEnabled {
	return &SelectServiceEnabled{Context: ctx, Handler: handler}
}

/*SelectServiceEnabled swagger:route GET /servers/releases release k8s selectServiceEnabled

获取当前server的版本，web=/patch_enabled

columns key=['ServerId', 'ServerApp', 'ServerName', 'ServiceVersion', 'ServiceImage', 'EnablePerson', 'EnableTime']

*/
type SelectServiceEnabled struct {
	Context *middleware.Context
	Handler SelectServiceEnabledHandler
}

func (o *SelectServiceEnabled) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectServiceEnabledParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
