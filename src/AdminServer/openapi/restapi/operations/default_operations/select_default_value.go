// Code generated by go-swagger; DO NOT EDIT.

package default_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"tafadmin/openapi/models"
)

// SelectDefaultValueHandlerFunc turns a function with the right signature into a select default value handler
type SelectDefaultValueHandlerFunc func(SelectDefaultValueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectDefaultValueHandlerFunc) Handle(params SelectDefaultValueParams) middleware.Responder {
	return fn(params)
}

// SelectDefaultValueHandler interface for that can handle valid select default value params
type SelectDefaultValueHandler interface {
	Handle(SelectDefaultValueParams) middleware.Responder
}

// NewSelectDefaultValue creates a new http.Handler for the select default value operation
func NewSelectDefaultValue(ctx *middleware.Context, handler SelectDefaultValueHandler) *SelectDefaultValue {
	return &SelectDefaultValue{Context: ctx, Handler: handler}
}

/*SelectDefaultValue swagger:route GET /defaults default k8s selectDefaultValue

拉取默认参数， web=/default

*/
type SelectDefaultValue struct {
	Context *middleware.Context
	Handler SelectDefaultValueHandler
}

func (o *SelectDefaultValue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectDefaultValueParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SelectDefaultValueOKBody select default value o k body
//
// swagger:model SelectDefaultValueOKBody
type SelectDefaultValueOKBody struct {

	// result
	Result *SelectDefaultValueOKBodyResult `json:"result,omitempty"`
}

// Validate validates this select default value o k body
func (o *SelectDefaultValueOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SelectDefaultValueOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectDefaultValueOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SelectDefaultValueOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SelectDefaultValueOKBody) UnmarshalBinary(b []byte) error {
	var res SelectDefaultValueOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SelectDefaultValueOKBodyResult select default value o k body result
//
// swagger:model SelectDefaultValueOKBodyResult
type SelectDefaultValueOKBodyResult struct {

	// k8 s node selector kind
	K8SNodeSelectorKind models.ArrayString `json:"K8SNodeSelectorKind,omitempty"`

	// server k8 s
	ServerK8S *models.ServerK8S `json:"ServerK8S,omitempty"`

	// server option
	ServerOption *models.ServerOption `json:"ServerOption,omitempty"`

	// server servant elem
	ServerServantElem *models.ServerServantElem `json:"ServerServantElem,omitempty"`

	// server type optional
	ServerTypeOptional models.ArrayString `json:"ServerTypeOptional,omitempty"`
}

// Validate validates this select default value o k body result
func (o *SelectDefaultValueOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateK8SNodeSelectorKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServerK8S(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServerOption(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServerServantElem(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServerTypeOptional(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SelectDefaultValueOKBodyResult) validateK8SNodeSelectorKind(formats strfmt.Registry) error {

	if swag.IsZero(o.K8SNodeSelectorKind) { // not required
		return nil
	}

	if err := o.K8SNodeSelectorKind.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("selectDefaultValueOK" + "." + "result" + "." + "K8SNodeSelectorKind")
		}
		return err
	}

	return nil
}

func (o *SelectDefaultValueOKBodyResult) validateServerK8S(formats strfmt.Registry) error {

	if swag.IsZero(o.ServerK8S) { // not required
		return nil
	}

	if o.ServerK8S != nil {
		if err := o.ServerK8S.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectDefaultValueOK" + "." + "result" + "." + "ServerK8S")
			}
			return err
		}
	}

	return nil
}

func (o *SelectDefaultValueOKBodyResult) validateServerOption(formats strfmt.Registry) error {

	if swag.IsZero(o.ServerOption) { // not required
		return nil
	}

	if o.ServerOption != nil {
		if err := o.ServerOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectDefaultValueOK" + "." + "result" + "." + "ServerOption")
			}
			return err
		}
	}

	return nil
}

func (o *SelectDefaultValueOKBodyResult) validateServerServantElem(formats strfmt.Registry) error {

	if swag.IsZero(o.ServerServantElem) { // not required
		return nil
	}

	if o.ServerServantElem != nil {
		if err := o.ServerServantElem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectDefaultValueOK" + "." + "result" + "." + "ServerServantElem")
			}
			return err
		}
	}

	return nil
}

func (o *SelectDefaultValueOKBodyResult) validateServerTypeOptional(formats strfmt.Registry) error {

	if swag.IsZero(o.ServerTypeOptional) { // not required
		return nil
	}

	if err := o.ServerTypeOptional.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("selectDefaultValueOK" + "." + "result" + "." + "ServerTypeOptional")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SelectDefaultValueOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SelectDefaultValueOKBodyResult) UnmarshalBinary(b []byte) error {
	var res SelectDefaultValueOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
