// Code generated by go-swagger; DO NOT EDIT.

package server_k8s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectK8SHandlerFunc turns a function with the right signature into a select k8 s handler
type SelectK8SHandlerFunc func(SelectK8SParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectK8SHandlerFunc) Handle(params SelectK8SParams) middleware.Responder {
	return fn(params)
}

// SelectK8SHandler interface for that can handle valid select k8 s params
type SelectK8SHandler interface {
	Handle(SelectK8SParams) middleware.Responder
}

// NewSelectK8S creates a new http.Handler for the select k8 s operation
func NewSelectK8S(ctx *middleware.Context, handler SelectK8SHandler) *SelectK8S {
	return &SelectK8S{Context: ctx, Handler: handler}
}

/*SelectK8S swagger:route GET /servers/k8s server-k8s k8s selectK8S

获取k8s属性，web=/server_k8s_select

columns key=['ServerId', 'ServerApp', 'ServerName', 'Replicas', 'NodeSelector', 'HostIpc', 'HostNetwork', 'HostPort']

*/
type SelectK8S struct {
	Context *middleware.Context
	Handler SelectK8SHandler
}

func (o *SelectK8S) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectK8SParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
