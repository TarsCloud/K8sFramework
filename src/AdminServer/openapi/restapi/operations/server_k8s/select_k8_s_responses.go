// Code generated by go-swagger; DO NOT EDIT.

package server_k8s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"tarsadmin/openapi/models"
)

// SelectK8SOKCode is the HTTP code returned for type SelectK8SOK
const SelectK8SOKCode int = 200

/*SelectK8SOK OK

swagger:response selectK8SOK
*/
type SelectK8SOK struct {

	/*
	  In: Body
	*/
	Payload *models.SelectResult `json:"body,omitempty"`
}

// NewSelectK8SOK creates SelectK8SOK with default headers values
func NewSelectK8SOK() *SelectK8SOK {

	return &SelectK8SOK{}
}

// WithPayload adds the payload to the select k8 s o k response
func (o *SelectK8SOK) WithPayload(payload *models.SelectResult) *SelectK8SOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the select k8 s o k response
func (o *SelectK8SOK) SetPayload(payload *models.SelectResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SelectK8SOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SelectK8SInternalServerErrorCode is the HTTP code returned for type SelectK8SInternalServerError
const SelectK8SInternalServerErrorCode int = 500

/*SelectK8SInternalServerError 内部错误

swagger:response selectK8SInternalServerError
*/
type SelectK8SInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSelectK8SInternalServerError creates SelectK8SInternalServerError with default headers values
func NewSelectK8SInternalServerError() *SelectK8SInternalServerError {

	return &SelectK8SInternalServerError{}
}

// WithPayload adds the payload to the select k8 s internal server error response
func (o *SelectK8SInternalServerError) WithPayload(payload *models.Error) *SelectK8SInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the select k8 s internal server error response
func (o *SelectK8SInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SelectK8SInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
