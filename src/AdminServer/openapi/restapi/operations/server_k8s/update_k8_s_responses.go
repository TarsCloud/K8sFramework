// Code generated by go-swagger; DO NOT EDIT.

package server_k8s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"tarsadmin/openapi/models"
)

// UpdateK8SOKCode is the HTTP code returned for type UpdateK8SOK
const UpdateK8SOKCode int = 200

/*UpdateK8SOK OK

swagger:response updateK8SOK
*/
type UpdateK8SOK struct {

	/*
	  In: Body
	*/
	Payload *UpdateK8SOKBody `json:"body,omitempty"`
}

// NewUpdateK8SOK creates UpdateK8SOK with default headers values
func NewUpdateK8SOK() *UpdateK8SOK {

	return &UpdateK8SOK{}
}

// WithPayload adds the payload to the update k8 s o k response
func (o *UpdateK8SOK) WithPayload(payload *UpdateK8SOKBody) *UpdateK8SOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update k8 s o k response
func (o *UpdateK8SOK) SetPayload(payload *UpdateK8SOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateK8SOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateK8SInternalServerErrorCode is the HTTP code returned for type UpdateK8SInternalServerError
const UpdateK8SInternalServerErrorCode int = 500

/*UpdateK8SInternalServerError 内部错误

swagger:response updateK8SInternalServerError
*/
type UpdateK8SInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateK8SInternalServerError creates UpdateK8SInternalServerError with default headers values
func NewUpdateK8SInternalServerError() *UpdateK8SInternalServerError {

	return &UpdateK8SInternalServerError{}
}

// WithPayload adds the payload to the update k8 s internal server error response
func (o *UpdateK8SInternalServerError) WithPayload(payload *models.Error) *UpdateK8SInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update k8 s internal server error response
func (o *UpdateK8SInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateK8SInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
