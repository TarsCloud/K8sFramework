// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSelectAvailHostPortParams creates a new SelectAvailHostPortParams object
// no default values defined in spec.
func NewSelectAvailHostPortParams() SelectAvailHostPortParams {

	return SelectAvailHostPortParams{}
}

// SelectAvailHostPortParams contains all the bound params for the select avail host port operation
// typically these are obtained from a http.Request
//
// swagger:parameters selectAvailHostPort
type SelectAvailHostPortParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	NodeName *string
	/*
	  In: query
	*/
	Port *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSelectAvailHostPortParams() beforehand.
func (o *SelectAvailHostPortParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qNodeName, qhkNodeName, _ := qs.GetOK("NodeName")
	if err := o.bindNodeName(qNodeName, qhkNodeName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPort, qhkPort, _ := qs.GetOK("Port")
	if err := o.bindPort(qPort, qhkPort, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindNodeName binds and validates parameter NodeName from query.
func (o *SelectAvailHostPortParams) bindNodeName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.NodeName = &raw

	return nil
}

// bindPort binds and validates parameter Port from query.
func (o *SelectAvailHostPortParams) bindPort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("Port", "query", "int32", raw)
	}
	o.Port = &value

	return nil
}
