// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteServerConfigHandlerFunc turns a function with the right signature into a delete server config handler
type DeleteServerConfigHandlerFunc func(DeleteServerConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteServerConfigHandlerFunc) Handle(params DeleteServerConfigParams) middleware.Responder {
	return fn(params)
}

// DeleteServerConfigHandler interface for that can handle valid delete server config params
type DeleteServerConfigHandler interface {
	Handle(DeleteServerConfigParams) middleware.Responder
}

// NewDeleteServerConfig creates a new http.Handler for the delete server config operation
func NewDeleteServerConfig(ctx *middleware.Context, handler DeleteServerConfigHandler) *DeleteServerConfig {
	return &DeleteServerConfig{Context: ctx, Handler: handler}
}

/*DeleteServerConfig swagger:route DELETE /configs config k8s deleteServerConfig

删除配置，web=/server_config_delete

*/
type DeleteServerConfig struct {
	Context *middleware.Context
	Handler DeleteServerConfigHandler
}

func (o *DeleteServerConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteServerConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteServerConfigBody delete server config body
//
// swagger:model DeleteServerConfigBody
type DeleteServerConfigBody struct {

	// metadata
	Metadata *DeleteServerConfigParamsBodyMetadata `json:"metadata,omitempty"`
}

// Validate validates this delete server config body
func (o *DeleteServerConfigBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteServerConfigBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteServerConfigBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteServerConfigBody) UnmarshalBinary(b []byte) error {
	var res DeleteServerConfigBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteServerConfigOKBody delete server config o k body
//
// swagger:model DeleteServerConfigOKBody
type DeleteServerConfigOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this delete server config o k body
func (o *DeleteServerConfigOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteServerConfigOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteServerConfigOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteServerConfigOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteServerConfigParamsBodyMetadata delete server config params body metadata
//
// swagger:model DeleteServerConfigParamsBodyMetadata
type DeleteServerConfigParamsBodyMetadata struct {

	// config Id
	// Required: true
	ConfigID *string `json:"ConfigId"`
}

// Validate validates this delete server config params body metadata
func (o *DeleteServerConfigParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConfigID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteServerConfigParamsBodyMetadata) validateConfigID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"ConfigId", "body", o.ConfigID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteServerConfigParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteServerConfigParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res DeleteServerConfigParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
