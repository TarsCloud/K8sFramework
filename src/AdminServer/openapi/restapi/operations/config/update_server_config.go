// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateServerConfigHandlerFunc turns a function with the right signature into a update server config handler
type UpdateServerConfigHandlerFunc func(UpdateServerConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateServerConfigHandlerFunc) Handle(params UpdateServerConfigParams) middleware.Responder {
	return fn(params)
}

// UpdateServerConfigHandler interface for that can handle valid update server config params
type UpdateServerConfigHandler interface {
	Handle(UpdateServerConfigParams) middleware.Responder
}

// NewUpdateServerConfig creates a new http.Handler for the update server config operation
func NewUpdateServerConfig(ctx *middleware.Context, handler UpdateServerConfigHandler) *UpdateServerConfig {
	return &UpdateServerConfig{Context: ctx, Handler: handler}
}

/*UpdateServerConfig swagger:route PATCH /configs config k8s updateServerConfig

更新配置，web=/server_config_update

*/
type UpdateServerConfig struct {
	Context *middleware.Context
	Handler UpdateServerConfigHandler
}

func (o *UpdateServerConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateServerConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateServerConfigBody update server config body
//
// swagger:model UpdateServerConfigBody
type UpdateServerConfigBody struct {

	// metadata
	Metadata *UpdateServerConfigParamsBodyMetadata `json:"metadata,omitempty"`

	// target
	Target *UpdateServerConfigParamsBodyTarget `json:"target,omitempty"`
}

// Validate validates this update server config body
func (o *UpdateServerConfigBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServerConfigBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateServerConfigBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerConfigBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerConfigBody) UnmarshalBinary(b []byte) error {
	var res UpdateServerConfigBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateServerConfigOKBody update server config o k body
//
// swagger:model UpdateServerConfigOKBody
type UpdateServerConfigOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this update server config o k body
func (o *UpdateServerConfigOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerConfigOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerConfigOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateServerConfigOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateServerConfigParamsBodyMetadata update server config params body metadata
//
// swagger:model UpdateServerConfigParamsBodyMetadata
type UpdateServerConfigParamsBodyMetadata struct {

	// config Id
	// Required: true
	ConfigID *string `json:"ConfigId"`
}

// Validate validates this update server config params body metadata
func (o *UpdateServerConfigParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConfigID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServerConfigParamsBodyMetadata) validateConfigID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"ConfigId", "body", o.ConfigID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerConfigParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerConfigParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res UpdateServerConfigParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateServerConfigParamsBodyTarget update server config params body target
//
// swagger:model UpdateServerConfigParamsBodyTarget
type UpdateServerConfigParamsBodyTarget struct {

	// config content
	ConfigContent string `json:"ConfigContent,omitempty"`

	// config mark
	ConfigMark string `json:"ConfigMark,omitempty"`
}

// Validate validates this update server config params body target
func (o *UpdateServerConfigParamsBodyTarget) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerConfigParamsBodyTarget) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerConfigParamsBodyTarget) UnmarshalBinary(b []byte) error {
	var res UpdateServerConfigParamsBodyTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
