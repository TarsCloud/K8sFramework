// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectServerConfigHistoryHandlerFunc turns a function with the right signature into a select server config history handler
type SelectServerConfigHistoryHandlerFunc func(SelectServerConfigHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectServerConfigHistoryHandlerFunc) Handle(params SelectServerConfigHistoryParams) middleware.Responder {
	return fn(params)
}

// SelectServerConfigHistoryHandler interface for that can handle valid select server config history params
type SelectServerConfigHistoryHandler interface {
	Handle(SelectServerConfigHistoryParams) middleware.Responder
}

// NewSelectServerConfigHistory creates a new http.Handler for the select server config history operation
func NewSelectServerConfigHistory(ctx *middleware.Context, handler SelectServerConfigHistoryHandler) *SelectServerConfigHistory {
	return &SelectServerConfigHistory{Context: ctx, Handler: handler}
}

/*SelectServerConfigHistory swagger:route GET /configs/versions config k8s selectServerConfigHistory

拉取历史配置，web=/server_config_history_select

columns key=['ServerId', 'HistoryId', 'ConfigId', 'ConfigName', 'ConfigVersion', 'ConfigContent', 'CreatePerson', 'CreateTime', 'ConfigMark']

*/
type SelectServerConfigHistory struct {
	Context *middleware.Context
	Handler SelectServerConfigHistoryHandler
}

func (o *SelectServerConfigHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectServerConfigHistoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
