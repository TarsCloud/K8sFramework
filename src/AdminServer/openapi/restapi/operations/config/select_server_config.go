// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectServerConfigHandlerFunc turns a function with the right signature into a select server config handler
type SelectServerConfigHandlerFunc func(SelectServerConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectServerConfigHandlerFunc) Handle(params SelectServerConfigParams) middleware.Responder {
	return fn(params)
}

// SelectServerConfigHandler interface for that can handle valid select server config params
type SelectServerConfigHandler interface {
	Handle(SelectServerConfigParams) middleware.Responder
}

// NewSelectServerConfig creates a new http.Handler for the select server config operation
func NewSelectServerConfig(ctx *middleware.Context, handler SelectServerConfigHandler) *SelectServerConfig {
	return &SelectServerConfig{Context: ctx, Handler: handler}
}

/*SelectServerConfig swagger:route GET /configs config k8s selectServerConfig

拉取配置，web=/server_config_select

columns key=['ServerId', 'PodSeq', 'ConfigId', 'ConfigName', 'ConfigVersion', 'ConfigContent', 'CreatePerson', 'CreateTime', 'ConfigMark']

*/
type SelectServerConfig struct {
	Context *middleware.Context
	Handler SelectServerConfigHandler
}

func (o *SelectServerConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectServerConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
