// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewDoPreviewConfigContentParams creates a new DoPreviewConfigContentParams object
// no default values defined in spec.
func NewDoPreviewConfigContentParams() DoPreviewConfigContentParams {

	return DoPreviewConfigContentParams{}
}

// DoPreviewConfigContentParams contains all the bound params for the do preview config content operation
// typically these are obtained from a http.Request
//
// swagger:parameters doPreviewConfigContent
type DoPreviewConfigContentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	ConfigName *string
	/*
	  In: query
	*/
	PodSeq *string
	/*
	  In: query
	*/
	ServerApp *string
	/*
	  In: query
	*/
	ServerName *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDoPreviewConfigContentParams() beforehand.
func (o *DoPreviewConfigContentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qConfigName, qhkConfigName, _ := qs.GetOK("ConfigName")
	if err := o.bindConfigName(qConfigName, qhkConfigName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPodSeq, qhkPodSeq, _ := qs.GetOK("PodSeq")
	if err := o.bindPodSeq(qPodSeq, qhkPodSeq, route.Formats); err != nil {
		res = append(res, err)
	}

	qServerApp, qhkServerApp, _ := qs.GetOK("ServerApp")
	if err := o.bindServerApp(qServerApp, qhkServerApp, route.Formats); err != nil {
		res = append(res, err)
	}

	qServerName, qhkServerName, _ := qs.GetOK("ServerName")
	if err := o.bindServerName(qServerName, qhkServerName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindConfigName binds and validates parameter ConfigName from query.
func (o *DoPreviewConfigContentParams) bindConfigName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ConfigName = &raw

	return nil
}

// bindPodSeq binds and validates parameter PodSeq from query.
func (o *DoPreviewConfigContentParams) bindPodSeq(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PodSeq = &raw

	return nil
}

// bindServerApp binds and validates parameter ServerApp from query.
func (o *DoPreviewConfigContentParams) bindServerApp(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ServerApp = &raw

	return nil
}

// bindServerName binds and validates parameter ServerName from query.
func (o *DoPreviewConfigContentParams) bindServerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ServerName = &raw

	return nil
}
