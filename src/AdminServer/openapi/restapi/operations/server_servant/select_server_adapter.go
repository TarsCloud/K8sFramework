// Code generated by go-swagger; DO NOT EDIT.

package server_servant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectServerAdapterHandlerFunc turns a function with the right signature into a select server adapter handler
type SelectServerAdapterHandlerFunc func(SelectServerAdapterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectServerAdapterHandlerFunc) Handle(params SelectServerAdapterParams) middleware.Responder {
	return fn(params)
}

// SelectServerAdapterHandler interface for that can handle valid select server adapter params
type SelectServerAdapterHandler interface {
	Handle(SelectServerAdapterParams) middleware.Responder
}

// NewSelectServerAdapter creates a new http.Handler for the select server adapter operation
func NewSelectServerAdapter(ctx *middleware.Context, handler SelectServerAdapterHandler) *SelectServerAdapter {
	return &SelectServerAdapter{Context: ctx, Handler: handler}
}

/*SelectServerAdapter swagger:route GET /servers/servants server-servant k8s selectServerAdapter

拉取服务servants，web=/server_adapter_select

columns key=['ServerId', 'AdapterId', 'Name', 'Threads', 'Connections', 'Port', 'Capacity', 'Timeout', 'IsTaf', 'IsTcp',]

*/
type SelectServerAdapter struct {
	Context *middleware.Context
	Handler SelectServerAdapterHandler
}

func (o *SelectServerAdapter) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectServerAdapterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
