// Code generated by go-swagger; DO NOT EDIT.

package server_servant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"tarsadmin/openapi/models"
)

// UpdateServerAdapterHandlerFunc turns a function with the right signature into a update server adapter handler
type UpdateServerAdapterHandlerFunc func(UpdateServerAdapterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateServerAdapterHandlerFunc) Handle(params UpdateServerAdapterParams) middleware.Responder {
	return fn(params)
}

// UpdateServerAdapterHandler interface for that can handle valid update server adapter params
type UpdateServerAdapterHandler interface {
	Handle(UpdateServerAdapterParams) middleware.Responder
}

// NewUpdateServerAdapter creates a new http.Handler for the update server adapter operation
func NewUpdateServerAdapter(ctx *middleware.Context, handler UpdateServerAdapterHandler) *UpdateServerAdapter {
	return &UpdateServerAdapter{Context: ctx, Handler: handler}
}

/*UpdateServerAdapter swagger:route PATCH /servers/servants server-servant k8s updateServerAdapter

更新服务servants，web=/server_adapter_update

*/
type UpdateServerAdapter struct {
	Context *middleware.Context
	Handler UpdateServerAdapterHandler
}

func (o *UpdateServerAdapter) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateServerAdapterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateServerAdapterBody update server adapter body
//
// swagger:model UpdateServerAdapterBody
type UpdateServerAdapterBody struct {

	// confirmation
	Confirmation bool `json:"Confirmation,omitempty"`

	// metadata
	Metadata *UpdateServerAdapterParamsBodyMetadata `json:"metadata,omitempty"`

	// target
	Target *models.ServerServantElem `json:"target,omitempty"`
}

// Validate validates this update server adapter body
func (o *UpdateServerAdapterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServerAdapterBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateServerAdapterBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerAdapterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerAdapterBody) UnmarshalBinary(b []byte) error {
	var res UpdateServerAdapterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateServerAdapterOKBody update server adapter o k body
//
// swagger:model UpdateServerAdapterOKBody
type UpdateServerAdapterOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this update server adapter o k body
func (o *UpdateServerAdapterOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerAdapterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerAdapterOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateServerAdapterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateServerAdapterParamsBodyMetadata update server adapter params body metadata
//
// swagger:model UpdateServerAdapterParamsBodyMetadata
type UpdateServerAdapterParamsBodyMetadata struct {

	// adapter Id
	// Required: true
	AdapterID *string `json:"AdapterId"`
}

// Validate validates this update server adapter params body metadata
func (o *UpdateServerAdapterParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdapterID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServerAdapterParamsBodyMetadata) validateAdapterID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"AdapterId", "body", o.AdapterID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerAdapterParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerAdapterParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res UpdateServerAdapterParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
