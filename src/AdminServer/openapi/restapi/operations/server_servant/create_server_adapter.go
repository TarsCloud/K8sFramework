// Code generated by go-swagger; DO NOT EDIT.

package server_servant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"tafadmin/openapi/models"
)

// CreateServerAdapterHandlerFunc turns a function with the right signature into a create server adapter handler
type CreateServerAdapterHandlerFunc func(CreateServerAdapterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateServerAdapterHandlerFunc) Handle(params CreateServerAdapterParams) middleware.Responder {
	return fn(params)
}

// CreateServerAdapterHandler interface for that can handle valid create server adapter params
type CreateServerAdapterHandler interface {
	Handle(CreateServerAdapterParams) middleware.Responder
}

// NewCreateServerAdapter creates a new http.Handler for the create server adapter operation
func NewCreateServerAdapter(ctx *middleware.Context, handler CreateServerAdapterHandler) *CreateServerAdapter {
	return &CreateServerAdapter{Context: ctx, Handler: handler}
}

/*CreateServerAdapter swagger:route POST /servers/servants server-servant k8s createServerAdapter

创建服务servants，web=/server_adapter_create

*/
type CreateServerAdapter struct {
	Context *middleware.Context
	Handler CreateServerAdapterHandler
}

func (o *CreateServerAdapter) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateServerAdapterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateServerAdapterBody create server adapter body
//
// swagger:model CreateServerAdapterBody
type CreateServerAdapterBody struct {

	// metadata
	Metadata *CreateServerAdapterParamsBodyMetadata `json:"metadata,omitempty"`
}

// Validate validates this create server adapter body
func (o *CreateServerAdapterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerAdapterBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerAdapterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerAdapterBody) UnmarshalBinary(b []byte) error {
	var res CreateServerAdapterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateServerAdapterOKBody create server adapter o k body
//
// swagger:model CreateServerAdapterOKBody
type CreateServerAdapterOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this create server adapter o k body
func (o *CreateServerAdapterOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerAdapterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerAdapterOKBody) UnmarshalBinary(b []byte) error {
	var res CreateServerAdapterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateServerAdapterParamsBodyMetadata create server adapter params body metadata
//
// swagger:model CreateServerAdapterParamsBodyMetadata
type CreateServerAdapterParamsBodyMetadata struct {

	// servant
	Servant models.MapServant `json:"Servant,omitempty"`

	// server Id
	// Required: true
	ServerID *string `json:"ServerId"`
}

// Validate validates this create server adapter params body metadata
func (o *CreateServerAdapterParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateServant(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerAdapterParamsBodyMetadata) validateServant(formats strfmt.Registry) error {

	if swag.IsZero(o.Servant) { // not required
		return nil
	}

	if err := o.Servant.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Params" + "." + "metadata" + "." + "Servant")
		}
		return err
	}

	return nil
}

func (o *CreateServerAdapterParamsBodyMetadata) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"ServerId", "body", o.ServerID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerAdapterParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerAdapterParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res CreateServerAdapterParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
