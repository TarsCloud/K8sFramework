// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectAppHandlerFunc turns a function with the right signature into a select app handler
type SelectAppHandlerFunc func(SelectAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectAppHandlerFunc) Handle(params SelectAppParams) middleware.Responder {
	return fn(params)
}

// SelectAppHandler interface for that can handle valid select app params
type SelectAppHandler interface {
	Handle(SelectAppParams) middleware.Responder
}

// NewSelectApp creates a new http.Handler for the select app operation
func NewSelectApp(ctx *middleware.Context, handler SelectAppHandler) *SelectApp {
	return &SelectApp{Context: ctx, Handler: handler}
}

/*SelectApp swagger:route GET /applications applications k8s selectApp

拉取应用列表，web=/application_select

columns key=['AppName', 'AppMark', 'BusinessName', 'CreateTime', 'CreatePerson']

*/
type SelectApp struct {
	Context *middleware.Context
	Handler SelectAppHandler
}

func (o *SelectApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
