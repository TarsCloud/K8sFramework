// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAppHandlerFunc turns a function with the right signature into a update app handler
type UpdateAppHandlerFunc func(UpdateAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAppHandlerFunc) Handle(params UpdateAppParams) middleware.Responder {
	return fn(params)
}

// UpdateAppHandler interface for that can handle valid update app params
type UpdateAppHandler interface {
	Handle(UpdateAppParams) middleware.Responder
}

// NewUpdateApp creates a new http.Handler for the update app operation
func NewUpdateApp(ctx *middleware.Context, handler UpdateAppHandler) *UpdateApp {
	return &UpdateApp{Context: ctx, Handler: handler}
}

/*UpdateApp swagger:route PATCH /applications applications k8s updateApp

更新应用列表，web=/application_update

*/
type UpdateApp struct {
	Context *middleware.Context
	Handler UpdateAppHandler
}

func (o *UpdateApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateAppBody update app body
//
// swagger:model UpdateAppBody
type UpdateAppBody struct {

	// metadata
	Metadata *UpdateAppParamsBodyMetadata `json:"metadata,omitempty"`

	// target
	Target *UpdateAppParamsBodyTarget `json:"target,omitempty"`
}

// Validate validates this update app body
func (o *UpdateAppBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAppBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateAppBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAppBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAppBody) UnmarshalBinary(b []byte) error {
	var res UpdateAppBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateAppOKBody update app o k body
//
// swagger:model UpdateAppOKBody
type UpdateAppOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this update app o k body
func (o *UpdateAppOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAppOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAppOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateAppOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateAppParamsBodyMetadata update app params body metadata
//
// swagger:model UpdateAppParamsBodyMetadata
type UpdateAppParamsBodyMetadata struct {

	// app name
	// Required: true
	// Pattern: ^[a-zA-Z0-9]{1,24}\z
	AppName *string `json:"AppName"`
}

// Validate validates this update app params body metadata
func (o *UpdateAppParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAppParamsBodyMetadata) validateAppName(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"AppName", "body", o.AppName); err != nil {
		return err
	}

	if err := validate.Pattern("Params"+"."+"metadata"+"."+"AppName", "body", string(*o.AppName), `^[a-zA-Z0-9]{1,24}\z`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAppParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAppParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res UpdateAppParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateAppParamsBodyTarget update app params body target
//
// swagger:model UpdateAppParamsBodyTarget
type UpdateAppParamsBodyTarget struct {

	// app mark
	AppMark string `json:"AppMark,omitempty"`

	// business name
	// Pattern: ^[a-zA-Z0-9.:_-]{1,128}\z
	BusinessName string `json:"BusinessName,omitempty"`
}

// Validate validates this update app params body target
func (o *UpdateAppParamsBodyTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBusinessName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAppParamsBodyTarget) validateBusinessName(formats strfmt.Registry) error {

	if swag.IsZero(o.BusinessName) { // not required
		return nil
	}

	if err := validate.Pattern("Params"+"."+"target"+"."+"BusinessName", "body", string(o.BusinessName), `^[a-zA-Z0-9.:_-]{1,128}\z`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAppParamsBodyTarget) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAppParamsBodyTarget) UnmarshalBinary(b []byte) error {
	var res UpdateAppParamsBodyTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
