// Code generated by go-swagger; DO NOT EDIT.

package deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SelectDeployHandlerFunc turns a function with the right signature into a select deploy handler
type SelectDeployHandlerFunc func(SelectDeployParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SelectDeployHandlerFunc) Handle(params SelectDeployParams) middleware.Responder {
	return fn(params)
}

// SelectDeployHandler interface for that can handle valid select deploy params
type SelectDeployHandler interface {
	Handle(SelectDeployParams) middleware.Responder
}

// NewSelectDeploy creates a new http.Handler for the select deploy operation
func NewSelectDeploy(ctx *middleware.Context, handler SelectDeployHandler) *SelectDeploy {
	return &SelectDeploy{Context: ctx, Handler: handler}
}

/*SelectDeploy swagger:route GET /deploys deploy k8s selectDeploy

拉取部署列表，web=/deploy_select

columns key=['DeployId', 'ServerApp', 'ServerName', 'ServerMark', 'ServerK8S', 'ServerServant', 'ServerK8S', 'ServerOption', 'RequestPerson', 'RequestTime']

*/
type SelectDeploy struct {
	Context *middleware.Context
	Handler SelectDeployHandler
}

func (o *SelectDeploy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSelectDeployParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
