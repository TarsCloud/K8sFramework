// Code generated by go-swagger; DO NOT EDIT.

package deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"tafadmin/openapi/models"
)

// UpdateDeployHandlerFunc turns a function with the right signature into a update deploy handler
type UpdateDeployHandlerFunc func(UpdateDeployParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateDeployHandlerFunc) Handle(params UpdateDeployParams) middleware.Responder {
	return fn(params)
}

// UpdateDeployHandler interface for that can handle valid update deploy params
type UpdateDeployHandler interface {
	Handle(UpdateDeployParams) middleware.Responder
}

// NewUpdateDeploy creates a new http.Handler for the update deploy operation
func NewUpdateDeploy(ctx *middleware.Context, handler UpdateDeployHandler) *UpdateDeploy {
	return &UpdateDeploy{Context: ctx, Handler: handler}
}

/*UpdateDeploy swagger:route PATCH /deploys deploy k8s updateDeploy

更新服务部署，web=/deploy_update

*/
type UpdateDeploy struct {
	Context *middleware.Context
	Handler UpdateDeployHandler
}

func (o *UpdateDeploy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateDeployParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateDeployBody update deploy body
//
// swagger:model UpdateDeployBody
type UpdateDeployBody struct {

	// metadata
	Metadata *UpdateDeployParamsBodyMetadata `json:"metadata,omitempty"`

	// target
	Target *UpdateDeployParamsBodyTarget `json:"target,omitempty"`
}

// Validate validates this update deploy body
func (o *UpdateDeployBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeployBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateDeployBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeployBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeployBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeployBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateDeployOKBody update deploy o k body
//
// swagger:model UpdateDeployOKBody
type UpdateDeployOKBody struct {

	// result
	Result int32 `json:"result,omitempty"`
}

// Validate validates this update deploy o k body
func (o *UpdateDeployOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeployOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeployOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeployOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateDeployParamsBodyMetadata update deploy params body metadata
//
// swagger:model UpdateDeployParamsBodyMetadata
type UpdateDeployParamsBodyMetadata struct {

	// deploy Id
	// Required: true
	DeployID *string `json:"DeployId"`
}

// Validate validates this update deploy params body metadata
func (o *UpdateDeployParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeployID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeployParamsBodyMetadata) validateDeployID(formats strfmt.Registry) error {

	if err := validate.Required("Params"+"."+"metadata"+"."+"DeployId", "body", o.DeployID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeployParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeployParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res UpdateDeployParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateDeployParamsBodyTarget update deploy params body target
//
// swagger:model UpdateDeployParamsBodyTarget
type UpdateDeployParamsBodyTarget struct {

	// server k8 s
	ServerK8S *models.ServerK8S `json:"ServerK8S,omitempty"`

	// server option
	ServerOption *models.ServerOption `json:"ServerOption,omitempty"`

	// server servant
	ServerServant models.MapServant `json:"ServerServant,omitempty"`
}

// Validate validates this update deploy params body target
func (o *UpdateDeployParamsBodyTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateServerK8S(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServerOption(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServerServant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeployParamsBodyTarget) validateServerK8S(formats strfmt.Registry) error {

	if swag.IsZero(o.ServerK8S) { // not required
		return nil
	}

	if o.ServerK8S != nil {
		if err := o.ServerK8S.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target" + "." + "ServerK8S")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateDeployParamsBodyTarget) validateServerOption(formats strfmt.Registry) error {

	if swag.IsZero(o.ServerOption) { // not required
		return nil
	}

	if o.ServerOption != nil {
		if err := o.ServerOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params" + "." + "target" + "." + "ServerOption")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateDeployParamsBodyTarget) validateServerServant(formats strfmt.Registry) error {

	if swag.IsZero(o.ServerServant) { // not required
		return nil
	}

	if err := o.ServerServant.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Params" + "." + "target" + "." + "ServerServant")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeployParamsBodyTarget) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeployParamsBodyTarget) UnmarshalBinary(b []byte) error {
	var res UpdateDeployParamsBodyTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
