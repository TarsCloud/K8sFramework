// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"tafadmin/openapi/restapi/operations/affinity"
	"tafadmin/openapi/restapi/operations/agent"
	"tafadmin/openapi/restapi/operations/applications"
	"tafadmin/openapi/restapi/operations/approval"
	"tafadmin/openapi/restapi/operations/business"
	"tafadmin/openapi/restapi/operations/config"
	"tafadmin/openapi/restapi/operations/default_operations"
	"tafadmin/openapi/restapi/operations/deploy"
	"tafadmin/openapi/restapi/operations/node"
	"tafadmin/openapi/restapi/operations/notify"
	"tafadmin/openapi/restapi/operations/release"
	"tafadmin/openapi/restapi/operations/server"
	"tafadmin/openapi/restapi/operations/server_k8s"
	"tafadmin/openapi/restapi/operations/server_option"
	"tafadmin/openapi/restapi/operations/server_pod"
	"tafadmin/openapi/restapi/operations/server_servant"
	"tafadmin/openapi/restapi/operations/shell"
	"tafadmin/openapi/restapi/operations/template"
	"tafadmin/openapi/restapi/operations/tree"
)

// NewTafadminOpenapiAPI creates a new TafadminOpenapi instance
func NewTafadminOpenapiAPI(spec *loads.Document) *TafadminOpenapiAPI {
	return &TafadminOpenapiAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		NotifySelectNotifyHandler: notify.SelectNotifyHandlerFunc(func(params notify.SelectNotifyParams) middleware.Responder {
			return middleware.NotImplemented("operation notify.SelectNotify has not yet been implemented")
		}),
		ServerPodSelectPodAliveHandler: server_pod.SelectPodAliveHandlerFunc(func(params server_pod.SelectPodAliveParams) middleware.Responder {
			return middleware.NotImplemented("operation server_pod.SelectPodAlive has not yet been implemented")
		}),
		ServerPodSelectPodPerishedHandler: server_pod.SelectPodPerishedHandlerFunc(func(params server_pod.SelectPodPerishedParams) middleware.Responder {
			return middleware.NotImplemented("operation server_pod.SelectPodPerished has not yet been implemented")
		}),
		ApplicationsCreateAppHandler: applications.CreateAppHandlerFunc(func(params applications.CreateAppParams) middleware.Responder {
			return middleware.NotImplemented("operation applications.CreateApp has not yet been implemented")
		}),
		ApprovalCreateApprovalHandler: approval.CreateApprovalHandlerFunc(func(params approval.CreateApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation approval.CreateApproval has not yet been implemented")
		}),
		BusinessCreateBusinessHandler: business.CreateBusinessHandlerFunc(func(params business.CreateBusinessParams) middleware.Responder {
			return middleware.NotImplemented("operation business.CreateBusiness has not yet been implemented")
		}),
		DeployCreateDeployHandler: deploy.CreateDeployHandlerFunc(func(params deploy.CreateDeployParams) middleware.Responder {
			return middleware.NotImplemented("operation deploy.CreateDeploy has not yet been implemented")
		}),
		ServerServantCreateServerAdapterHandler: server_servant.CreateServerAdapterHandlerFunc(func(params server_servant.CreateServerAdapterParams) middleware.Responder {
			return middleware.NotImplemented("operation server_servant.CreateServerAdapter has not yet been implemented")
		}),
		ConfigCreateServerConfigHandler: config.CreateServerConfigHandlerFunc(func(params config.CreateServerConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation config.CreateServerConfig has not yet been implemented")
		}),
		ReleaseCreateServicePoolHandler: release.CreateServicePoolHandlerFunc(func(params release.CreateServicePoolParams) middleware.Responder {
			return middleware.NotImplemented("operation release.CreateServicePool has not yet been implemented")
		}),
		TemplateCreateTemplateHandler: template.CreateTemplateHandlerFunc(func(params template.CreateTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation template.CreateTemplate has not yet been implemented")
		}),
		ApplicationsDeleteAppHandler: applications.DeleteAppHandlerFunc(func(params applications.DeleteAppParams) middleware.Responder {
			return middleware.NotImplemented("operation applications.DeleteApp has not yet been implemented")
		}),
		BusinessDeleteBusinessHandler: business.DeleteBusinessHandlerFunc(func(params business.DeleteBusinessParams) middleware.Responder {
			return middleware.NotImplemented("operation business.DeleteBusiness has not yet been implemented")
		}),
		DeployDeleteDeployHandler: deploy.DeleteDeployHandlerFunc(func(params deploy.DeleteDeployParams) middleware.Responder {
			return middleware.NotImplemented("operation deploy.DeleteDeploy has not yet been implemented")
		}),
		ServerDeleteServerHandler: server.DeleteServerHandlerFunc(func(params server.DeleteServerParams) middleware.Responder {
			return middleware.NotImplemented("operation server.DeleteServer has not yet been implemented")
		}),
		ServerServantDeleteServerAdapterHandler: server_servant.DeleteServerAdapterHandlerFunc(func(params server_servant.DeleteServerAdapterParams) middleware.Responder {
			return middleware.NotImplemented("operation server_servant.DeleteServerAdapter has not yet been implemented")
		}),
		ConfigDeleteServerConfigHandler: config.DeleteServerConfigHandlerFunc(func(params config.DeleteServerConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation config.DeleteServerConfig has not yet been implemented")
		}),
		ConfigDeleteServerConfigHistoryHandler: config.DeleteServerConfigHistoryHandlerFunc(func(params config.DeleteServerConfigHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation config.DeleteServerConfigHistory has not yet been implemented")
		}),
		TemplateDeleteTemplateHandler: template.DeleteTemplateHandlerFunc(func(params template.DeleteTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation template.DeleteTemplate has not yet been implemented")
		}),
		ConfigDoActiveHistoryConfigHandler: config.DoActiveHistoryConfigHandlerFunc(func(params config.DoActiveHistoryConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation config.DoActiveHistoryConfig has not yet been implemented")
		}),
		BusinessDoAddBusinessAppHandler: business.DoAddBusinessAppHandlerFunc(func(params business.DoAddBusinessAppParams) middleware.Responder {
			return middleware.NotImplemented("operation business.DoAddBusinessApp has not yet been implemented")
		}),
		AffinityDoAddNodeEnableServerHandler: affinity.DoAddNodeEnableServerHandlerFunc(func(params affinity.DoAddNodeEnableServerParams) middleware.Responder {
			return middleware.NotImplemented("operation affinity.DoAddNodeEnableServer has not yet been implemented")
		}),
		AffinityDoAddServerEnableNodeHandler: affinity.DoAddServerEnableNodeHandlerFunc(func(params affinity.DoAddServerEnableNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation affinity.DoAddServerEnableNode has not yet been implemented")
		}),
		AffinityDoDeleteNodeEnableServerHandler: affinity.DoDeleteNodeEnableServerHandlerFunc(func(params affinity.DoDeleteNodeEnableServerParams) middleware.Responder {
			return middleware.NotImplemented("operation affinity.DoDeleteNodeEnableServer has not yet been implemented")
		}),
		NodeDoDeletePublicNodeHandler: node.DoDeletePublicNodeHandlerFunc(func(params node.DoDeletePublicNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation node.DoDeletePublicNode has not yet been implemented")
		}),
		AffinityDoDeleteServerEnableNodeHandler: affinity.DoDeleteServerEnableNodeHandlerFunc(func(params affinity.DoDeleteServerEnableNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation affinity.DoDeleteServerEnableNode has not yet been implemented")
		}),
		ReleaseDoEnableServiceHandler: release.DoEnableServiceHandlerFunc(func(params release.DoEnableServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation release.DoEnableService has not yet been implemented")
		}),
		AffinityDoListAffinityGroupByAbilityHandler: affinity.DoListAffinityGroupByAbilityHandlerFunc(func(params affinity.DoListAffinityGroupByAbilityParams) middleware.Responder {
			return middleware.NotImplemented("operation affinity.DoListAffinityGroupByAbility has not yet been implemented")
		}),
		AffinityDoListAffinityGroupByNodeHandler: affinity.DoListAffinityGroupByNodeHandlerFunc(func(params affinity.DoListAffinityGroupByNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation affinity.DoListAffinityGroupByNode has not yet been implemented")
		}),
		BusinessDoListBusinessAppHandler: business.DoListBusinessAppHandlerFunc(func(params business.DoListBusinessAppParams) middleware.Responder {
			return middleware.NotImplemented("operation business.DoListBusinessApp has not yet been implemented")
		}),
		NodeDoListClusterNodeHandler: node.DoListClusterNodeHandlerFunc(func(params node.DoListClusterNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation node.DoListClusterNode has not yet been implemented")
		}),
		ConfigDoPreviewConfigContentHandler: config.DoPreviewConfigContentHandlerFunc(func(params config.DoPreviewConfigContentParams) middleware.Responder {
			return middleware.NotImplemented("operation config.DoPreviewConfigContent has not yet been implemented")
		}),
		ServerOptionDoPreviewTemplateContentHandler: server_option.DoPreviewTemplateContentHandlerFunc(func(params server_option.DoPreviewTemplateContentParams) middleware.Responder {
			return middleware.NotImplemented("operation server_option.DoPreviewTemplateContent has not yet been implemented")
		}),
		NodeDoSetPublicNodeHandler: node.DoSetPublicNodeHandlerFunc(func(params node.DoSetPublicNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation node.DoSetPublicNode has not yet been implemented")
		}),
		ApplicationsSelectAppHandler: applications.SelectAppHandlerFunc(func(params applications.SelectAppParams) middleware.Responder {
			return middleware.NotImplemented("operation applications.SelectApp has not yet been implemented")
		}),
		ApprovalSelectApprovalHandler: approval.SelectApprovalHandlerFunc(func(params approval.SelectApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation approval.SelectApproval has not yet been implemented")
		}),
		AgentSelectAvailHostPortHandler: agent.SelectAvailHostPortHandlerFunc(func(params agent.SelectAvailHostPortParams) middleware.Responder {
			return middleware.NotImplemented("operation agent.SelectAvailHostPort has not yet been implemented")
		}),
		BusinessSelectBusinessHandler: business.SelectBusinessHandlerFunc(func(params business.SelectBusinessParams) middleware.Responder {
			return middleware.NotImplemented("operation business.SelectBusiness has not yet been implemented")
		}),
		DefaultOperationsSelectDefaultValueHandler: default_operations.SelectDefaultValueHandlerFunc(func(params default_operations.SelectDefaultValueParams) middleware.Responder {
			return middleware.NotImplemented("operation default_operations.SelectDefaultValue has not yet been implemented")
		}),
		DeploySelectDeployHandler: deploy.SelectDeployHandlerFunc(func(params deploy.SelectDeployParams) middleware.Responder {
			return middleware.NotImplemented("operation deploy.SelectDeploy has not yet been implemented")
		}),
		ServerK8sSelectK8SHandler: server_k8s.SelectK8SHandlerFunc(func(params server_k8s.SelectK8SParams) middleware.Responder {
			return middleware.NotImplemented("operation server_k8s.SelectK8S has not yet been implemented")
		}),
		NodeSelectNodeHandler: node.SelectNodeHandlerFunc(func(params node.SelectNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation node.SelectNode has not yet been implemented")
		}),
		ServerSelectServerHandler: server.SelectServerHandlerFunc(func(params server.SelectServerParams) middleware.Responder {
			return middleware.NotImplemented("operation server.SelectServer has not yet been implemented")
		}),
		ServerServantSelectServerAdapterHandler: server_servant.SelectServerAdapterHandlerFunc(func(params server_servant.SelectServerAdapterParams) middleware.Responder {
			return middleware.NotImplemented("operation server_servant.SelectServerAdapter has not yet been implemented")
		}),
		ConfigSelectServerConfigHandler: config.SelectServerConfigHandlerFunc(func(params config.SelectServerConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation config.SelectServerConfig has not yet been implemented")
		}),
		ConfigSelectServerConfigHistoryHandler: config.SelectServerConfigHistoryHandlerFunc(func(params config.SelectServerConfigHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation config.SelectServerConfigHistory has not yet been implemented")
		}),
		ServerOptionSelectServerOptionHandler: server_option.SelectServerOptionHandlerFunc(func(params server_option.SelectServerOptionParams) middleware.Responder {
			return middleware.NotImplemented("operation server_option.SelectServerOption has not yet been implemented")
		}),
		TreeSelectServerTreeHandler: tree.SelectServerTreeHandlerFunc(func(params tree.SelectServerTreeParams) middleware.Responder {
			return middleware.NotImplemented("operation tree.SelectServerTree has not yet been implemented")
		}),
		ReleaseSelectServiceEnabledHandler: release.SelectServiceEnabledHandlerFunc(func(params release.SelectServiceEnabledParams) middleware.Responder {
			return middleware.NotImplemented("operation release.SelectServiceEnabled has not yet been implemented")
		}),
		ReleaseSelectServicePoolHandler: release.SelectServicePoolHandlerFunc(func(params release.SelectServicePoolParams) middleware.Responder {
			return middleware.NotImplemented("operation release.SelectServicePool has not yet been implemented")
		}),
		TemplateSelectTemplateHandler: template.SelectTemplateHandlerFunc(func(params template.SelectTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation template.SelectTemplate has not yet been implemented")
		}),
		ShellSSHPodShellHandler: shell.SSHPodShellHandlerFunc(func(params shell.SSHPodShellParams) middleware.Responder {
			return middleware.NotImplemented("operation shell.SSHPodShell has not yet been implemented")
		}),
		ApplicationsUpdateAppHandler: applications.UpdateAppHandlerFunc(func(params applications.UpdateAppParams) middleware.Responder {
			return middleware.NotImplemented("operation applications.UpdateApp has not yet been implemented")
		}),
		BusinessUpdateBusinessHandler: business.UpdateBusinessHandlerFunc(func(params business.UpdateBusinessParams) middleware.Responder {
			return middleware.NotImplemented("operation business.UpdateBusiness has not yet been implemented")
		}),
		DeployUpdateDeployHandler: deploy.UpdateDeployHandlerFunc(func(params deploy.UpdateDeployParams) middleware.Responder {
			return middleware.NotImplemented("operation deploy.UpdateDeploy has not yet been implemented")
		}),
		ServerK8sUpdateK8SHandler: server_k8s.UpdateK8SHandlerFunc(func(params server_k8s.UpdateK8SParams) middleware.Responder {
			return middleware.NotImplemented("operation server_k8s.UpdateK8S has not yet been implemented")
		}),
		ServerUpdateServerHandler: server.UpdateServerHandlerFunc(func(params server.UpdateServerParams) middleware.Responder {
			return middleware.NotImplemented("operation server.UpdateServer has not yet been implemented")
		}),
		ServerServantUpdateServerAdapterHandler: server_servant.UpdateServerAdapterHandlerFunc(func(params server_servant.UpdateServerAdapterParams) middleware.Responder {
			return middleware.NotImplemented("operation server_servant.UpdateServerAdapter has not yet been implemented")
		}),
		ConfigUpdateServerConfigHandler: config.UpdateServerConfigHandlerFunc(func(params config.UpdateServerConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation config.UpdateServerConfig has not yet been implemented")
		}),
		ServerOptionUpdateServerOptionHandler: server_option.UpdateServerOptionHandlerFunc(func(params server_option.UpdateServerOptionParams) middleware.Responder {
			return middleware.NotImplemented("operation server_option.UpdateServerOption has not yet been implemented")
		}),
		TemplateUpdateTemplateHandler: template.UpdateTemplateHandlerFunc(func(params template.UpdateTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation template.UpdateTemplate has not yet been implemented")
		}),
	}
}

/*TafadminOpenapiAPI Taf Admin接口文档 */
type TafadminOpenapiAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// NotifySelectNotifyHandler sets the operation handler for the select notify operation
	NotifySelectNotifyHandler notify.SelectNotifyHandler
	// ServerPodSelectPodAliveHandler sets the operation handler for the select pod alive operation
	ServerPodSelectPodAliveHandler server_pod.SelectPodAliveHandler
	// ServerPodSelectPodPerishedHandler sets the operation handler for the select pod perished operation
	ServerPodSelectPodPerishedHandler server_pod.SelectPodPerishedHandler
	// ApplicationsCreateAppHandler sets the operation handler for the create app operation
	ApplicationsCreateAppHandler applications.CreateAppHandler
	// ApprovalCreateApprovalHandler sets the operation handler for the create approval operation
	ApprovalCreateApprovalHandler approval.CreateApprovalHandler
	// BusinessCreateBusinessHandler sets the operation handler for the create business operation
	BusinessCreateBusinessHandler business.CreateBusinessHandler
	// DeployCreateDeployHandler sets the operation handler for the create deploy operation
	DeployCreateDeployHandler deploy.CreateDeployHandler
	// ServerServantCreateServerAdapterHandler sets the operation handler for the create server adapter operation
	ServerServantCreateServerAdapterHandler server_servant.CreateServerAdapterHandler
	// ConfigCreateServerConfigHandler sets the operation handler for the create server config operation
	ConfigCreateServerConfigHandler config.CreateServerConfigHandler
	// ReleaseCreateServicePoolHandler sets the operation handler for the create service pool operation
	ReleaseCreateServicePoolHandler release.CreateServicePoolHandler
	// TemplateCreateTemplateHandler sets the operation handler for the create template operation
	TemplateCreateTemplateHandler template.CreateTemplateHandler
	// ApplicationsDeleteAppHandler sets the operation handler for the delete app operation
	ApplicationsDeleteAppHandler applications.DeleteAppHandler
	// BusinessDeleteBusinessHandler sets the operation handler for the delete business operation
	BusinessDeleteBusinessHandler business.DeleteBusinessHandler
	// DeployDeleteDeployHandler sets the operation handler for the delete deploy operation
	DeployDeleteDeployHandler deploy.DeleteDeployHandler
	// ServerDeleteServerHandler sets the operation handler for the delete server operation
	ServerDeleteServerHandler server.DeleteServerHandler
	// ServerServantDeleteServerAdapterHandler sets the operation handler for the delete server adapter operation
	ServerServantDeleteServerAdapterHandler server_servant.DeleteServerAdapterHandler
	// ConfigDeleteServerConfigHandler sets the operation handler for the delete server config operation
	ConfigDeleteServerConfigHandler config.DeleteServerConfigHandler
	// ConfigDeleteServerConfigHistoryHandler sets the operation handler for the delete server config history operation
	ConfigDeleteServerConfigHistoryHandler config.DeleteServerConfigHistoryHandler
	// TemplateDeleteTemplateHandler sets the operation handler for the delete template operation
	TemplateDeleteTemplateHandler template.DeleteTemplateHandler
	// ConfigDoActiveHistoryConfigHandler sets the operation handler for the do active history config operation
	ConfigDoActiveHistoryConfigHandler config.DoActiveHistoryConfigHandler
	// BusinessDoAddBusinessAppHandler sets the operation handler for the do add business app operation
	BusinessDoAddBusinessAppHandler business.DoAddBusinessAppHandler
	// AffinityDoAddNodeEnableServerHandler sets the operation handler for the do add node enable server operation
	AffinityDoAddNodeEnableServerHandler affinity.DoAddNodeEnableServerHandler
	// AffinityDoAddServerEnableNodeHandler sets the operation handler for the do add server enable node operation
	AffinityDoAddServerEnableNodeHandler affinity.DoAddServerEnableNodeHandler
	// AffinityDoDeleteNodeEnableServerHandler sets the operation handler for the do delete node enable server operation
	AffinityDoDeleteNodeEnableServerHandler affinity.DoDeleteNodeEnableServerHandler
	// NodeDoDeletePublicNodeHandler sets the operation handler for the do delete public node operation
	NodeDoDeletePublicNodeHandler node.DoDeletePublicNodeHandler
	// AffinityDoDeleteServerEnableNodeHandler sets the operation handler for the do delete server enable node operation
	AffinityDoDeleteServerEnableNodeHandler affinity.DoDeleteServerEnableNodeHandler
	// ReleaseDoEnableServiceHandler sets the operation handler for the do enable service operation
	ReleaseDoEnableServiceHandler release.DoEnableServiceHandler
	// AffinityDoListAffinityGroupByAbilityHandler sets the operation handler for the do list affinity group by ability operation
	AffinityDoListAffinityGroupByAbilityHandler affinity.DoListAffinityGroupByAbilityHandler
	// AffinityDoListAffinityGroupByNodeHandler sets the operation handler for the do list affinity group by node operation
	AffinityDoListAffinityGroupByNodeHandler affinity.DoListAffinityGroupByNodeHandler
	// BusinessDoListBusinessAppHandler sets the operation handler for the do list business app operation
	BusinessDoListBusinessAppHandler business.DoListBusinessAppHandler
	// NodeDoListClusterNodeHandler sets the operation handler for the do list cluster node operation
	NodeDoListClusterNodeHandler node.DoListClusterNodeHandler
	// ConfigDoPreviewConfigContentHandler sets the operation handler for the do preview config content operation
	ConfigDoPreviewConfigContentHandler config.DoPreviewConfigContentHandler
	// ServerOptionDoPreviewTemplateContentHandler sets the operation handler for the do preview template content operation
	ServerOptionDoPreviewTemplateContentHandler server_option.DoPreviewTemplateContentHandler
	// NodeDoSetPublicNodeHandler sets the operation handler for the do set public node operation
	NodeDoSetPublicNodeHandler node.DoSetPublicNodeHandler
	// ApplicationsSelectAppHandler sets the operation handler for the select app operation
	ApplicationsSelectAppHandler applications.SelectAppHandler
	// ApprovalSelectApprovalHandler sets the operation handler for the select approval operation
	ApprovalSelectApprovalHandler approval.SelectApprovalHandler
	// AgentSelectAvailHostPortHandler sets the operation handler for the select avail host port operation
	AgentSelectAvailHostPortHandler agent.SelectAvailHostPortHandler
	// BusinessSelectBusinessHandler sets the operation handler for the select business operation
	BusinessSelectBusinessHandler business.SelectBusinessHandler
	// DefaultOperationsSelectDefaultValueHandler sets the operation handler for the select default value operation
	DefaultOperationsSelectDefaultValueHandler default_operations.SelectDefaultValueHandler
	// DeploySelectDeployHandler sets the operation handler for the select deploy operation
	DeploySelectDeployHandler deploy.SelectDeployHandler
	// ServerK8sSelectK8SHandler sets the operation handler for the select k8 s operation
	ServerK8sSelectK8SHandler server_k8s.SelectK8SHandler
	// NodeSelectNodeHandler sets the operation handler for the select node operation
	NodeSelectNodeHandler node.SelectNodeHandler
	// ServerSelectServerHandler sets the operation handler for the select server operation
	ServerSelectServerHandler server.SelectServerHandler
	// ServerServantSelectServerAdapterHandler sets the operation handler for the select server adapter operation
	ServerServantSelectServerAdapterHandler server_servant.SelectServerAdapterHandler
	// ConfigSelectServerConfigHandler sets the operation handler for the select server config operation
	ConfigSelectServerConfigHandler config.SelectServerConfigHandler
	// ConfigSelectServerConfigHistoryHandler sets the operation handler for the select server config history operation
	ConfigSelectServerConfigHistoryHandler config.SelectServerConfigHistoryHandler
	// ServerOptionSelectServerOptionHandler sets the operation handler for the select server option operation
	ServerOptionSelectServerOptionHandler server_option.SelectServerOptionHandler
	// TreeSelectServerTreeHandler sets the operation handler for the select server tree operation
	TreeSelectServerTreeHandler tree.SelectServerTreeHandler
	// ReleaseSelectServiceEnabledHandler sets the operation handler for the select service enabled operation
	ReleaseSelectServiceEnabledHandler release.SelectServiceEnabledHandler
	// ReleaseSelectServicePoolHandler sets the operation handler for the select service pool operation
	ReleaseSelectServicePoolHandler release.SelectServicePoolHandler
	// TemplateSelectTemplateHandler sets the operation handler for the select template operation
	TemplateSelectTemplateHandler template.SelectTemplateHandler
	// ShellSSHPodShellHandler sets the operation handler for the ssh pod shell operation
	ShellSSHPodShellHandler shell.SSHPodShellHandler
	// ApplicationsUpdateAppHandler sets the operation handler for the update app operation
	ApplicationsUpdateAppHandler applications.UpdateAppHandler
	// BusinessUpdateBusinessHandler sets the operation handler for the update business operation
	BusinessUpdateBusinessHandler business.UpdateBusinessHandler
	// DeployUpdateDeployHandler sets the operation handler for the update deploy operation
	DeployUpdateDeployHandler deploy.UpdateDeployHandler
	// ServerK8sUpdateK8SHandler sets the operation handler for the update k8 s operation
	ServerK8sUpdateK8SHandler server_k8s.UpdateK8SHandler
	// ServerUpdateServerHandler sets the operation handler for the update server operation
	ServerUpdateServerHandler server.UpdateServerHandler
	// ServerServantUpdateServerAdapterHandler sets the operation handler for the update server adapter operation
	ServerServantUpdateServerAdapterHandler server_servant.UpdateServerAdapterHandler
	// ConfigUpdateServerConfigHandler sets the operation handler for the update server config operation
	ConfigUpdateServerConfigHandler config.UpdateServerConfigHandler
	// ServerOptionUpdateServerOptionHandler sets the operation handler for the update server option operation
	ServerOptionUpdateServerOptionHandler server_option.UpdateServerOptionHandler
	// TemplateUpdateTemplateHandler sets the operation handler for the update template operation
	TemplateUpdateTemplateHandler template.UpdateTemplateHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *TafadminOpenapiAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *TafadminOpenapiAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *TafadminOpenapiAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TafadminOpenapiAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TafadminOpenapiAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TafadminOpenapiAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TafadminOpenapiAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TafadminOpenapiAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TafadminOpenapiAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TafadminOpenapiAPI
func (o *TafadminOpenapiAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.NotifySelectNotifyHandler == nil {
		unregistered = append(unregistered, "notify.SelectNotifyHandler")
	}
	if o.ServerPodSelectPodAliveHandler == nil {
		unregistered = append(unregistered, "server_pod.SelectPodAliveHandler")
	}
	if o.ServerPodSelectPodPerishedHandler == nil {
		unregistered = append(unregistered, "server_pod.SelectPodPerishedHandler")
	}
	if o.ApplicationsCreateAppHandler == nil {
		unregistered = append(unregistered, "applications.CreateAppHandler")
	}
	if o.ApprovalCreateApprovalHandler == nil {
		unregistered = append(unregistered, "approval.CreateApprovalHandler")
	}
	if o.BusinessCreateBusinessHandler == nil {
		unregistered = append(unregistered, "business.CreateBusinessHandler")
	}
	if o.DeployCreateDeployHandler == nil {
		unregistered = append(unregistered, "deploy.CreateDeployHandler")
	}
	if o.ServerServantCreateServerAdapterHandler == nil {
		unregistered = append(unregistered, "server_servant.CreateServerAdapterHandler")
	}
	if o.ConfigCreateServerConfigHandler == nil {
		unregistered = append(unregistered, "config.CreateServerConfigHandler")
	}
	if o.ReleaseCreateServicePoolHandler == nil {
		unregistered = append(unregistered, "release.CreateServicePoolHandler")
	}
	if o.TemplateCreateTemplateHandler == nil {
		unregistered = append(unregistered, "template.CreateTemplateHandler")
	}
	if o.ApplicationsDeleteAppHandler == nil {
		unregistered = append(unregistered, "applications.DeleteAppHandler")
	}
	if o.BusinessDeleteBusinessHandler == nil {
		unregistered = append(unregistered, "business.DeleteBusinessHandler")
	}
	if o.DeployDeleteDeployHandler == nil {
		unregistered = append(unregistered, "deploy.DeleteDeployHandler")
	}
	if o.ServerDeleteServerHandler == nil {
		unregistered = append(unregistered, "server.DeleteServerHandler")
	}
	if o.ServerServantDeleteServerAdapterHandler == nil {
		unregistered = append(unregistered, "server_servant.DeleteServerAdapterHandler")
	}
	if o.ConfigDeleteServerConfigHandler == nil {
		unregistered = append(unregistered, "config.DeleteServerConfigHandler")
	}
	if o.ConfigDeleteServerConfigHistoryHandler == nil {
		unregistered = append(unregistered, "config.DeleteServerConfigHistoryHandler")
	}
	if o.TemplateDeleteTemplateHandler == nil {
		unregistered = append(unregistered, "template.DeleteTemplateHandler")
	}
	if o.ConfigDoActiveHistoryConfigHandler == nil {
		unregistered = append(unregistered, "config.DoActiveHistoryConfigHandler")
	}
	if o.BusinessDoAddBusinessAppHandler == nil {
		unregistered = append(unregistered, "business.DoAddBusinessAppHandler")
	}
	if o.AffinityDoAddNodeEnableServerHandler == nil {
		unregistered = append(unregistered, "affinity.DoAddNodeEnableServerHandler")
	}
	if o.AffinityDoAddServerEnableNodeHandler == nil {
		unregistered = append(unregistered, "affinity.DoAddServerEnableNodeHandler")
	}
	if o.AffinityDoDeleteNodeEnableServerHandler == nil {
		unregistered = append(unregistered, "affinity.DoDeleteNodeEnableServerHandler")
	}
	if o.NodeDoDeletePublicNodeHandler == nil {
		unregistered = append(unregistered, "node.DoDeletePublicNodeHandler")
	}
	if o.AffinityDoDeleteServerEnableNodeHandler == nil {
		unregistered = append(unregistered, "affinity.DoDeleteServerEnableNodeHandler")
	}
	if o.ReleaseDoEnableServiceHandler == nil {
		unregistered = append(unregistered, "release.DoEnableServiceHandler")
	}
	if o.AffinityDoListAffinityGroupByAbilityHandler == nil {
		unregistered = append(unregistered, "affinity.DoListAffinityGroupByAbilityHandler")
	}
	if o.AffinityDoListAffinityGroupByNodeHandler == nil {
		unregistered = append(unregistered, "affinity.DoListAffinityGroupByNodeHandler")
	}
	if o.BusinessDoListBusinessAppHandler == nil {
		unregistered = append(unregistered, "business.DoListBusinessAppHandler")
	}
	if o.NodeDoListClusterNodeHandler == nil {
		unregistered = append(unregistered, "node.DoListClusterNodeHandler")
	}
	if o.ConfigDoPreviewConfigContentHandler == nil {
		unregistered = append(unregistered, "config.DoPreviewConfigContentHandler")
	}
	if o.ServerOptionDoPreviewTemplateContentHandler == nil {
		unregistered = append(unregistered, "server_option.DoPreviewTemplateContentHandler")
	}
	if o.NodeDoSetPublicNodeHandler == nil {
		unregistered = append(unregistered, "node.DoSetPublicNodeHandler")
	}
	if o.ApplicationsSelectAppHandler == nil {
		unregistered = append(unregistered, "applications.SelectAppHandler")
	}
	if o.ApprovalSelectApprovalHandler == nil {
		unregistered = append(unregistered, "approval.SelectApprovalHandler")
	}
	if o.AgentSelectAvailHostPortHandler == nil {
		unregistered = append(unregistered, "agent.SelectAvailHostPortHandler")
	}
	if o.BusinessSelectBusinessHandler == nil {
		unregistered = append(unregistered, "business.SelectBusinessHandler")
	}
	if o.DefaultOperationsSelectDefaultValueHandler == nil {
		unregistered = append(unregistered, "default_operations.SelectDefaultValueHandler")
	}
	if o.DeploySelectDeployHandler == nil {
		unregistered = append(unregistered, "deploy.SelectDeployHandler")
	}
	if o.ServerK8sSelectK8SHandler == nil {
		unregistered = append(unregistered, "server_k8s.SelectK8SHandler")
	}
	if o.NodeSelectNodeHandler == nil {
		unregistered = append(unregistered, "node.SelectNodeHandler")
	}
	if o.ServerSelectServerHandler == nil {
		unregistered = append(unregistered, "server.SelectServerHandler")
	}
	if o.ServerServantSelectServerAdapterHandler == nil {
		unregistered = append(unregistered, "server_servant.SelectServerAdapterHandler")
	}
	if o.ConfigSelectServerConfigHandler == nil {
		unregistered = append(unregistered, "config.SelectServerConfigHandler")
	}
	if o.ConfigSelectServerConfigHistoryHandler == nil {
		unregistered = append(unregistered, "config.SelectServerConfigHistoryHandler")
	}
	if o.ServerOptionSelectServerOptionHandler == nil {
		unregistered = append(unregistered, "server_option.SelectServerOptionHandler")
	}
	if o.TreeSelectServerTreeHandler == nil {
		unregistered = append(unregistered, "tree.SelectServerTreeHandler")
	}
	if o.ReleaseSelectServiceEnabledHandler == nil {
		unregistered = append(unregistered, "release.SelectServiceEnabledHandler")
	}
	if o.ReleaseSelectServicePoolHandler == nil {
		unregistered = append(unregistered, "release.SelectServicePoolHandler")
	}
	if o.TemplateSelectTemplateHandler == nil {
		unregistered = append(unregistered, "template.SelectTemplateHandler")
	}
	if o.ShellSSHPodShellHandler == nil {
		unregistered = append(unregistered, "shell.SSHPodShellHandler")
	}
	if o.ApplicationsUpdateAppHandler == nil {
		unregistered = append(unregistered, "applications.UpdateAppHandler")
	}
	if o.BusinessUpdateBusinessHandler == nil {
		unregistered = append(unregistered, "business.UpdateBusinessHandler")
	}
	if o.DeployUpdateDeployHandler == nil {
		unregistered = append(unregistered, "deploy.UpdateDeployHandler")
	}
	if o.ServerK8sUpdateK8SHandler == nil {
		unregistered = append(unregistered, "server_k8s.UpdateK8SHandler")
	}
	if o.ServerUpdateServerHandler == nil {
		unregistered = append(unregistered, "server.UpdateServerHandler")
	}
	if o.ServerServantUpdateServerAdapterHandler == nil {
		unregistered = append(unregistered, "server_servant.UpdateServerAdapterHandler")
	}
	if o.ConfigUpdateServerConfigHandler == nil {
		unregistered = append(unregistered, "config.UpdateServerConfigHandler")
	}
	if o.ServerOptionUpdateServerOptionHandler == nil {
		unregistered = append(unregistered, "server_option.UpdateServerOptionHandler")
	}
	if o.TemplateUpdateTemplateHandler == nil {
		unregistered = append(unregistered, "template.UpdateTemplateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TafadminOpenapiAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TafadminOpenapiAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *TafadminOpenapiAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *TafadminOpenapiAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *TafadminOpenapiAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TafadminOpenapiAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the tafadmin openapi API
func (o *TafadminOpenapiAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TafadminOpenapiAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/notifies"] = notify.NewSelectNotify(o.context, o.NotifySelectNotifyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/servers/alivePods"] = server_pod.NewSelectPodAlive(o.context, o.ServerPodSelectPodAliveHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/servers/perishedPods"] = server_pod.NewSelectPodPerished(o.context, o.ServerPodSelectPodPerishedHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/applications"] = applications.NewCreateApp(o.context, o.ApplicationsCreateAppHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/approvals"] = approval.NewCreateApproval(o.context, o.ApprovalCreateApprovalHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/businesses"] = business.NewCreateBusiness(o.context, o.BusinessCreateBusinessHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/deploys"] = deploy.NewCreateDeploy(o.context, o.DeployCreateDeployHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/servers/servants"] = server_servant.NewCreateServerAdapter(o.context, o.ServerServantCreateServerAdapterHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/configs"] = config.NewCreateServerConfig(o.context, o.ConfigCreateServerConfigHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/releases"] = release.NewCreateServicePool(o.context, o.ReleaseCreateServicePoolHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/templates"] = template.NewCreateTemplate(o.context, o.TemplateCreateTemplateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/applications"] = applications.NewDeleteApp(o.context, o.ApplicationsDeleteAppHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/businesses"] = business.NewDeleteBusiness(o.context, o.BusinessDeleteBusinessHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/deploys"] = deploy.NewDeleteDeploy(o.context, o.DeployDeleteDeployHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/servers"] = server.NewDeleteServer(o.context, o.ServerDeleteServerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/servers/servants"] = server_servant.NewDeleteServerAdapter(o.context, o.ServerServantDeleteServerAdapterHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/configs"] = config.NewDeleteServerConfig(o.context, o.ConfigDeleteServerConfigHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/configs/versions"] = config.NewDeleteServerConfigHistory(o.context, o.ConfigDeleteServerConfigHistoryHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/templates"] = template.NewDeleteTemplate(o.context, o.TemplateDeleteTemplateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/configs"] = config.NewDoActiveHistoryConfig(o.context, o.ConfigDoActiveHistoryConfigHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/businesses/apps"] = business.NewDoAddBusinessApp(o.context, o.BusinessDoAddBusinessAppHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/affinities/nodes"] = affinity.NewDoAddNodeEnableServer(o.context, o.AffinityDoAddNodeEnableServerHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/affinities/servers"] = affinity.NewDoAddServerEnableNode(o.context, o.AffinityDoAddServerEnableNodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/affinities/nodes"] = affinity.NewDoDeleteNodeEnableServer(o.context, o.AffinityDoDeleteNodeEnableServerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nodes/public"] = node.NewDoDeletePublicNode(o.context, o.NodeDoDeletePublicNodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/affinities/servers"] = affinity.NewDoDeleteServerEnableNode(o.context, o.AffinityDoDeleteServerEnableNodeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/releases"] = release.NewDoEnableService(o.context, o.ReleaseDoEnableServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/affinities/servers"] = affinity.NewDoListAffinityGroupByAbility(o.context, o.AffinityDoListAffinityGroupByAbilityHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/affinities/nodes"] = affinity.NewDoListAffinityGroupByNode(o.context, o.AffinityDoListAffinityGroupByNodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/businesses/apps"] = business.NewDoListBusinessApp(o.context, o.BusinessDoListBusinessAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/cluster"] = node.NewDoListClusterNode(o.context, o.NodeDoListClusterNodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configs/join"] = config.NewDoPreviewConfigContent(o.context, o.ConfigDoPreviewConfigContentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/servers/options/templates"] = server_option.NewDoPreviewTemplateContent(o.context, o.ServerOptionDoPreviewTemplateContentHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/nodes/public"] = node.NewDoSetPublicNode(o.context, o.NodeDoSetPublicNodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/applications"] = applications.NewSelectApp(o.context, o.ApplicationsSelectAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/approvals"] = approval.NewSelectApproval(o.context, o.ApprovalSelectApprovalHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/hostPorts"] = agent.NewSelectAvailHostPort(o.context, o.AgentSelectAvailHostPortHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/businesses"] = business.NewSelectBusiness(o.context, o.BusinessSelectBusinessHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/defaults"] = default_operations.NewSelectDefaultValue(o.context, o.DefaultOperationsSelectDefaultValueHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/deploys"] = deploy.NewSelectDeploy(o.context, o.DeploySelectDeployHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/servers/k8s"] = server_k8s.NewSelectK8S(o.context, o.ServerK8sSelectK8SHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes"] = node.NewSelectNode(o.context, o.NodeSelectNodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/servers"] = server.NewSelectServer(o.context, o.ServerSelectServerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/servers/servants"] = server_servant.NewSelectServerAdapter(o.context, o.ServerServantSelectServerAdapterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configs"] = config.NewSelectServerConfig(o.context, o.ConfigSelectServerConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configs/versions"] = config.NewSelectServerConfigHistory(o.context, o.ConfigSelectServerConfigHistoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/servers/options"] = server_option.NewSelectServerOption(o.context, o.ServerOptionSelectServerOptionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/trees"] = tree.NewSelectServerTree(o.context, o.TreeSelectServerTreeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/servers/releases"] = release.NewSelectServiceEnabled(o.context, o.ReleaseSelectServiceEnabledHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/releases"] = release.NewSelectServicePool(o.context, o.ReleaseSelectServicePoolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates"] = template.NewSelectTemplate(o.context, o.TemplateSelectTemplateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shell"] = shell.NewSSHPodShell(o.context, o.ShellSSHPodShellHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/applications"] = applications.NewUpdateApp(o.context, o.ApplicationsUpdateAppHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/businesses"] = business.NewUpdateBusiness(o.context, o.BusinessUpdateBusinessHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/deploys"] = deploy.NewUpdateDeploy(o.context, o.DeployUpdateDeployHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/servers/k8s"] = server_k8s.NewUpdateK8S(o.context, o.ServerK8sUpdateK8SHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/servers"] = server.NewUpdateServer(o.context, o.ServerUpdateServerHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/servers/servants"] = server_servant.NewUpdateServerAdapter(o.context, o.ServerServantUpdateServerAdapterHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/configs"] = config.NewUpdateServerConfig(o.context, o.ConfigUpdateServerConfigHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/servers/options"] = server_option.NewUpdateServerOption(o.context, o.ServerOptionUpdateServerOptionHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/templates"] = template.NewUpdateTemplate(o.context, o.TemplateUpdateTemplateHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TafadminOpenapiAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TafadminOpenapiAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *TafadminOpenapiAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *TafadminOpenapiAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *TafadminOpenapiAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
