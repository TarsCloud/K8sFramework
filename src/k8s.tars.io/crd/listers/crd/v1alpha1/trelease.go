/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.tars.io/crd/v1alpha1"
)

// TReleaseLister helps list TReleases.
// All objects returned here must be treated as read-only.
type TReleaseLister interface {
	// List lists all TReleases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TRelease, err error)
	// TReleases returns an object that can list and get TReleases.
	TReleases(namespace string) TReleaseNamespaceLister
	TReleaseListerExpansion
}

// tReleaseLister implements the TReleaseLister interface.
type tReleaseLister struct {
	indexer cache.Indexer
}

// NewTReleaseLister returns a new TReleaseLister.
func NewTReleaseLister(indexer cache.Indexer) TReleaseLister {
	return &tReleaseLister{indexer: indexer}
}

// List lists all TReleases in the indexer.
func (s *tReleaseLister) List(selector labels.Selector) (ret []*v1alpha1.TRelease, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TRelease))
	})
	return ret, err
}

// TReleases returns an object that can list and get TReleases.
func (s *tReleaseLister) TReleases(namespace string) TReleaseNamespaceLister {
	return tReleaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TReleaseNamespaceLister helps list and get TReleases.
// All objects returned here must be treated as read-only.
type TReleaseNamespaceLister interface {
	// List lists all TReleases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TRelease, err error)
	// Get retrieves the TRelease from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TRelease, error)
	TReleaseNamespaceListerExpansion
}

// tReleaseNamespaceLister implements the TReleaseNamespaceLister
// interface.
type tReleaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TReleases in the indexer for a given namespace.
func (s tReleaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TRelease, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TRelease))
	})
	return ret, err
}

// Get retrieves the TRelease from the indexer for a given namespace and name.
func (s tReleaseNamespaceLister) Get(name string) (*v1alpha1.TRelease, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trelease"), name)
	}
	return obj.(*v1alpha1.TRelease), nil
}
